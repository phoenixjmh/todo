(()=>{"use strict";var e={192:(e,t,n)=>{n.d(t,{Z:()=>l});var o=n(537),r=n.n(o),a=n(645),i=n.n(a)()(r());i.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Roboto:wght@700&display=swap);"]),i.push([e.id,'body{display:flex;height:100vh;width:100%;font-family:"Roboto",sans-serif;font-weight:700;font-size:16pt}.side-panel{background-color:#3737ef;flex:1 1 auto;height:100%}.main-panel{flex:3 3 auto;border:2px solid #639;height:100%}.project-display-panel{display:flex;flex-direction:column;justify-content:center;align-items:center}.project{justify-content:center;align-items:center;display:flex}.project button{height:1rem}.todo{width:80%;display:flex;border:2px solid #000;justify-content:space-between}.title{position:relative;z-index:0;font-size:1.5rem;font-weight:700}.todo-new-title{position:absolute;left:0;width:100%;font-size:1.5rem}.due-date{position:relative;z-index:0;font-size:1.5rem;font-weight:700}.todo-new-date{position:absolute;left:0;width:100%;font-size:1.5rem}.create-project-form{border:2px solid #000;height:20%;position:absolute;top:50%;left:50%;background-color:gray}.create-todo-form{border:2px solid #000;height:20%;position:absolute;top:50%;left:50%;background-color:gray}',"",{version:3,sources:["webpack://./src/style.scss"],names:[],mappings:"AAEA,KACI,YAAA,CACA,YAAA,CACA,UAAA,CACA,+BAAA,CACA,eAAA,CACA,cAAA,CAGJ,YACI,wBAAA,CACA,aAAA,CACA,WAAA,CAIJ,YACI,aAAA,CACA,qBAAA,CACA,WAAA,CAGJ,uBACI,YAAA,CACA,qBAAA,CACA,sBAAA,CACA,kBAAA,CAEJ,SACI,sBAAA,CACA,kBAAA,CACA,YAAA,CACD,gBACC,WAAA,CAGJ,MACI,SAAA,CACA,YAAA,CACA,qBAAA,CACA,6BAAA,CAEJ,OACI,iBAAA,CACA,SAAA,CACA,gBAAA,CACA,eAAA,CAEJ,gBACI,iBAAA,CACA,MAAA,CACA,UAAA,CACA,gBAAA,CAEJ,UACI,iBAAA,CACI,SAAA,CACA,gBAAA,CACA,eAAA,CAER,eACI,iBAAA,CACI,MAAA,CACA,UAAA,CACA,gBAAA,CAER,qBACI,qBAAA,CACA,UAAA,CACA,iBAAA,CACA,OAAA,CACA,QAAA,CACA,qBAAA,CAGJ,kBACI,qBAAA,CACI,UAAA,CACA,iBAAA,CACA,OAAA,CACA,QAAA,CACA,qBAAA",sourcesContent:["@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@700&display=swap');\r\n\r\nbody{\r\n    display:flex;\r\n    height:100vh;\r\n    width:100%;\r\n    font-family:'Roboto',sans-serif;\r\n    font-weight:700;\r\n    font-size:16pt;\r\n}\r\n\r\n.side-panel{\r\n    background-color: rgb(55, 55, 239);\r\n    flex: 1 1 auto;\r\n    height:100%;\r\n}\r\n.project-manager{\r\n}\r\n.main-panel{\r\n    flex :3 3 auto;\r\n    border:2px solid rebeccapurple;\r\n    height:100%;\r\n\r\n}\r\n.project-display-panel{\r\n    display:flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n}\r\n.project{\r\n    justify-content: center;\r\n    align-items: center;\r\n    display:flex;\r\n   button{\r\n    height:1rem;\r\n   }\r\n}\r\n.todo{\r\n    width:80%;\r\n    display:flex;\r\n    border:2px solid black;\r\n    justify-content: space-between;\r\n}\r\n.title{\r\n    position:relative;\r\n    z-index: 0;\r\n    font-size:1.5rem;\r\n    font-weight:700;\r\n}\r\n.todo-new-title{\r\n    position:absolute;\r\n    left:0;\r\n    width:100%;\r\n    font-size:1.5rem;\r\n}\r\n.due-date{\r\n    position: relative;\r\n        z-index: 0;\r\n        font-size: 1.5rem;\r\n        font-weight: 700;\r\n}\r\n.todo-new-date{\r\n    position: absolute;\r\n        left: 0;\r\n        width: 100%;\r\n        font-size: 1.5rem;\r\n}\r\n.create-project-form{\r\n    border:2px solid black;\r\n    height:20%;\r\n    position:absolute;\r\n    top:50%;\r\n    left:50%;\r\n    background-color: gray;\r\n}\r\n\r\n.create-todo-form{\r\n    border: 2px solid black;\r\n        height: 20%;\r\n        position: absolute;\r\n        top: 50%;\r\n        left: 50%;\r\n        background-color: gray;\r\n}\r\n\r\n"],sourceRoot:""}]);const l=i},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",o=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),o&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),o&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,o,r,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(o)for(var l=0;l<this.length;l++){var d=this[l][0];null!=d&&(i[d]=!0)}for(var s=0;s<e.length;s++){var c=[].concat(e[s]);o&&i[c[0]]||(void 0!==a&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=a),n&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=n):c[2]=n),r&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=r):c[4]="".concat(r)),t.push(c))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),a="/*# ".concat(r," */");return[t].concat([a]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,o=0;o<t.length;o++)if(t[o].identifier===e){n=o;break}return n}function o(e,o){for(var a={},i=[],l=0;l<e.length;l++){var d=e[l],s=o.base?d[0]+o.base:d[0],c=a[s]||0,p="".concat(s," ").concat(c);a[s]=c+1;var A=n(p),u={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==A)t[A].references++,t[A].updater(u);else{var m=r(u,o);o.byIndex=l,t.splice(l,0,{identifier:p,updater:m,references:1})}i.push(p)}return i}function r(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,r){var a=o(e=e||[],r=r||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var l=n(a[i]);t[l].references--}for(var d=o(e,r),s=0;s<a.length;s++){var c=n(a[s]);0===t[c].references&&(t[c].updater(),t.splice(c,1))}a=d}}},569:e=>{var t={};e.exports=function(e,n){var o=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var o="";n.supports&&(o+="@supports (".concat(n.supports,") {")),n.media&&(o+="@media ".concat(n.media," {"));var r=void 0!==n.layer;r&&(o+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),o+=n.css,r&&(o+="}"),n.media&&(o+="}"),n.supports&&(o+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(o,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(o){var r=t[o];if(void 0!==r)return r.exports;var a=t[o]={id:o,exports:{}};return e[o](a,a.exports,n),a.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nc=void 0,(()=>{class e{constructor(e,t,n,o,r){this._title=e,this._description=t,this._dueDate=n,this._priority=o,this.id=r}get title(){return this._title}get description(){return this._description}get dueDate(){return this._dueDate}get priority(){return this._priority}get id(){return this._id}set title(e){this._title=e}set description(e){this._description=e}set dueDate(e){this._dueDate=e}set priority(e){this._priority=e}set id(e){this._id=e}}class t{todos=[];constructor(e,t,n){this._title=e,this._id=t,this._div=n}get title(){return this._title}set title(e){this._title=e}get id(){return this._id}get div(){return this._div}set div(e){this._div=e}addTodo(e){this.todos.push(e)}getAll(){return this.todos}}const o=(e,t)=>{let n=e.getAll();for(let e in n)n[e].id==t&&n.splice(e,1)},r=(e,t,n,r)=>{let a=document.createElement("div");a.classList.add("todo"),a.id="todo-"+e.id,a.setAttribute("draggable","true");let l=document.createElement("input");l.setAttribute("type","checkbox"),l.classList.add("todo-checkbox");let d=document.createElement("p");d.classList.add("title"),d.textContent=e.title;let s=document.createElement("h4");s.classList.add("due-date"),s.textContent=e.dueDate;let c=document.createElement("input");c.setAttribute("type","date"),c.classList.add("todo-new-date"),c.value=e.dueDate;let p=document.createElement("button");p.classList.add("remove-todo"),p.textContent="Remove",a.appendChild(l),a.appendChild(d),a.appendChild(s),a.appendChild(p),t.appendChild(a);let A=document.createElement("input");return A.classList.add("todo-new-title"),A.value=e.title,p.addEventListener("click",(()=>{o(n,e.id),a.remove(),console.log(e.id),console.log(r.getAll()),localStorage.setItem("packageManager",JSON.stringify(r))})),d.addEventListener("click",(()=>{d.appendChild(A),A.focus()})),A.onblur=()=>{e.title=A.value,d.textContent=e.title,A.remove(),localStorage.setItem("packageManager",JSON.stringify(r))},A.addEventListener("keyup",(({key:e})=>{"Enter"===e&&A.blur()})),a.ondragstart=t=>{const o={todoObj:e,projectObj:n};t.dataTransfer.setData("text",JSON.stringify(o))},a.ondragend=e=>{e.preventDefault(),i(r,n,t)},s.addEventListener("click",(()=>{s.appendChild(c),c.focus()})),c.onblur=()=>{""!==c.value&&(e.dueDate=c.value,s.value=e.dueDate,s.textContent=e.dueDate,localStorage.setItem("packageManager",JSON.stringify(r))),c.remove()},c.addEventListener("keyup",(({key:e})=>{"Enter"===e&&c.blur()})),a},a=(e,t)=>{e.getAll().forEach((n=>{n.getAll().forEach((o=>{r(o,t,n,e)}))}))},i=(e,t,n)=>{n.innerHTML="","All"===t.title?a(e,n):t.getAll().forEach((o=>{r(o,n,t,e)}))},l=(t,n,o)=>{const r=document.querySelector(".main-panel");let a=document.createElement("button");a.classList.add("create-todo-form-button"),a.id="todo-create-new",a.textContent="Create new Todo",a.addEventListener("click",(()=>{((t,n,o)=>{let r=document.createElement("div");r.classList.add("create-todo-form");let a=document.createElement("form"),l=document.createElement("label");l.setAttribute("for","form-todo-title"),l.textContent="Title";let d=document.createElement("input");d.setAttribute("type","text"),d.id="form-Todo-title";let s=document.createElement("label");s.setAttribute("for","form-todo-dueDate"),s.textContent="Due Date";let c=document.createElement("input");c.setAttribute("type","date"),c.id="form-todo-dueDate";let p=document.createElement("label");p.setAttribute("for","form-todo-priority"),p.textContent="Priority";let A=document.createElement("input");A.setAttribute("type","text"),A.id="form-todo-priority";let u=document.createElement("button");u.textContent="Create",u.classList.add("form-button-todo"),a.appendChild(l),a.appendChild(d),a.appendChild(s),a.appendChild(c),r.appendChild(a),r.appendChild(u),document.body.appendChild(r),u.addEventListener("click",(()=>{let a=new e(d.value," ",c.value,A.value,(()=>{let e=0;return t.getAll().forEach((t=>{t.getAll().forEach((t=>e+=1))})),e})());""===a._dueDate&&(a._dueDate="Set Date"),n.addTodo(a),r.remove(),i(t,n,o),localStorage.setItem("packageManager",JSON.stringify(t))}))})(t,n,o)}));let l=document.getElementById("todo-create-new");return document.body.contains(l)&&l.remove(),r.appendChild(a),a},d=(t,n,r)=>{n.innerHTML="",console.log("hello from loadProjects",t.projects);const d=t.projects;console.log("copied array",d),d.forEach((d=>{const s=((t,n,r,d,s,c)=>{if("All"!==n.title){let e=document.createElement("div"),r=document.createElement("button");r.classList.add("edit-project"),r.textContent="rename",e.classList.add("project"),e.id="project-"+d;let a=document.createElement("h1");a.classList.add("project-name"),a.textContent=n.title;let A=document.createElement("input");A.id="new-name-input",A.value=n.title;let u=document.createElement("button");u.classList.add(".project-remove-button"),u.textContent="X",e.appendChild(a),e.appendChild(r),e.appendChild(u),s.appendChild(e),e.addEventListener("drop",(e=>p(e,n,t))),u.addEventListener("click",(()=>{o(t,n.id),localStorage.setItem("packageManager",JSON.stringify(t)),console.log("after remove",t),e.remove()})),r.addEventListener("click",(()=>{a.remove(),e.appendChild(A)})),A.onblur=()=>{a.textContent=A.value,n.title=A.value,A.remove(),e.insertBefore(a,r),localStorage.setItem("packageManager",JSON.stringify(t))},A.addEventListener("keyup",(({key:e})=>{"Enter"===e&&A.blur()})),a.addEventListener("click",(function(){c.innerHTML="",i(t,n,c),l(t,n,c)})),e.addEventListener("dragover",(e=>{e.preventDefault()}))}else{let e=document.createElement("div");e.classList.add("project"),e.id="all-projects-container";let o=document.createElement("h1");o.classList.add("project-name"),o.textContent=n.title,e.appendChild(o),s.appendChild(e),o.addEventListener("click",(function(){c.innerHTML="",a(t,c),l(t,n,c)}))}const p=(t,n,r)=>{t.preventDefault();const a=JSON.parse(t.dataTransfer.getData("text")).todoObj,i=JSON.parse(t.dataTransfer.getData("text")).projectObj;console.log("Adding",a,"to",n.title,"from",i);const l=new e(a._title,a._description,a._dueDate," ",a._id);n.addTodo(l),console.log(a._id,"unparsed id"),console.log("referenced todo",l);let d=r.getAll();for(let e in d)if(d[e].id==i._id){let t=d[e];o(t,l.id),console.log("removeElement args",t,l.id)}localStorage.setItem("packageManager",JSON.stringify(r))}})(t,d,d.title,d.id,n,r);d.div=s,localStorage.setItem("packageManager",JSON.stringify(t))}))};var s=n(379),c=n.n(s),p=n(795),A=n.n(p),u=n(569),m=n.n(u),f=n(565),C=n.n(f),g=n(216),h=n.n(g),v=n(589),b=n.n(v),y=n(192),E={};E.styleTagTransform=b(),E.setAttributes=C(),E.insert=m().bind(null,"head"),E.domAPI=A(),E.insertStyleElement=h(),c()(y.Z,E),y.Z&&y.Z.locals&&y.Z.locals;let x,j=new class{projects=[];addProj(e){this.projects.push(e)}getAll(){return this.projects}};if(console.log(j.getAll()),null!=localStorage.getItem("packageManager")){if(x=JSON.parse(localStorage.getItem("packageManager")).projects,console.log("saved proj",x),x.forEach(((n,o)=>{let r=new t(n._title,n._id,n._div);j.addProj(r),n.todos.forEach((t=>{console.log(t);let n=new e(t._title,t._description,t._dueDate,"",t._id);r.addTodo(n)}))})),j.getAll().length<1){let e=new t("All",0);j.addProj(e)}}else{let e=new t("Project",0);j.addProj(e)}const w=(()=>{let e=document.createElement("div");e.classList.add("main-panel");let t=document.createElement("div");return t.classList.add("project-display-panel"),e.appendChild(t),document.body.appendChild(e),t})(),L=((e,n)=>{let o=document.createElement("div");o.classList.add("side-panel");let r=document.createElement("div");r.classList.add("project-manager");let a=document.createElement("button");a.classList.add("new-project-button"),a.textContent="Create A New Project";let i=document.querySelector(".main-panel");const l=document.body;return o.appendChild(r),o.appendChild(a),l.insertBefore(o,i),a.addEventListener("click",(()=>{((e,n,o)=>{let r=document.createElement("div");r.classList.add("create-project-form");let a=document.createElement("form"),i=document.createElement("label");i.setAttribute("for","form-project-name"),i.textContent="Project Name";let l=document.createElement("input");l.setAttribute("type","text"),l.id="form-project-name";let s=document.createElement("button");s.textContent="Create",s.classList.add("form-button"),a.appendChild(i),a.appendChild(l),r.appendChild(a),r.appendChild(s),document.body.appendChild(r),s.addEventListener("click",(()=>{r.remove();let a=new t(l.value,n.getAll().length);n.addProj(a),d(n,e,o),localStorage.setItem("packageManager",JSON.stringify(n))}))})(r,e,n),console.log("button")})),r})(j,w);d(j,L,w),localStorage.setItem("packageManager",JSON.stringify(j))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QWlCLFNBQVMsS0FDckNtRSxFQUFrQnBLLFNBQ2xCLElBQUl3SyxFQUFlLElBQUk5RixFQUFRNkYsRUFBVXpFLE1BQU9ULEVBQUdMLFNBQVM1SCxRQUM1RGlJLEVBQUdxRSxRQUFRYyxHQUNYLEVBQWFuRixFQUFJdUQsRUFBWXpELEdBQzdCaUIsYUFBYUMsUUFBUSxpQkFBa0JoSSxLQUFLQyxVQUFVK0csR0FBSSxHQUUxRCxFRFRBLENBQXFCbUQsRUFBbUJuRCxFQUFJRixHQUM1Q2UsUUFBUUMsSUFBSSxTQUFTLElBR2hCcUMsQ0FBaUIsRUZzQkFpQyxDQUFtQnBGLEVBQUlGLEdBS2pELEVBQWFFLEVBQUltRCxFQUFtQnJELEdBQ3BDaUIsYUFBYUMsUUFBUSxpQkFBaUJoSSxLQUFLQyxVQUFVK0csRyIsInNvdXJjZXMiOlsid2VicGFjazovL3RvZG8vLi9zcmMvc3R5bGUuc2NzcyIsIndlYnBhY2s6Ly90b2RvLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly90b2RvLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanMiLCJ3ZWJwYWNrOi8vdG9kby8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly90b2RvLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qcyIsIndlYnBhY2s6Ly90b2RvLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzIiwid2VicGFjazovL3RvZG8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanMiLCJ3ZWJwYWNrOi8vdG9kby8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzIiwid2VicGFjazovL3RvZG8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly90b2RvL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL3RvZG8vd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vdG9kby93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vdG9kby93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL3RvZG8vd2VicGFjay9ydW50aW1lL25vbmNlIiwid2VicGFjazovL3RvZG8vLi9zcmMvc2NyaXB0cy9Ub2RvLmpzIiwid2VicGFjazovL3RvZG8vLi9zcmMvc2NyaXB0cy9Qcm9qZWN0LmpzIiwid2VicGFjazovL3RvZG8vLi9zcmMvc2NyaXB0cy9yZW1vdmVFbGVtZW50LmpzIiwid2VicGFjazovL3RvZG8vLi9zcmMvc2NyaXB0cy9kcmF3VG9kby5qcyIsIndlYnBhY2s6Ly90b2RvLy4vc3JjL3NjcmlwdHMvZHJhd0FsbFRvZG9zLmpzIiwid2VicGFjazovL3RvZG8vLi9zcmMvc2NyaXB0cy9kcmF3RXhpc3RpbmdUb2Rvcy5qcyIsIndlYnBhY2s6Ly90b2RvLy4vc3JjL3NjcmlwdHMvbmV3VG9kb0J1dHRvbi5qcyIsIndlYnBhY2s6Ly90b2RvLy4vc3JjL3NjcmlwdHMvbmV3VG9kb0Zvcm0uanMiLCJ3ZWJwYWNrOi8vdG9kby8uL3NyYy9zY3JpcHRzL2xvYWRQcm9qZWN0cy5qcyIsIndlYnBhY2s6Ly90b2RvLy4vc3JjL3NjcmlwdHMvZHJhd1Byb2plY3RzVG9MaXN0LmpzIiwid2VicGFjazovL3RvZG8vLi9zcmMvc3R5bGUuc2Nzcz83NWJhIiwid2VicGFjazovL3RvZG8vLi9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby8uL3NyYy9zY3JpcHRzL1Byb2plY3RNYW5hZ2VyLmpzIiwid2VicGFjazovL3RvZG8vLi9zcmMvc2NyaXB0cy9sb2FkTWFpbi5qcyIsIndlYnBhY2s6Ly90b2RvLy4vc3JjL3NjcmlwdHMvbmV3UHJvamVjdEZvcm0uanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiQGltcG9ydCB1cmwoaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3MyP2ZhbWlseT1Sb2JvdG86d2dodEA3MDAmZGlzcGxheT1zd2FwKTtcIl0pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiYm9keXtkaXNwbGF5OmZsZXg7aGVpZ2h0OjEwMHZoO3dpZHRoOjEwMCU7Zm9udC1mYW1pbHk6XFxcIlJvYm90b1xcXCIsc2Fucy1zZXJpZjtmb250LXdlaWdodDo3MDA7Zm9udC1zaXplOjE2cHR9LnNpZGUtcGFuZWx7YmFja2dyb3VuZC1jb2xvcjojMzczN2VmO2ZsZXg6MSAxIGF1dG87aGVpZ2h0OjEwMCV9Lm1haW4tcGFuZWx7ZmxleDozIDMgYXV0bztib3JkZXI6MnB4IHNvbGlkICM2Mzk7aGVpZ2h0OjEwMCV9LnByb2plY3QtZGlzcGxheS1wYW5lbHtkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246Y29sdW1uO2p1c3RpZnktY29udGVudDpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyfS5wcm9qZWN0e2p1c3RpZnktY29udGVudDpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyO2Rpc3BsYXk6ZmxleH0ucHJvamVjdCBidXR0b257aGVpZ2h0OjFyZW19LnRvZG97d2lkdGg6ODAlO2Rpc3BsYXk6ZmxleDtib3JkZXI6MnB4IHNvbGlkICMwMDA7anVzdGlmeS1jb250ZW50OnNwYWNlLWJldHdlZW59LnRpdGxle3Bvc2l0aW9uOnJlbGF0aXZlO3otaW5kZXg6MDtmb250LXNpemU6MS41cmVtO2ZvbnQtd2VpZ2h0OjcwMH0udG9kby1uZXctdGl0bGV7cG9zaXRpb246YWJzb2x1dGU7bGVmdDowO3dpZHRoOjEwMCU7Zm9udC1zaXplOjEuNXJlbX0uZHVlLWRhdGV7cG9zaXRpb246cmVsYXRpdmU7ei1pbmRleDowO2ZvbnQtc2l6ZToxLjVyZW07Zm9udC13ZWlnaHQ6NzAwfS50b2RvLW5ldy1kYXRle3Bvc2l0aW9uOmFic29sdXRlO2xlZnQ6MDt3aWR0aDoxMDAlO2ZvbnQtc2l6ZToxLjVyZW19LmNyZWF0ZS1wcm9qZWN0LWZvcm17Ym9yZGVyOjJweCBzb2xpZCAjMDAwO2hlaWdodDoyMCU7cG9zaXRpb246YWJzb2x1dGU7dG9wOjUwJTtsZWZ0OjUwJTtiYWNrZ3JvdW5kLWNvbG9yOmdyYXl9LmNyZWF0ZS10b2RvLWZvcm17Ym9yZGVyOjJweCBzb2xpZCAjMDAwO2hlaWdodDoyMCU7cG9zaXRpb246YWJzb2x1dGU7dG9wOjUwJTtsZWZ0OjUwJTtiYWNrZ3JvdW5kLWNvbG9yOmdyYXl9XCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL3N0eWxlLnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBRUEsS0FDSSxZQUFBLENBQ0EsWUFBQSxDQUNBLFVBQUEsQ0FDQSwrQkFBQSxDQUNBLGVBQUEsQ0FDQSxjQUFBLENBR0osWUFDSSx3QkFBQSxDQUNBLGFBQUEsQ0FDQSxXQUFBLENBSUosWUFDSSxhQUFBLENBQ0EscUJBQUEsQ0FDQSxXQUFBLENBR0osdUJBQ0ksWUFBQSxDQUNBLHFCQUFBLENBQ0Esc0JBQUEsQ0FDQSxrQkFBQSxDQUVKLFNBQ0ksc0JBQUEsQ0FDQSxrQkFBQSxDQUNBLFlBQUEsQ0FDRCxnQkFDQyxXQUFBLENBR0osTUFDSSxTQUFBLENBQ0EsWUFBQSxDQUNBLHFCQUFBLENBQ0EsNkJBQUEsQ0FFSixPQUNJLGlCQUFBLENBQ0EsU0FBQSxDQUNBLGdCQUFBLENBQ0EsZUFBQSxDQUVKLGdCQUNJLGlCQUFBLENBQ0EsTUFBQSxDQUNBLFVBQUEsQ0FDQSxnQkFBQSxDQUVKLFVBQ0ksaUJBQUEsQ0FDSSxTQUFBLENBQ0EsZ0JBQUEsQ0FDQSxlQUFBLENBRVIsZUFDSSxpQkFBQSxDQUNJLE1BQUEsQ0FDQSxVQUFBLENBQ0EsZ0JBQUEsQ0FFUixxQkFDSSxxQkFBQSxDQUNBLFVBQUEsQ0FDQSxpQkFBQSxDQUNBLE9BQUEsQ0FDQSxRQUFBLENBQ0EscUJBQUEsQ0FHSixrQkFDSSxxQkFBQSxDQUNJLFVBQUEsQ0FDQSxpQkFBQSxDQUNBLE9BQUEsQ0FDQSxRQUFBLENBQ0EscUJBQUFcIixcInNvdXJjZXNDb250ZW50XCI6W1wiQGltcG9ydCB1cmwoJ2h0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzMj9mYW1pbHk9Um9ib3RvOndnaHRANzAwJmRpc3BsYXk9c3dhcCcpO1xcclxcblxcclxcbmJvZHl7XFxyXFxuICAgIGRpc3BsYXk6ZmxleDtcXHJcXG4gICAgaGVpZ2h0OjEwMHZoO1xcclxcbiAgICB3aWR0aDoxMDAlO1xcclxcbiAgICBmb250LWZhbWlseTonUm9ib3RvJyxzYW5zLXNlcmlmO1xcclxcbiAgICBmb250LXdlaWdodDo3MDA7XFxyXFxuICAgIGZvbnQtc2l6ZToxNnB0O1xcclxcbn1cXHJcXG5cXHJcXG4uc2lkZS1wYW5lbHtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDU1LCA1NSwgMjM5KTtcXHJcXG4gICAgZmxleDogMSAxIGF1dG87XFxyXFxuICAgIGhlaWdodDoxMDAlO1xcclxcbn1cXHJcXG4ucHJvamVjdC1tYW5hZ2Vye1xcclxcbn1cXHJcXG4ubWFpbi1wYW5lbHtcXHJcXG4gICAgZmxleCA6MyAzIGF1dG87XFxyXFxuICAgIGJvcmRlcjoycHggc29saWQgcmViZWNjYXB1cnBsZTtcXHJcXG4gICAgaGVpZ2h0OjEwMCU7XFxyXFxuXFxyXFxufVxcclxcbi5wcm9qZWN0LWRpc3BsYXktcGFuZWx7XFxyXFxuICAgIGRpc3BsYXk6ZmxleDtcXHJcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXHJcXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxyXFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxufVxcclxcbi5wcm9qZWN0e1xcclxcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXHJcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG4gICAgZGlzcGxheTpmbGV4O1xcclxcbiAgIGJ1dHRvbntcXHJcXG4gICAgaGVpZ2h0OjFyZW07XFxyXFxuICAgfVxcclxcbn1cXHJcXG4udG9kb3tcXHJcXG4gICAgd2lkdGg6ODAlO1xcclxcbiAgICBkaXNwbGF5OmZsZXg7XFxyXFxuICAgIGJvcmRlcjoycHggc29saWQgYmxhY2s7XFxyXFxuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXHJcXG59XFxyXFxuLnRpdGxle1xcclxcbiAgICBwb3NpdGlvbjpyZWxhdGl2ZTtcXHJcXG4gICAgei1pbmRleDogMDtcXHJcXG4gICAgZm9udC1zaXplOjEuNXJlbTtcXHJcXG4gICAgZm9udC13ZWlnaHQ6NzAwO1xcclxcbn1cXHJcXG4udG9kby1uZXctdGl0bGV7XFxyXFxuICAgIHBvc2l0aW9uOmFic29sdXRlO1xcclxcbiAgICBsZWZ0OjA7XFxyXFxuICAgIHdpZHRoOjEwMCU7XFxyXFxuICAgIGZvbnQtc2l6ZToxLjVyZW07XFxyXFxufVxcclxcbi5kdWUtZGF0ZXtcXHJcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcclxcbiAgICAgICAgei1pbmRleDogMDtcXHJcXG4gICAgICAgIGZvbnQtc2l6ZTogMS41cmVtO1xcclxcbiAgICAgICAgZm9udC13ZWlnaHQ6IDcwMDtcXHJcXG59XFxyXFxuLnRvZG8tbmV3LWRhdGV7XFxyXFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXHJcXG4gICAgICAgIGxlZnQ6IDA7XFxyXFxuICAgICAgICB3aWR0aDogMTAwJTtcXHJcXG4gICAgICAgIGZvbnQtc2l6ZTogMS41cmVtO1xcclxcbn1cXHJcXG4uY3JlYXRlLXByb2plY3QtZm9ybXtcXHJcXG4gICAgYm9yZGVyOjJweCBzb2xpZCBibGFjaztcXHJcXG4gICAgaGVpZ2h0OjIwJTtcXHJcXG4gICAgcG9zaXRpb246YWJzb2x1dGU7XFxyXFxuICAgIHRvcDo1MCU7XFxyXFxuICAgIGxlZnQ6NTAlO1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBncmF5O1xcclxcbn1cXHJcXG5cXHJcXG4uY3JlYXRlLXRvZG8tZm9ybXtcXHJcXG4gICAgYm9yZGVyOiAycHggc29saWQgYmxhY2s7XFxyXFxuICAgICAgICBoZWlnaHQ6IDIwJTtcXHJcXG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXHJcXG4gICAgICAgIHRvcDogNTAlO1xcclxcbiAgICAgICAgbGVmdDogNTAlO1xcclxcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogZ3JheTtcXHJcXG59XFxyXFxuXFxyXFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5cclxuLypcclxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxyXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcclxuKi9cclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzV2l0aE1hcHBpbmdUb1N0cmluZykge1xyXG4gIHZhciBsaXN0ID0gW107XHJcblxyXG4gIC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcclxuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcclxuICAgICAgdmFyIGNvbnRlbnQgPSBcIlwiO1xyXG4gICAgICB2YXIgbmVlZExheWVyID0gdHlwZW9mIGl0ZW1bNV0gIT09IFwidW5kZWZpbmVkXCI7XHJcbiAgICAgIGlmIChpdGVtWzRdKSB7XHJcbiAgICAgICAgY29udGVudCArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpO1xyXG4gICAgICB9XHJcbiAgICAgIGlmIChpdGVtWzJdKSB7XHJcbiAgICAgICAgY29udGVudCArPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKTtcclxuICAgICAgfVxyXG4gICAgICBpZiAobmVlZExheWVyKSB7XHJcbiAgICAgICAgY29udGVudCArPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpO1xyXG4gICAgICB9XHJcbiAgICAgIGNvbnRlbnQgKz0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKTtcclxuICAgICAgaWYgKG5lZWRMYXllcikge1xyXG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKGl0ZW1bMl0pIHtcclxuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xyXG4gICAgICB9XHJcbiAgICAgIGlmIChpdGVtWzRdKSB7XHJcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gY29udGVudDtcclxuICAgIH0pLmpvaW4oXCJcIik7XHJcbiAgfTtcclxuXHJcbiAgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcclxuICBsaXN0LmkgPSBmdW5jdGlvbiBpKG1vZHVsZXMsIG1lZGlhLCBkZWR1cGUsIHN1cHBvcnRzLCBsYXllcikge1xyXG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIHVuZGVmaW5lZF1dO1xyXG4gICAgfVxyXG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcclxuICAgIGlmIChkZWR1cGUpIHtcclxuICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCB0aGlzLmxlbmd0aDsgaysrKSB7XHJcbiAgICAgICAgdmFyIGlkID0gdGhpc1trXVswXTtcclxuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xyXG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgZm9yICh2YXIgX2sgPSAwOyBfayA8IG1vZHVsZXMubGVuZ3RoOyBfaysrKSB7XHJcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2tdKTtcclxuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XHJcbiAgICAgICAgY29udGludWU7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKHR5cGVvZiBsYXllciAhPT0gXCJ1bmRlZmluZWRcIikge1xyXG4gICAgICAgIGlmICh0eXBlb2YgaXRlbVs1XSA9PT0gXCJ1bmRlZmluZWRcIikge1xyXG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xyXG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBpZiAobWVkaWEpIHtcclxuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcclxuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgaXRlbVsxXSA9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XHJcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGlmIChzdXBwb3J0cykge1xyXG4gICAgICAgIGlmICghaXRlbVs0XSkge1xyXG4gICAgICAgICAgaXRlbVs0XSA9IFwiXCIuY29uY2F0KHN1cHBvcnRzKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgaXRlbVsxXSA9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcclxuICAgICAgICAgIGl0ZW1bNF0gPSBzdXBwb3J0cztcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xyXG4gICAgfVxyXG4gIH07XHJcbiAgcmV0dXJuIGxpc3Q7XHJcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVtKSB7XHJcbiAgdmFyIGNvbnRlbnQgPSBpdGVtWzFdO1xyXG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcclxuICBpZiAoIWNzc01hcHBpbmcpIHtcclxuICAgIHJldHVybiBjb250ZW50O1xyXG4gIH1cclxuICBpZiAodHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGNzc01hcHBpbmcpKSkpO1xyXG4gICAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xyXG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XHJcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oXCJcXG5cIik7XHJcbiAgfVxyXG4gIHJldHVybiBbY29udGVudF0uam9pbihcIlxcblwiKTtcclxufTsiLCJcInVzZSBzdHJpY3RcIjtcclxuXHJcbnZhciBzdHlsZXNJbkRPTSA9IFtdO1xyXG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XHJcbiAgdmFyIHJlc3VsdCA9IC0xO1xyXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5ET00ubGVuZ3RoOyBpKyspIHtcclxuICAgIGlmIChzdHlsZXNJbkRPTVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XHJcbiAgICAgIHJlc3VsdCA9IGk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gcmVzdWx0O1xyXG59XHJcbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XHJcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcclxuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcclxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcclxuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcclxuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xyXG4gICAgdmFyIGNvdW50ID0gaWRDb3VudE1hcFtpZF0gfHwgMDtcclxuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xyXG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XHJcbiAgICB2YXIgaW5kZXhCeUlkZW50aWZpZXIgPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcclxuICAgIHZhciBvYmogPSB7XHJcbiAgICAgIGNzczogaXRlbVsxXSxcclxuICAgICAgbWVkaWE6IGl0ZW1bMl0sXHJcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXSxcclxuICAgICAgc3VwcG9ydHM6IGl0ZW1bNF0sXHJcbiAgICAgIGxheWVyOiBpdGVtWzVdXHJcbiAgICB9O1xyXG4gICAgaWYgKGluZGV4QnlJZGVudGlmaWVyICE9PSAtMSkge1xyXG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0ucmVmZXJlbmNlcysrO1xyXG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0udXBkYXRlcihvYmopO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdmFyIHVwZGF0ZXIgPSBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKTtcclxuICAgICAgb3B0aW9ucy5ieUluZGV4ID0gaTtcclxuICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKGksIDAsIHtcclxuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxyXG4gICAgICAgIHVwZGF0ZXI6IHVwZGF0ZXIsXHJcbiAgICAgICAgcmVmZXJlbmNlczogMVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XHJcbiAgfVxyXG4gIHJldHVybiBpZGVudGlmaWVycztcclxufVxyXG5mdW5jdGlvbiBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKSB7XHJcbiAgdmFyIGFwaSA9IG9wdGlvbnMuZG9tQVBJKG9wdGlvbnMpO1xyXG4gIGFwaS51cGRhdGUob2JqKTtcclxuICB2YXIgdXBkYXRlciA9IGZ1bmN0aW9uIHVwZGF0ZXIobmV3T2JqKSB7XHJcbiAgICBpZiAobmV3T2JqKSB7XHJcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXAgJiYgbmV3T2JqLnN1cHBvcnRzID09PSBvYmouc3VwcG9ydHMgJiYgbmV3T2JqLmxheWVyID09PSBvYmoubGF5ZXIpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgICAgYXBpLnVwZGF0ZShvYmogPSBuZXdPYmopO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgYXBpLnJlbW92ZSgpO1xyXG4gICAgfVxyXG4gIH07XHJcbiAgcmV0dXJuIHVwZGF0ZXI7XHJcbn1cclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xyXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xyXG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xyXG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XHJcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XHJcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xyXG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcclxuICAgICAgc3R5bGVzSW5ET01baW5kZXhdLnJlZmVyZW5jZXMtLTtcclxuICAgIH1cclxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XHJcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xyXG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xyXG4gICAgICBpZiAoc3R5bGVzSW5ET01bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XHJcbiAgICAgICAgc3R5bGVzSW5ET01bX2luZGV4XS51cGRhdGVyKCk7XHJcbiAgICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKF9pbmRleCwgMSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcclxuICB9O1xyXG59OyIsIlwidXNlIHN0cmljdFwiO1xyXG5cclxudmFyIG1lbW8gPSB7fTtcclxuXHJcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xyXG5mdW5jdGlvbiBnZXRUYXJnZXQodGFyZ2V0KSB7XHJcbiAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09IFwidW5kZWZpbmVkXCIpIHtcclxuICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTtcclxuXHJcbiAgICAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxyXG4gICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXHJcbiAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcclxuICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xyXG4gICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcclxuICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xyXG4gIH1cclxuICByZXR1cm4gbWVtb1t0YXJnZXRdO1xyXG59XHJcblxyXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cclxuZnVuY3Rpb24gaW5zZXJ0QnlTZWxlY3RvcihpbnNlcnQsIHN0eWxlKSB7XHJcbiAgdmFyIHRhcmdldCA9IGdldFRhcmdldChpbnNlcnQpO1xyXG4gIGlmICghdGFyZ2V0KSB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xyXG4gIH1cclxuICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xyXG59XHJcbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0QnlTZWxlY3RvcjsiLCJcInVzZSBzdHJpY3RcIjtcclxuXHJcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xyXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xyXG4gIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xyXG4gIG9wdGlvbnMuc2V0QXR0cmlidXRlcyhlbGVtZW50LCBvcHRpb25zLmF0dHJpYnV0ZXMpO1xyXG4gIG9wdGlvbnMuaW5zZXJ0KGVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XHJcbiAgcmV0dXJuIGVsZW1lbnQ7XHJcbn1cclxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cclxuZnVuY3Rpb24gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzKHN0eWxlRWxlbWVudCkge1xyXG4gIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcclxuICBpZiAobm9uY2UpIHtcclxuICAgIHN0eWxlRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLCBub25jZSk7XHJcbiAgfVxyXG59XHJcbm1vZHVsZS5leHBvcnRzID0gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzOyIsIlwidXNlIHN0cmljdFwiO1xyXG5cclxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXHJcbmZ1bmN0aW9uIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKSB7XHJcbiAgdmFyIGNzcyA9IFwiXCI7XHJcbiAgaWYgKG9iai5zdXBwb3J0cykge1xyXG4gICAgY3NzICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQob2JqLnN1cHBvcnRzLCBcIikge1wiKTtcclxuICB9XHJcbiAgaWYgKG9iai5tZWRpYSkge1xyXG4gICAgY3NzICs9IFwiQG1lZGlhIFwiLmNvbmNhdChvYmoubWVkaWEsIFwiIHtcIik7XHJcbiAgfVxyXG4gIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2Ygb2JqLmxheWVyICE9PSBcInVuZGVmaW5lZFwiO1xyXG4gIGlmIChuZWVkTGF5ZXIpIHtcclxuICAgIGNzcyArPSBcIkBsYXllclwiLmNvbmNhdChvYmoubGF5ZXIubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChvYmoubGF5ZXIpIDogXCJcIiwgXCIge1wiKTtcclxuICB9XHJcbiAgY3NzICs9IG9iai5jc3M7XHJcbiAgaWYgKG5lZWRMYXllcikge1xyXG4gICAgY3NzICs9IFwifVwiO1xyXG4gIH1cclxuICBpZiAob2JqLm1lZGlhKSB7XHJcbiAgICBjc3MgKz0gXCJ9XCI7XHJcbiAgfVxyXG4gIGlmIChvYmouc3VwcG9ydHMpIHtcclxuICAgIGNzcyArPSBcIn1cIjtcclxuICB9XHJcbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XHJcbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gXCJ1bmRlZmluZWRcIikge1xyXG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XHJcbiAgfVxyXG5cclxuICAvLyBGb3Igb2xkIElFXHJcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xyXG4gIG9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XHJcbn1cclxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCkge1xyXG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxyXG4gIGlmIChzdHlsZUVsZW1lbnQucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxuICBzdHlsZUVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQpO1xyXG59XHJcblxyXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cclxuZnVuY3Rpb24gZG9tQVBJKG9wdGlvbnMpIHtcclxuICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSBcInVuZGVmaW5lZFwiKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZSgpIHt9LFxyXG4gICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHt9XHJcbiAgICB9O1xyXG4gIH1cclxuICB2YXIgc3R5bGVFbGVtZW50ID0gb3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XHJcbiAgcmV0dXJuIHtcclxuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKG9iaikge1xyXG4gICAgICBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaik7XHJcbiAgICB9LFxyXG4gICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XHJcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpO1xyXG4gICAgfVxyXG4gIH07XHJcbn1cclxubW9kdWxlLmV4cG9ydHMgPSBkb21BUEk7IiwiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cclxuZnVuY3Rpb24gc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQpIHtcclxuICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcclxuICAgIHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XHJcbiAgfSBlbHNlIHtcclxuICAgIHdoaWxlIChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCkge1xyXG4gICAgICBzdHlsZUVsZW1lbnQucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpO1xyXG4gICAgfVxyXG4gICAgc3R5bGVFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xyXG4gIH1cclxufVxyXG5tb2R1bGUuZXhwb3J0cyA9IHN0eWxlVGFnVHJhbnNmb3JtOyIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm5jID0gdW5kZWZpbmVkOyIsIlxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVG9kbyB7XHJcbiAgY29uc3RydWN0b3IoVGl0bGUsIERlc2NyaXB0aW9uLCBkdWVEYXRlLCBwcmlvcml0eSwgaWQpIHtcclxuICAgIHRoaXMuX3RpdGxlID0gVGl0bGU7XHJcbiAgICB0aGlzLl9kZXNjcmlwdGlvbiA9IERlc2NyaXB0aW9uO1xyXG4gICAgdGhpcy5fZHVlRGF0ZSA9IGR1ZURhdGU7XHJcbiAgICB0aGlzLl9wcmlvcml0eSA9IHByaW9yaXR5O1xyXG4gICAgdGhpcy5pZCA9IGlkO1xyXG4gIH1cclxuICBnZXQgdGl0bGUoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5fdGl0bGU7XHJcbiAgfVxyXG4gIGdldCBkZXNjcmlwdGlvbigpIHtcclxuICAgIHJldHVybiB0aGlzLl9kZXNjcmlwdGlvbjtcclxuICB9XHJcbiAgZ2V0IGR1ZURhdGUoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5fZHVlRGF0ZTtcclxuICB9XHJcbiAgZ2V0IHByaW9yaXR5KCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX3ByaW9yaXR5O1xyXG4gIH1cclxuICBnZXQgaWQoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5faWQ7XHJcbiAgfVxyXG4gIHNldCB0aXRsZSh0aXRsZSkge1xyXG4gICAgXHJcbiAgICB0aGlzLl90aXRsZSA9IHRpdGxlO1xyXG4gIH1cclxuICBzZXQgZGVzY3JpcHRpb24oZGVzY3JpcHRpb24pIHtcclxuICAgIHRoaXMuX2Rlc2NyaXB0aW9uID0gZGVzY3JpcHRpb247XHJcbiAgfVxyXG4gIHNldCBkdWVEYXRlKGR1ZURhdGUpIHtcclxuICAgIHRoaXMuX2R1ZURhdGUgPSBkdWVEYXRlO1xyXG4gIH1cclxuICBzZXQgcHJpb3JpdHkocHJpb3JpdHkpIHtcclxuICAgIHRoaXMuX3ByaW9yaXR5ID0gcHJpb3JpdHk7XHJcbiAgfVxyXG4gIHNldCBpZChpZCkge1xyXG4gICAgdGhpcy5faWQgPSBpZDtcclxuICB9XHJcbn1cclxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgUHJvamVjdCB7XHJcbiAgdG9kb3MgPSBbXTtcclxuICBjb25zdHJ1Y3Rvcih0aXRsZSwgaWQsIGRpdikge1xyXG4gICAgdGhpcy5fdGl0bGUgPSB0aXRsZTtcclxuICAgIHRoaXMuX2lkID0gaWQ7XHJcbiAgICB0aGlzLl9kaXYgPSBkaXY7XHJcbiAgfVxyXG4gIGdldCB0aXRsZSgpIHtcclxuICAgIHJldHVybiB0aGlzLl90aXRsZTtcclxuICB9XHJcbiAgc2V0IHRpdGxlKHRpdGxlKSB7XHJcbiAgICB0aGlzLl90aXRsZSA9IHRpdGxlO1xyXG4gIH1cclxuICBnZXQgaWQoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5faWQ7XHJcbiAgfVxyXG4gIGdldCBkaXYoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5fZGl2O1xyXG4gIH1cclxuICBzZXQgZGl2KGRpdikge1xyXG4gICAgdGhpcy5fZGl2ID0gZGl2O1xyXG4gIH1cclxuICBcclxuICBhZGRUb2RvKHRvZG8pIHtcclxuICAgIHRoaXMudG9kb3MucHVzaCh0b2RvKTtcclxuICB9XHJcbiAgZ2V0QWxsKCkge1xyXG4gICAgcmV0dXJuIHRoaXMudG9kb3M7XHJcbiAgfVxyXG59XHJcbiIsImNvbnN0IHJlbW92ZUVsZW1lbnQ9KG9iamVjdCwgaWQpPT4ge1xyXG4gICAgbGV0IGFycmF5ID0gb2JqZWN0LmdldEFsbCgpO1xyXG4gICAgZm9yIChsZXQgaSBpbiBhcnJheSkge1xyXG4gICAgICBpZiAoYXJyYXlbaV0uaWQgPT0gaWQpIHtcclxuICAgICAgICBhcnJheS5zcGxpY2UoaSwxKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuICBleHBvcnQgZGVmYXVsdCByZW1vdmVFbGVtZW50OyIsImltcG9ydCBkcmF3RXhpc3RpbmdUb2RvcyBmcm9tIFwiLi9kcmF3RXhpc3RpbmdUb2Rvc1wiO1xyXG5pbXBvcnQgcmVtb3ZlRWxlbWVudCBmcm9tIFwiLi9yZW1vdmVFbGVtZW50XCI7XHJcblxyXG5jb25zdCBkcmF3VG9kbyA9ICh0b2RvLCBkaXNwbGF5UGFuZWwsIHByb2plY3QsIHBtKSA9PiB7XHJcbiAgbGV0IHRvZG9EaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gIHRvZG9EaXYuY2xhc3NMaXN0LmFkZChcInRvZG9cIik7XHJcbiAgdG9kb0Rpdi5pZCA9IFwidG9kby1cIiArIHRvZG8uaWQ7XHJcbiAgdG9kb0Rpdi5zZXRBdHRyaWJ1dGUoXCJkcmFnZ2FibGVcIiwgXCJ0cnVlXCIpO1xyXG5cclxuICBsZXQgdG9kb0NoZWNrYm94ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xyXG4gIHRvZG9DaGVja2JveC5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsIFwiY2hlY2tib3hcIik7XHJcbiAgdG9kb0NoZWNrYm94LmNsYXNzTGlzdC5hZGQoXCJ0b2RvLWNoZWNrYm94XCIpO1xyXG4gIGxldCB0b2RvVGl0bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicFwiKTtcclxuICB0b2RvVGl0bGUuY2xhc3NMaXN0LmFkZChcInRpdGxlXCIpO1xyXG4gIHRvZG9UaXRsZS50ZXh0Q29udGVudCA9IHRvZG8udGl0bGU7XHJcblxyXG4gIGxldCB0b2RvRHVlRGF0ZUg0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImg0XCIpO1xyXG4gIHRvZG9EdWVEYXRlSDQuY2xhc3NMaXN0LmFkZChcImR1ZS1kYXRlXCIpO1xyXG4gIHRvZG9EdWVEYXRlSDQudGV4dENvbnRlbnQgPSB0b2RvLmR1ZURhdGU7XHJcblxyXG4gIGxldCBuZXdJbnB1dERhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XHJcbiAgbmV3SW5wdXREYXRlLnNldEF0dHJpYnV0ZShcInR5cGVcIiwgXCJkYXRlXCIpO1xyXG4gIG5ld0lucHV0RGF0ZS5jbGFzc0xpc3QuYWRkKFwidG9kby1uZXctZGF0ZVwiKTtcclxuICBuZXdJbnB1dERhdGUudmFsdWUgPSB0b2RvLmR1ZURhdGU7XHJcblxyXG4gIGxldCByZW1vdmVCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xyXG4gIHJlbW92ZUJ1dHRvbi5jbGFzc0xpc3QuYWRkKFwicmVtb3ZlLXRvZG9cIik7XHJcbiAgcmVtb3ZlQnV0dG9uLnRleHRDb250ZW50ID0gXCJSZW1vdmVcIjtcclxuICB0b2RvRGl2LmFwcGVuZENoaWxkKHRvZG9DaGVja2JveCk7XHJcbiAgdG9kb0Rpdi5hcHBlbmRDaGlsZCh0b2RvVGl0bGUpO1xyXG4gIHRvZG9EaXYuYXBwZW5kQ2hpbGQodG9kb0R1ZURhdGVINCk7XHJcbiAgdG9kb0Rpdi5hcHBlbmRDaGlsZChyZW1vdmVCdXR0b24pO1xyXG4gIGRpc3BsYXlQYW5lbC5hcHBlbmRDaGlsZCh0b2RvRGl2KTtcclxuXHJcbiAgXHJcblxyXG4gIGxldCBuZXdJbnB1dFRleHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XHJcbiAgbmV3SW5wdXRUZXh0LmNsYXNzTGlzdC5hZGQoXCJ0b2RvLW5ldy10aXRsZVwiKTtcclxuICBuZXdJbnB1dFRleHQudmFsdWUgPSB0b2RvLnRpdGxlO1xyXG5cclxuICByZW1vdmVCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICAgIHJlbW92ZUVsZW1lbnQocHJvamVjdCwgdG9kby5pZCk7XHJcbiAgICB0b2RvRGl2LnJlbW92ZSgpO1xyXG4gICAgY29uc29sZS5sb2codG9kby5pZCk7XHJcbiAgICBjb25zb2xlLmxvZyhwbS5nZXRBbGwoKSk7XHJcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcInBhY2thZ2VNYW5hZ2VyXCIsIEpTT04uc3RyaW5naWZ5KHBtKSk7XHJcbiAgfSk7XHJcblxyXG4gIHRvZG9UaXRsZS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgdG9kb1RpdGxlLmFwcGVuZENoaWxkKG5ld0lucHV0VGV4dCk7XHJcbiAgICBuZXdJbnB1dFRleHQuZm9jdXMoKTtcclxuICB9KTtcclxuICBuZXdJbnB1dFRleHQub25ibHVyID0gKCkgPT4ge1xyXG4gICAgdG9kby50aXRsZSA9IG5ld0lucHV0VGV4dC52YWx1ZTtcclxuICAgIHRvZG9UaXRsZS50ZXh0Q29udGVudCA9IHRvZG8udGl0bGU7XHJcbiAgICBuZXdJbnB1dFRleHQucmVtb3ZlKCk7XHJcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcInBhY2thZ2VNYW5hZ2VyXCIsIEpTT04uc3RyaW5naWZ5KHBtKSk7XHJcbiAgfTtcclxuICBuZXdJbnB1dFRleHQuYWRkRXZlbnRMaXN0ZW5lcihcImtleXVwXCIsICh7IGtleSB9KSA9PiB7XHJcbiAgICBpZiAoa2V5ID09PSBcIkVudGVyXCIpIHtcclxuICAgICAgbmV3SW5wdXRUZXh0LmJsdXIoKTtcclxuICAgIH1cclxuICB9KTtcclxuXHJcbiAgdG9kb0Rpdi5vbmRyYWdzdGFydCA9IChldmVudCkgPT4ge1xyXG4gICAgY29uc3Qgb2JqID0geyB0b2RvT2JqOiB0b2RvLCBwcm9qZWN0T2JqOiBwcm9qZWN0IH07XHJcbiAgICBldmVudC5kYXRhVHJhbnNmZXIuc2V0RGF0YShcInRleHRcIiwgSlNPTi5zdHJpbmdpZnkob2JqKSk7XHJcbiAgfTtcclxuXHJcbiAgdG9kb0Rpdi5vbmRyYWdlbmQgPSAoZXZlbnQpID0+IHtcclxuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICBkcmF3RXhpc3RpbmdUb2RvcyhwbSwgcHJvamVjdCwgZGlzcGxheVBhbmVsKTtcclxuICAgIFxyXG4gIH07XHJcbiAgdG9kb0R1ZURhdGVINC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgdG9kb0R1ZURhdGVINC5hcHBlbmRDaGlsZChuZXdJbnB1dERhdGUpO1xyXG4gICAgbmV3SW5wdXREYXRlLmZvY3VzKCk7XHJcbiAgfSk7XHJcbiAgbmV3SW5wdXREYXRlLm9uYmx1ciA9ICgpID0+IHtcclxuICAgIGlmIChuZXdJbnB1dERhdGUudmFsdWUgIT09IFwiXCIpIHtcclxuICAgICAgdG9kby5kdWVEYXRlID0gbmV3SW5wdXREYXRlLnZhbHVlO1xyXG4gICAgICB0b2RvRHVlRGF0ZUg0LnZhbHVlID0gdG9kby5kdWVEYXRlO1xyXG4gICAgICB0b2RvRHVlRGF0ZUg0LnRleHRDb250ZW50ID0gdG9kby5kdWVEYXRlO1xyXG4gICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcInBhY2thZ2VNYW5hZ2VyXCIsIEpTT04uc3RyaW5naWZ5KHBtKSk7XHJcbiAgICB9XHJcbiAgICBuZXdJbnB1dERhdGUucmVtb3ZlKCk7XHJcbiAgfTtcclxuICBuZXdJbnB1dERhdGUuYWRkRXZlbnRMaXN0ZW5lcihcImtleXVwXCIsICh7IGtleSB9KSA9PiB7XHJcbiAgICBpZiAoa2V5ID09PSBcIkVudGVyXCIpIG5ld0lucHV0RGF0ZS5ibHVyKCk7XHJcbiAgfSk7XHJcbiAgcmV0dXJuIHRvZG9EaXY7XHJcbn07XHJcbmV4cG9ydCBkZWZhdWx0IGRyYXdUb2RvO1xyXG4iLCJpbXBvcnQgZHJhd1RvZG8gZnJvbSBcIi4vZHJhd1RvZG9cIjtcclxuXHJcbmNvbnN0IGRyYXdBbGxUb2Rvcz0ocG0sZGlzcGxheVBhbmVsKT0+e1xyXG4gICAgbGV0IGFsbFByb2plY3RzID0gcG0uZ2V0QWxsKCk7XHJcbiAgICBhbGxQcm9qZWN0cy5mb3JFYWNoKChwcm9qZWN0KT0+e1xyXG4gICAgICAgIGxldCB0ZW1wVG9kb0Fycj1wcm9qZWN0LmdldEFsbCgpO1xyXG4gICAgICAgIHRlbXBUb2RvQXJyLmZvckVhY2goKHRvZG8pPT57XHJcbiAgICAgICAgICAgIGRyYXdUb2RvKHRvZG8sZGlzcGxheVBhbmVsLHByb2plY3QscG0pO1xyXG4gICAgICAgIH0pXHJcbiAgICB9KVxyXG59XHJcbmV4cG9ydCBkZWZhdWx0IGRyYXdBbGxUb2RvczsiLCJpbXBvcnQgZHJhd0FsbFRvZG9zIGZyb20gXCIuL2RyYXdBbGxUb2Rvc1wiO1xyXG5pbXBvcnQgZHJhd1RvZG8gZnJvbSBcIi4vZHJhd1RvZG9cIjtcclxuXHJcbmNvbnN0IGRyYXdFeGlzdGluZ1RvZG9zID0gKHBtLCBwcm9qZWN0LCBkaXNwbGF5UGFuZWwpID0+IHtcclxuICBkaXNwbGF5UGFuZWwuaW5uZXJIVE1MID0gXCJcIjtcclxuICBpZihwcm9qZWN0LnRpdGxlPT09XCJBbGxcIil7XHJcbiAgICBkcmF3QWxsVG9kb3MocG0sZGlzcGxheVBhbmVsKTtcclxuICB9XHJcbiAgZWxzZXtcclxuICAgIGNvbnN0IHRvZG9BcnJheSA9IHByb2plY3QuZ2V0QWxsKCk7XHJcbiAgICB0b2RvQXJyYXkuZm9yRWFjaCgodG9kbykgPT4ge1xyXG4gICAgICBjb25zdCB0ZW1wVG9kb0RpdiA9IGRyYXdUb2RvKHRvZG8sIGRpc3BsYXlQYW5lbCwgcHJvamVjdCwgcG0pO1xyXG4gICAgfSk7XHJcblxyXG4gIH1cclxufTtcclxuZXhwb3J0IGRlZmF1bHQgZHJhd0V4aXN0aW5nVG9kb3M7XHJcbiIsImltcG9ydCBjcmVhdGVOZXdUb2RvRm9ybSBmcm9tIFwiLi9uZXdUb2RvRm9ybVwiO1xyXG5cclxuY29uc3QgY3JlYXRlTmV3VG9kb0J1dHRvbiA9IChwbSxwcm9qZWN0LCBkaXNwbGF5UGFuZWwpID0+IHtcclxuICBjb25zdCBtcCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubWFpbi1wYW5lbFwiKTtcclxuICBsZXQgY3JlYXRlVG9kb0Zvcm1CdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xyXG4gIGNyZWF0ZVRvZG9Gb3JtQnV0dG9uLmNsYXNzTGlzdC5hZGQoXCJjcmVhdGUtdG9kby1mb3JtLWJ1dHRvblwiKTtcclxuICBjcmVhdGVUb2RvRm9ybUJ1dHRvbi5pZCA9IFwidG9kby1jcmVhdGUtbmV3XCI7XHJcbiAgY3JlYXRlVG9kb0Zvcm1CdXR0b24udGV4dENvbnRlbnQgPSBcIkNyZWF0ZSBuZXcgVG9kb1wiO1xyXG4gIGNyZWF0ZVRvZG9Gb3JtQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgICBjcmVhdGVOZXdUb2RvRm9ybShwbSxwcm9qZWN0LCBkaXNwbGF5UGFuZWwpO1xyXG4gIH0pO1xyXG4gIGxldCBidXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInRvZG8tY3JlYXRlLW5ld1wiKTtcclxuICBpZiAoZG9jdW1lbnQuYm9keS5jb250YWlucyhidXR0b24pKSB7XHJcbiAgICBidXR0b24ucmVtb3ZlKCk7XHJcbiAgfVxyXG4gIG1wLmFwcGVuZENoaWxkKGNyZWF0ZVRvZG9Gb3JtQnV0dG9uKTtcclxuICByZXR1cm4gY3JlYXRlVG9kb0Zvcm1CdXR0b247XHJcbn07XHJcbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZU5ld1RvZG9CdXR0b247XHJcbiIsImltcG9ydCBkcmF3RXhpc3RpbmdUb2RvcyBmcm9tIFwiLi9kcmF3RXhpc3RpbmdUb2Rvc1wiO1xyXG5cclxuaW1wb3J0IFRvZG8gZnJvbSBcIi4vVG9kb1wiO1xyXG5jb25zdCBjcmVhdGVOZXdUb2RvRm9ybSA9IChwbSxwcm9qZWN0LCBkaXNwbGF5UGFuZWwpID0+IHtcclxuICBsZXQgdG90YWxUb2RvcyA9ICgpPT4ge1xyXG4gICAgbGV0IHN1bT0wO1xyXG4gICAgcG0uZ2V0QWxsKCkuZm9yRWFjaCgocCk9PntcclxuICAgICAgcC5nZXRBbGwoKS5mb3JFYWNoKCh0KT0+IHN1bSs9MSk7XHJcbiAgICB9KVxyXG4gICAgcmV0dXJuIHN1bTtcclxuICB9XHJcbiAgbGV0IG5ld1RvZG9Gb3JtRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICBuZXdUb2RvRm9ybURpdi5jbGFzc0xpc3QuYWRkKFwiY3JlYXRlLXRvZG8tZm9ybVwiKTtcclxuICBsZXQgbmV3VG9kb0Zvcm0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZm9ybVwiKTtcclxuICBsZXQgdGl0bGVMYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsYWJlbFwiKTtcclxuICB0aXRsZUxhYmVsLnNldEF0dHJpYnV0ZShcImZvclwiLCBcImZvcm0tdG9kby10aXRsZVwiKTtcclxuICB0aXRsZUxhYmVsLnRleHRDb250ZW50ID0gXCJUaXRsZVwiO1xyXG4gIGxldCB0aXRsZUlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xyXG4gIHRpdGxlSW5wdXQuc2V0QXR0cmlidXRlKFwidHlwZVwiLCBcInRleHRcIik7XHJcbiAgdGl0bGVJbnB1dC5pZCA9IFwiZm9ybS1Ub2RvLXRpdGxlXCI7XHJcbiAgbGV0IGR1ZURhdGVMYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsYWJlbFwiKTtcclxuICBkdWVEYXRlTGFiZWwuc2V0QXR0cmlidXRlKFwiZm9yXCIsIFwiZm9ybS10b2RvLWR1ZURhdGVcIik7XHJcbiAgZHVlRGF0ZUxhYmVsLnRleHRDb250ZW50ID0gXCJEdWUgRGF0ZVwiO1xyXG4gIGxldCBkdWVEYXRlSW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XHJcbiAgZHVlRGF0ZUlucHV0LnNldEF0dHJpYnV0ZShcInR5cGVcIiwgXCJkYXRlXCIpO1xyXG4gIGR1ZURhdGVJbnB1dC5pZCA9IFwiZm9ybS10b2RvLWR1ZURhdGVcIjtcclxuICBsZXQgcHJpb3JpdHlMYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsYWJlbFwiKTtcclxuICBwcmlvcml0eUxhYmVsLnNldEF0dHJpYnV0ZShcImZvclwiLCBcImZvcm0tdG9kby1wcmlvcml0eVwiKTtcclxuICBwcmlvcml0eUxhYmVsLnRleHRDb250ZW50ID0gXCJQcmlvcml0eVwiO1xyXG4gIGxldCBwcmlvcml0eUlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xyXG4gIHByaW9yaXR5SW5wdXQuc2V0QXR0cmlidXRlKFwidHlwZVwiLCBcInRleHRcIik7XHJcbiAgcHJpb3JpdHlJbnB1dC5pZCA9IFwiZm9ybS10b2RvLXByaW9yaXR5XCI7XHJcbiAgbGV0IGNyZWF0ZUJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XHJcbiAgY3JlYXRlQnV0dG9uLnRleHRDb250ZW50ID0gXCJDcmVhdGVcIjtcclxuICBjcmVhdGVCdXR0b24uY2xhc3NMaXN0LmFkZChcImZvcm0tYnV0dG9uLXRvZG9cIik7XHJcbiAgbmV3VG9kb0Zvcm0uYXBwZW5kQ2hpbGQodGl0bGVMYWJlbCk7XHJcbiAgbmV3VG9kb0Zvcm0uYXBwZW5kQ2hpbGQodGl0bGVJbnB1dCk7XHJcbiAgbmV3VG9kb0Zvcm0uYXBwZW5kQ2hpbGQoZHVlRGF0ZUxhYmVsKTtcclxuICBuZXdUb2RvRm9ybS5hcHBlbmRDaGlsZChkdWVEYXRlSW5wdXQpO1xyXG4gIG5ld1RvZG9Gb3JtRGl2LmFwcGVuZENoaWxkKG5ld1RvZG9Gb3JtKTtcclxuICBuZXdUb2RvRm9ybURpdi5hcHBlbmRDaGlsZChjcmVhdGVCdXR0b24pO1xyXG4gIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQobmV3VG9kb0Zvcm1EaXYpO1xyXG4gIGNyZWF0ZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgbGV0IHRlbXBUb2RvTmFtZSA9IG5ldyBUb2RvKFxyXG4gICAgICB0aXRsZUlucHV0LnZhbHVlLFxyXG4gICAgICBcIiBcIixcclxuICAgICAgZHVlRGF0ZUlucHV0LnZhbHVlLFxyXG4gICAgICBwcmlvcml0eUlucHV0LnZhbHVlLFxyXG4gICAgICB0b3RhbFRvZG9zKClcclxuICAgICk7XHJcbiAgICBpZih0ZW1wVG9kb05hbWUuX2R1ZURhdGU9PT0nJyl7XHJcbiAgICAgIHRlbXBUb2RvTmFtZS5fZHVlRGF0ZT0nU2V0IERhdGUnO1xyXG5cclxuICAgIH1cclxuICAgIHByb2plY3QuYWRkVG9kbyh0ZW1wVG9kb05hbWUpO1xyXG4gICAgbmV3VG9kb0Zvcm1EaXYucmVtb3ZlKCk7XHJcbiAgICBkcmF3RXhpc3RpbmdUb2RvcyhwbSxwcm9qZWN0LCBkaXNwbGF5UGFuZWwpO1xyXG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJwYWNrYWdlTWFuYWdlclwiLCBKU09OLnN0cmluZ2lmeShwbSkpO1xyXG5cclxuICB9KTtcclxufTtcclxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlTmV3VG9kb0Zvcm07XHJcbiIsImltcG9ydCBkcmF3UHJvamVjdHNUb0xpc3QgZnJvbSBcIi4vZHJhd1Byb2plY3RzVG9MaXN0XCI7XHJcbmNvbnN0IGxvYWRQcm9qZWN0cyA9IChcclxuICBwcm9qZWN0TWFuYWdlck9iamVjdCxcclxuICBwcm9qZWN0TWFuYWdlckRpdixcclxuICBkaXNwbGF5UGFuZWxcclxuKSA9PiB7XHJcbiAgcHJvamVjdE1hbmFnZXJEaXYuaW5uZXJIVE1MID0gXCJcIjtcclxuICBjb25zb2xlLmxvZyhcImhlbGxvIGZyb20gbG9hZFByb2plY3RzXCIscHJvamVjdE1hbmFnZXJPYmplY3QucHJvamVjdHMpXHJcbiAgY29uc3QgcHJvakFycmF5ID0gcHJvamVjdE1hbmFnZXJPYmplY3QucHJvamVjdHM7XHJcbiAgY29uc29sZS5sb2coJ2NvcGllZCBhcnJheScscHJvakFycmF5KTtcclxuICBwcm9qQXJyYXkuZm9yRWFjaCgocHJvamVjdCkgPT4ge1xyXG4gICAgY29uc3QgdGVtcERpdiA9IGRyYXdQcm9qZWN0c1RvTGlzdChcclxuICAgICAgcHJvamVjdE1hbmFnZXJPYmplY3QsXHJcbiAgICAgIHByb2plY3QsXHJcbiAgICAgIHByb2plY3QudGl0bGUsXHJcbiAgICAgIHByb2plY3QuaWQsXHJcbiAgICAgIHByb2plY3RNYW5hZ2VyRGl2LFxyXG4gICAgICBkaXNwbGF5UGFuZWxcclxuICAgICk7XHJcbiAgICBwcm9qZWN0LmRpdiA9IHRlbXBEaXY7XHJcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgncGFja2FnZU1hbmFnZXInLEpTT04uc3RyaW5naWZ5KHByb2plY3RNYW5hZ2VyT2JqZWN0KSk7XHJcbiAgfSk7XHJcbn07XHJcbmV4cG9ydCBkZWZhdWx0IGxvYWRQcm9qZWN0cztcclxuIiwiaW1wb3J0IGNyZWF0ZU5ld1RvZG9CdXR0b24gZnJvbSBcIi4vbmV3VG9kb0J1dHRvblwiO1xyXG5pbXBvcnQgZHJhd0V4aXN0aW5nVG9kb3MgZnJvbSBcIi4vZHJhd0V4aXN0aW5nVG9kb3NcIjtcclxuaW1wb3J0IHJlbW92ZUVsZW1lbnQgZnJvbSBcIi4vcmVtb3ZlRWxlbWVudFwiO1xyXG5pbXBvcnQgVG9kbyBmcm9tIFwiLi9Ub2RvXCI7XHJcbmltcG9ydCBkcmF3QWxsVG9kb3MgZnJvbSBcIi4vZHJhd0FsbFRvZG9zXCI7XHJcblxyXG5jb25zdCBkcmF3UHJvamVjdHNUb0xpc3QgPSAoXHJcbiAgcG0sXHJcbiAgcHJvamVjdCxcclxuICB0aXRsZSxcclxuICBpZCxcclxuICBwcm9qTWFuRGl2LFxyXG4gIGRpc3BsYXlQYW5lbFxyXG4pID0+IHtcclxuICBpZihwcm9qZWN0LnRpdGxlIT09XCJBbGxcIilcclxuICB7XHJcblxyXG4gICAgbGV0IHByb2plY3REaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgbGV0IGVkaXRCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xyXG4gICAgZWRpdEJ1dHRvbi5jbGFzc0xpc3QuYWRkKFwiZWRpdC1wcm9qZWN0XCIpO1xyXG4gICAgZWRpdEJ1dHRvbi50ZXh0Q29udGVudCA9IFwicmVuYW1lXCI7XHJcbiAgICBwcm9qZWN0RGl2LmNsYXNzTGlzdC5hZGQoXCJwcm9qZWN0XCIpO1xyXG4gICAgcHJvamVjdERpdi5pZCA9IFwicHJvamVjdC1cIiArIGlkO1xyXG4gICAgbGV0IHByb2plY3RUaXRsZUgxID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImgxXCIpO1xyXG4gICAgcHJvamVjdFRpdGxlSDEuY2xhc3NMaXN0LmFkZChcInByb2plY3QtbmFtZVwiKTtcclxuICAgIHByb2plY3RUaXRsZUgxLnRleHRDb250ZW50ID0gcHJvamVjdC50aXRsZTtcclxuICAgIGxldCBuZXdOYW1lSW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XHJcbiAgICBuZXdOYW1lSW5wdXQuaWQgPSBcIm5ldy1uYW1lLWlucHV0XCI7XHJcbiAgICBuZXdOYW1lSW5wdXQudmFsdWUgPSBwcm9qZWN0LnRpdGxlO1xyXG4gICAgbGV0IHJlbW92ZUJ1dHRvbj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcclxuICAgIHJlbW92ZUJ1dHRvbi5jbGFzc0xpc3QuYWRkKCcucHJvamVjdC1yZW1vdmUtYnV0dG9uJyk7XHJcbiAgICByZW1vdmVCdXR0b24udGV4dENvbnRlbnQ9J1gnO1xyXG4gIFxyXG4gICBcclxuICAgIHByb2plY3REaXYuYXBwZW5kQ2hpbGQocHJvamVjdFRpdGxlSDEpO1xyXG4gICAgcHJvamVjdERpdi5hcHBlbmRDaGlsZChlZGl0QnV0dG9uKTtcclxuICAgIHByb2plY3REaXYuYXBwZW5kQ2hpbGQocmVtb3ZlQnV0dG9uKTtcclxuICAgIFxyXG4gICAgcHJvak1hbkRpdi5hcHBlbmRDaGlsZChwcm9qZWN0RGl2KTtcclxuICBcclxuICAgIFxyXG4gICAgXHJcbiAgICAgIHByb2plY3REaXYuYWRkRXZlbnRMaXN0ZW5lcignZHJvcCcsKGV2ZW50KT0+bW92ZVRvZG8oZXZlbnQscHJvamVjdCxwbSkpO1xyXG4gICAgICByZW1vdmVCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICAgICByZW1vdmVFbGVtZW50KHBtLCBwcm9qZWN0LmlkKTtcclxuICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcInBhY2thZ2VNYW5hZ2VyXCIsIEpTT04uc3RyaW5naWZ5KHBtKSk7XHJcbiAgXHJcbiAgICAgY29uc29sZS5sb2coXCJhZnRlciByZW1vdmVcIiwgcG0pO1xyXG4gICAgIHByb2plY3REaXYucmVtb3ZlKCk7XHJcbiAgIH0pO1xyXG4gIFxyXG4gICBlZGl0QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgICAgcHJvamVjdFRpdGxlSDEucmVtb3ZlKCk7XHJcbiAgICAgcHJvamVjdERpdi5hcHBlbmRDaGlsZChuZXdOYW1lSW5wdXQpO1xyXG4gICB9KTtcclxuICBcclxuICAgbmV3TmFtZUlucHV0Lm9uYmx1ciA9ICgpID0+IHtcclxuICAgICBwcm9qZWN0VGl0bGVIMS50ZXh0Q29udGVudCA9IG5ld05hbWVJbnB1dC52YWx1ZTtcclxuICAgICBwcm9qZWN0LnRpdGxlID0gbmV3TmFtZUlucHV0LnZhbHVlO1xyXG4gICAgIG5ld05hbWVJbnB1dC5yZW1vdmUoKTtcclxuICAgICBwcm9qZWN0RGl2Lmluc2VydEJlZm9yZShwcm9qZWN0VGl0bGVIMSwgZWRpdEJ1dHRvbik7XHJcbiAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJwYWNrYWdlTWFuYWdlclwiLCBKU09OLnN0cmluZ2lmeShwbSkpO1xyXG4gICB9O1xyXG4gICBuZXdOYW1lSW5wdXQuYWRkRXZlbnRMaXN0ZW5lcihcImtleXVwXCIsICh7IGtleSB9KSA9PiB7XHJcbiAgICAgaWYgKGtleSA9PT0gXCJFbnRlclwiKSBuZXdOYW1lSW5wdXQuYmx1cigpO1xyXG4gICB9KTtcclxuICBcclxuICAgcHJvamVjdFRpdGxlSDEuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uICgpIHtcclxuICAgICBkaXNwbGF5UGFuZWwuaW5uZXJIVE1MID0gXCJcIjtcclxuICAgICAxO1xyXG4gICAgIGRyYXdFeGlzdGluZ1RvZG9zKHBtLCBwcm9qZWN0LCBkaXNwbGF5UGFuZWwpO1xyXG4gICAgIGxldCBuZXdGb3JtQnV0dG9uID0gY3JlYXRlTmV3VG9kb0J1dHRvbihwbSwgcHJvamVjdCwgZGlzcGxheVBhbmVsKTtcclxuICAgfSk7XHJcbiAgIHByb2plY3REaXYuYWRkRXZlbnRMaXN0ZW5lcihcImRyYWdvdmVyXCIsIChldmVudCkgPT4ge1xyXG4gICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgIH0pO1xyXG4gIH1cclxuXHJcbmVsc2Vcclxue1xyXG4gIGxldCBwcm9qZWN0RGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICBwcm9qZWN0RGl2LmNsYXNzTGlzdC5hZGQoXCJwcm9qZWN0XCIpO1xyXG4gIHByb2plY3REaXYuaWQgPSAnYWxsLXByb2plY3RzLWNvbnRhaW5lcic7XHJcbiAgbGV0IHByb2plY3RUaXRsZUgxID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImgxXCIpO1xyXG4gIHByb2plY3RUaXRsZUgxLmNsYXNzTGlzdC5hZGQoXCJwcm9qZWN0LW5hbWVcIik7XHJcbiAgcHJvamVjdFRpdGxlSDEudGV4dENvbnRlbnQgPSBwcm9qZWN0LnRpdGxlO1xyXG4gIHByb2plY3REaXYuYXBwZW5kQ2hpbGQocHJvamVjdFRpdGxlSDEpO1xyXG4gIHByb2pNYW5EaXYuYXBwZW5kQ2hpbGQocHJvamVjdERpdik7XHJcbiAgcHJvamVjdFRpdGxlSDEuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uICgpIHtcclxuICAgIGRpc3BsYXlQYW5lbC5pbm5lckhUTUwgPSBcIlwiO1xyXG4gICAgZHJhd0FsbFRvZG9zKHBtLGRpc3BsYXlQYW5lbCk7XHJcbiAgICBsZXQgbmV3Rm9ybUJ1dHRvbiA9IGNyZWF0ZU5ld1RvZG9CdXR0b24ocG0sIHByb2plY3QsIGRpc3BsYXlQYW5lbCk7XHJcbiAgfSk7XHJcbiAgXHJcbn07XHJcblxyXG5jb25zdCBtb3ZlVG9kbz0oZXZlbnQscHJvamVjdCxwbSk9PntcclxuICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgY29uc3QgdG9kb1RvQWRkID0gSlNPTi5wYXJzZShldmVudC5kYXRhVHJhbnNmZXIuZ2V0RGF0YShcInRleHRcIikpLnRvZG9PYmo7XHJcbiAgIGNvbnN0IHNvdXJjZVByb2plY3QgPSBKU09OLnBhcnNlKFxyXG4gICAgIGV2ZW50LmRhdGFUcmFuc2Zlci5nZXREYXRhKFwidGV4dFwiKVxyXG4gICApLnByb2plY3RPYmo7XHJcbiAgIGNvbnNvbGUubG9nKFwiQWRkaW5nXCIsIHRvZG9Ub0FkZCwgXCJ0b1wiLCBwcm9qZWN0LnRpdGxlLCBcImZyb21cIiwgc291cmNlUHJvamVjdCk7XHJcbiAgIGNvbnN0IHRvZG8gPSBuZXcgVG9kbyhcclxuICAgICB0b2RvVG9BZGQuX3RpdGxlLFxyXG4gICAgIHRvZG9Ub0FkZC5fZGVzY3JpcHRpb24sXHJcbiAgICAgdG9kb1RvQWRkLl9kdWVEYXRlLFxyXG4gICAgIFwiIFwiLFxyXG4gICAgIHRvZG9Ub0FkZC5faWRcclxuICAgKTtcclxuICAgcHJvamVjdC5hZGRUb2RvKHRvZG8pO1xyXG4gICBjb25zb2xlLmxvZyh0b2RvVG9BZGQuX2lkLCBcInVucGFyc2VkIGlkXCIpO1xyXG4gICBjb25zb2xlLmxvZyhcInJlZmVyZW5jZWQgdG9kb1wiLCB0b2RvKTtcclxuICAgbGV0IGFyciA9IHBtLmdldEFsbCgpO1xyXG4gICBmb3IgKGxldCBwIGluIGFycikge1xyXG4gICAgIGlmIChhcnJbcF0uaWQgPT0gc291cmNlUHJvamVjdC5faWQpIHtcclxuICAgICAgIGxldCBwcm9qUmVmID0gYXJyW3BdO1xyXG4gICAgICAgcmVtb3ZlRWxlbWVudChwcm9qUmVmLCB0b2RvLmlkKTtcclxuICAgICAgIGNvbnNvbGUubG9nKFwicmVtb3ZlRWxlbWVudCBhcmdzXCIsIHByb2pSZWYsIHRvZG8uaWQpO1xyXG4gICAgIH1cclxuICAgfVxyXG4gICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcInBhY2thZ2VNYW5hZ2VyXCIsIEpTT04uc3RyaW5naWZ5KHBtKSk7XHJcblxyXG59XHJcbn1cclxuZXhwb3J0IGRlZmF1bHQgZHJhd1Byb2plY3RzVG9MaXN0O1xyXG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLnNjc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5zY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IFByb2plY3RNYW5hZ2VyIGZyb20gXCIuL3NjcmlwdHMvUHJvamVjdE1hbmFnZXJcIjtcclxuaW1wb3J0IFRvZG8gZnJvbSBcIi4vc2NyaXB0cy9Ub2RvXCI7XHJcbmltcG9ydCBQcm9qZWN0IGZyb20gXCIuL3NjcmlwdHMvUHJvamVjdFwiO1xyXG5pbXBvcnQge1xyXG4gIGRyYXdQcm9qZWN0TWFuYWdlcixcclxuICBkcmF3UHJvamVjdERpc3BsYXlQYW5lbCxcclxufSBmcm9tIFwiLi9zY3JpcHRzL2xvYWRNYWluXCI7XHJcbmltcG9ydCBkcmF3UHJvamVjdHNPbkxvYWQgZnJvbSBcIi4vc2NyaXB0cy9sb2FkUHJvamVjdHNcIjtcclxuaW1wb3J0IFwiLi9zdHlsZS5zY3NzXCI7XHJcbmltcG9ydCBsb2FkUHJvamVjdHMgZnJvbSBcIi4vc2NyaXB0cy9sb2FkUHJvamVjdHNcIjtcclxuaW1wb3J0IHN0b3JlT2JqZWN0IGZyb20gXCIuL3NjcmlwdHMvU3RvcmFnZVwiO1xyXG5sZXQgc2F2ZWRQcm9qZWN0cztcclxubGV0IHBtID0gbmV3IFByb2plY3RNYW5hZ2VyKCk7XHJcbmNvbnNvbGUubG9nKHBtLmdldEFsbCgpKTtcclxuaWYobG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJwYWNrYWdlTWFuYWdlclwiKSE9bnVsbCl7XHJcblxyXG4gICAgc2F2ZWRQcm9qZWN0cyA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJwYWNrYWdlTWFuYWdlclwiKSkucHJvamVjdHM7XHJcbiAgICBjb25zb2xlLmxvZyhcInNhdmVkIHByb2pcIixzYXZlZFByb2plY3RzKTtcclxuICAgIHNhdmVkUHJvamVjdHMuZm9yRWFjaCgoaXRlbSxpbmRleCk9PntcclxuICAgICAgICBsZXQgcHJvaj1uZXcgUHJvamVjdChpdGVtLl90aXRsZSxpdGVtLl9pZCxpdGVtLl9kaXYpO1xyXG4gICAgICAgIHBtLmFkZFByb2oocHJvaik7XHJcbiAgICAgICAgbGV0IHRvZG9zPWl0ZW0udG9kb3M7XHJcbiAgICAgICAgdG9kb3MuZm9yRWFjaCgodG9kbyk9PntcclxuICAgICAgICAgICAgY29uc29sZS5sb2codG9kbyk7XHJcbiAgICAgICAgICAgIGxldCB0ZW1wVG9kbz1uZXcgVG9kbyh0b2RvLl90aXRsZSx0b2RvLl9kZXNjcmlwdGlvbix0b2RvLl9kdWVEYXRlLCcnLHRvZG8uX2lkKTtcclxuICAgICAgICAgICAgcHJvai5hZGRUb2RvKHRlbXBUb2RvKTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIFxyXG4gICAgfSlcclxuICAgIGlmKHBtLmdldEFsbCgpLmxlbmd0aDwxKVxyXG4gICAge1xyXG4gICAgICAgIGxldCBkZWZhdWx0UHJvamVjdD1uZXcgUHJvamVjdCgnQWxsJywwKTtcclxuICAgIHBtLmFkZFByb2ooZGVmYXVsdFByb2plY3QpO1xyXG4gICAgfVxyXG59XHJcbmVsc2V7XHJcbiAgICBsZXQgcHJvaj1uZXcgUHJvamVjdCgnUHJvamVjdCcsMCk7XHJcbiAgICBwbS5hZGRQcm9qKHByb2opO1xyXG59XHJcblxyXG5cclxuXHJcblxyXG5jb25zdCBkaXNwbGF5UGFuZWwgPSBkcmF3UHJvamVjdERpc3BsYXlQYW5lbCgpO1xyXG5jb25zdCBwcm9qZWN0TWFuYWdlckRpdiA9IGRyYXdQcm9qZWN0TWFuYWdlcihwbSwgZGlzcGxheVBhbmVsKTtcclxuXHJcbi8vRGV2ZWxvcG1lbnQgc2V0IHVwIHN0dWZmXHJcblxyXG5cclxubG9hZFByb2plY3RzKHBtLCBwcm9qZWN0TWFuYWdlckRpdiwgZGlzcGxheVBhbmVsKTtcclxubG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJwYWNrYWdlTWFuYWdlclwiLEpTT04uc3RyaW5naWZ5KHBtKSk7XHJcblxyXG5cclxuXHJcbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFByb2plY3RNYW5hZ2VyIHtcclxuICBwcm9qZWN0cyA9IFtdO1xyXG4gIGFkZFByb2oocHJvamVjdCkge1xyXG4gICAgdGhpcy5wcm9qZWN0cy5wdXNoKHByb2plY3QpO1xyXG4gIH1cclxuICBnZXRBbGwoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5wcm9qZWN0cztcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IGNyZWF0ZU5ld1Byb2plY3RGb3JtIGZyb20gXCIuL25ld1Byb2plY3RGb3JtXCI7XHJcblxyXG5jb25zdCBkcmF3UHJvamVjdE1hbmFnZXIgPSAocG0sIGRpc3BsYXlQYW5lbCkgPT4ge1xyXG4gIGxldCBzaWRlUGFuZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gIHNpZGVQYW5lbC5jbGFzc0xpc3QuYWRkKFwic2lkZS1wYW5lbFwiKTtcclxuXHJcbiAgbGV0IHByb2plY3RNYW5hZ2VyRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICBwcm9qZWN0TWFuYWdlckRpdi5jbGFzc0xpc3QuYWRkKFwicHJvamVjdC1tYW5hZ2VyXCIpO1xyXG4gIGxldCBjcmVhdGVGb3JtTmV3UHJvamVjdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XHJcbiAgY3JlYXRlRm9ybU5ld1Byb2plY3QuY2xhc3NMaXN0LmFkZChcIm5ldy1wcm9qZWN0LWJ1dHRvblwiKTtcclxuICBjcmVhdGVGb3JtTmV3UHJvamVjdC50ZXh0Q29udGVudCA9IFwiQ3JlYXRlIEEgTmV3IFByb2plY3RcIjtcclxuICAvLyBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHByb2plY3RNYW5hZ2VyRGl2KTtcclxuICBsZXQgbWFpblBhbmVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5tYWluLXBhbmVsXCIpO1xyXG4gIGNvbnN0IHBhcmVudE5vZGUgPSBkb2N1bWVudC5ib2R5O1xyXG4gIHNpZGVQYW5lbC5hcHBlbmRDaGlsZChwcm9qZWN0TWFuYWdlckRpdik7XHJcbiAgc2lkZVBhbmVsLmFwcGVuZENoaWxkKGNyZWF0ZUZvcm1OZXdQcm9qZWN0KTtcclxuICBwYXJlbnROb2RlLmluc2VydEJlZm9yZShzaWRlUGFuZWwsIG1haW5QYW5lbCk7XHJcbiAgY3JlYXRlRm9ybU5ld1Byb2plY3QuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICAgIGNyZWF0ZU5ld1Byb2plY3RGb3JtKHByb2plY3RNYW5hZ2VyRGl2LCBwbSwgZGlzcGxheVBhbmVsKTsgLy8vREVQRU5EXHJcbiAgICBjb25zb2xlLmxvZyhcImJ1dHRvblwiKTtcclxuICB9KTtcclxuXHJcbiAgcmV0dXJuIHByb2plY3RNYW5hZ2VyRGl2O1xyXG59O1xyXG5cclxuY29uc3QgZHJhd1Byb2plY3REaXNwbGF5UGFuZWwgPSAoKSA9PiB7XHJcbiAgbGV0IG1haW5QYW5lbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgbWFpblBhbmVsLmNsYXNzTGlzdC5hZGQoXCJtYWluLXBhbmVsXCIpO1xyXG4gIGxldCBkaXNwbGF5UGFuZWxEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gIGRpc3BsYXlQYW5lbERpdi5jbGFzc0xpc3QuYWRkKFwicHJvamVjdC1kaXNwbGF5LXBhbmVsXCIpO1xyXG4gIG1haW5QYW5lbC5hcHBlbmRDaGlsZChkaXNwbGF5UGFuZWxEaXYpO1xyXG4gIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQobWFpblBhbmVsKTtcclxuXHJcbiAgcmV0dXJuIGRpc3BsYXlQYW5lbERpdjtcclxufTtcclxuZXhwb3J0IHsgZHJhd1Byb2plY3RNYW5hZ2VyLCBkcmF3UHJvamVjdERpc3BsYXlQYW5lbCB9O1xyXG4iLCJpbXBvcnQgbG9hZFByb2plY3RzIGZyb20gXCIuL2xvYWRQcm9qZWN0c1wiO1xyXG5pbXBvcnQgUHJvamVjdCBmcm9tIFwiLi9Qcm9qZWN0XCI7XHJcbmNvbnN0IGNyZWF0ZU5ld1Byb2plY3RGb3JtID0gKHByb2pNYW5EaXYsIHBtLCBkaXNwbGF5UGFuZWwpID0+IHtcclxuICBsZXQgbmV3UHJvamVjdEZvcm1EaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gIG5ld1Byb2plY3RGb3JtRGl2LmNsYXNzTGlzdC5hZGQoXCJjcmVhdGUtcHJvamVjdC1mb3JtXCIpO1xyXG4gIGxldCBuZXdQcm9qZWN0Rm9ybSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJmb3JtXCIpO1xyXG4gIGxldCBuYW1lTGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGFiZWxcIik7XHJcbiAgbmFtZUxhYmVsLnNldEF0dHJpYnV0ZShcImZvclwiLCBcImZvcm0tcHJvamVjdC1uYW1lXCIpO1xyXG4gIG5hbWVMYWJlbC50ZXh0Q29udGVudCA9IFwiUHJvamVjdCBOYW1lXCI7XHJcbiAgbGV0IG5hbWVJbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcclxuICBuYW1lSW5wdXQuc2V0QXR0cmlidXRlKFwidHlwZVwiLCBcInRleHRcIik7XHJcbiAgbmFtZUlucHV0LmlkID0gXCJmb3JtLXByb2plY3QtbmFtZVwiO1xyXG4gIGxldCBjcmVhdGVCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xyXG4gIGNyZWF0ZUJ1dHRvbi50ZXh0Q29udGVudCA9IFwiQ3JlYXRlXCI7XHJcbiAgY3JlYXRlQnV0dG9uLmNsYXNzTGlzdC5hZGQoXCJmb3JtLWJ1dHRvblwiKTtcclxuICBuZXdQcm9qZWN0Rm9ybS5hcHBlbmRDaGlsZChuYW1lTGFiZWwpO1xyXG4gIG5ld1Byb2plY3RGb3JtLmFwcGVuZENoaWxkKG5hbWVJbnB1dCk7XHJcbiAgbmV3UHJvamVjdEZvcm1EaXYuYXBwZW5kQ2hpbGQobmV3UHJvamVjdEZvcm0pO1xyXG4gIG5ld1Byb2plY3RGb3JtRGl2LmFwcGVuZENoaWxkKGNyZWF0ZUJ1dHRvbik7XHJcbiAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChuZXdQcm9qZWN0Rm9ybURpdik7XHJcbiAgY3JlYXRlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgICBuZXdQcm9qZWN0Rm9ybURpdi5yZW1vdmUoKTtcclxuICAgIGxldCB0ZW1wUHJvak5hbWUgPSBuZXcgUHJvamVjdChuYW1lSW5wdXQudmFsdWUsIHBtLmdldEFsbCgpLmxlbmd0aCk7XHJcbiAgICBwbS5hZGRQcm9qKHRlbXBQcm9qTmFtZSk7XHJcbiAgICBsb2FkUHJvamVjdHMocG0sIHByb2pNYW5EaXYsIGRpc3BsYXlQYW5lbCk7XHJcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcInBhY2thZ2VNYW5hZ2VyXCIsIEpTT04uc3RyaW5naWZ5KHBtKSk7XHJcblxyXG4gIH0pO1xyXG59O1xyXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVOZXdQcm9qZWN0Rm9ybTtcclxuIl0sIm5hbWVzIjpbIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwicHVzaCIsIm1vZHVsZSIsImlkIiwiZXhwb3J0cyIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJsaXN0IiwidG9TdHJpbmciLCJ0aGlzIiwibWFwIiwiaXRlbSIsImNvbnRlbnQiLCJuZWVkTGF5ZXIiLCJjb25jYXQiLCJsZW5ndGgiLCJqb2luIiwiaSIsIm1vZHVsZXMiLCJtZWRpYSIsImRlZHVwZSIsInN1cHBvcnRzIiwibGF5ZXIiLCJ1bmRlZmluZWQiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiayIsIl9rIiwiY3NzTWFwcGluZyIsImJ0b2EiLCJiYXNlNjQiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJkYXRhIiwic291cmNlTWFwcGluZyIsInN0eWxlc0luRE9NIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwicmVzdWx0IiwibW9kdWxlc1RvRG9tIiwib3B0aW9ucyIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsImJhc2UiLCJjb3VudCIsImluZGV4QnlJZGVudGlmaWVyIiwib2JqIiwiY3NzIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsInVwZGF0ZXIiLCJhZGRFbGVtZW50U3R5bGUiLCJieUluZGV4Iiwic3BsaWNlIiwiYXBpIiwiZG9tQVBJIiwidXBkYXRlIiwibmV3T2JqIiwicmVtb3ZlIiwibGFzdElkZW50aWZpZXJzIiwibmV3TGlzdCIsImluZGV4IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2kiLCJfaW5kZXgiLCJtZW1vIiwiaW5zZXJ0Iiwic3R5bGUiLCJ0YXJnZXQiLCJzdHlsZVRhcmdldCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsIndpbmRvdyIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsImUiLCJnZXRUYXJnZXQiLCJFcnJvciIsImFwcGVuZENoaWxkIiwiZWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJzZXRBdHRyaWJ1dGVzIiwiYXR0cmlidXRlcyIsInN0eWxlRWxlbWVudCIsIm5vbmNlIiwic2V0QXR0cmlidXRlIiwiaW5zZXJ0U3R5bGVFbGVtZW50Iiwic3R5bGVUYWdUcmFuc2Zvcm0iLCJhcHBseSIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsInJlbW92ZVN0eWxlRWxlbWVudCIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiZmlyc3RDaGlsZCIsImNyZWF0ZVRleHROb2RlIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsIm4iLCJnZXR0ZXIiLCJfX2VzTW9kdWxlIiwiZCIsImEiLCJkZWZpbml0aW9uIiwia2V5IiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJuYyIsIlRvZG8iLCJjb25zdHJ1Y3RvciIsIlRpdGxlIiwiRGVzY3JpcHRpb24iLCJkdWVEYXRlIiwicHJpb3JpdHkiLCJfdGl0bGUiLCJfZGVzY3JpcHRpb24iLCJfZHVlRGF0ZSIsIl9wcmlvcml0eSIsInRpdGxlIiwiZGVzY3JpcHRpb24iLCJfaWQiLCJQcm9qZWN0IiwidG9kb3MiLCJkaXYiLCJfZGl2IiwiYWRkVG9kbyIsInRvZG8iLCJnZXRBbGwiLCJvYmplY3QiLCJhcnJheSIsImRpc3BsYXlQYW5lbCIsInByb2plY3QiLCJwbSIsInRvZG9EaXYiLCJjbGFzc0xpc3QiLCJhZGQiLCJ0b2RvQ2hlY2tib3giLCJ0b2RvVGl0bGUiLCJ0ZXh0Q29udGVudCIsInRvZG9EdWVEYXRlSDQiLCJuZXdJbnB1dERhdGUiLCJ2YWx1ZSIsInJlbW92ZUJ1dHRvbiIsIm5ld0lucHV0VGV4dCIsImFkZEV2ZW50TGlzdGVuZXIiLCJjb25zb2xlIiwibG9nIiwibG9jYWxTdG9yYWdlIiwic2V0SXRlbSIsImZvY3VzIiwib25ibHVyIiwiYmx1ciIsIm9uZHJhZ3N0YXJ0IiwiZXZlbnQiLCJ0b2RvT2JqIiwicHJvamVjdE9iaiIsImRhdGFUcmFuc2ZlciIsInNldERhdGEiLCJvbmRyYWdlbmQiLCJwcmV2ZW50RGVmYXVsdCIsImZvckVhY2giLCJpbm5lckhUTUwiLCJtcCIsImNyZWF0ZVRvZG9Gb3JtQnV0dG9uIiwibmV3VG9kb0Zvcm1EaXYiLCJuZXdUb2RvRm9ybSIsInRpdGxlTGFiZWwiLCJ0aXRsZUlucHV0IiwiZHVlRGF0ZUxhYmVsIiwiZHVlRGF0ZUlucHV0IiwicHJpb3JpdHlMYWJlbCIsInByaW9yaXR5SW5wdXQiLCJjcmVhdGVCdXR0b24iLCJib2R5IiwidGVtcFRvZG9OYW1lIiwic3VtIiwicCIsInQiLCJ0b3RhbFRvZG9zIiwiYnV0dG9uIiwiZ2V0RWxlbWVudEJ5SWQiLCJjb250YWlucyIsInByb2plY3RNYW5hZ2VyT2JqZWN0IiwicHJvamVjdE1hbmFnZXJEaXYiLCJwcm9qZWN0cyIsInByb2pBcnJheSIsInRlbXBEaXYiLCJwcm9qTWFuRGl2IiwicHJvamVjdERpdiIsImVkaXRCdXR0b24iLCJwcm9qZWN0VGl0bGVIMSIsIm5ld05hbWVJbnB1dCIsIm1vdmVUb2RvIiwiaW5zZXJ0QmVmb3JlIiwidG9kb1RvQWRkIiwicGFyc2UiLCJnZXREYXRhIiwic291cmNlUHJvamVjdCIsImFyciIsInByb2pSZWYiLCJzYXZlZFByb2plY3RzIiwiYWRkUHJvaiIsImdldEl0ZW0iLCJwcm9qIiwidGVtcFRvZG8iLCJkZWZhdWx0UHJvamVjdCIsIm1haW5QYW5lbCIsImRpc3BsYXlQYW5lbERpdiIsImRyYXdQcm9qZWN0RGlzcGxheVBhbmVsIiwic2lkZVBhbmVsIiwiY3JlYXRlRm9ybU5ld1Byb2plY3QiLCJuZXdQcm9qZWN0Rm9ybURpdiIsIm5ld1Byb2plY3RGb3JtIiwibmFtZUxhYmVsIiwibmFtZUlucHV0IiwidGVtcFByb2pOYW1lIiwiZHJhd1Byb2plY3RNYW5hZ2VyIl0sInNvdXJjZVJvb3QiOiIifQ==