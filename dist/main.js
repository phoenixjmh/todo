(()=>{"use strict";var e={169:(e,t,n)=>{n.d(t,{Z:()=>s});var r=n(537),a=n.n(r),i=n(645),o=n.n(i)()(a());o.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Roboto:wght@700&display=swap);"]),o.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Roboto:wght@700&display=swap);"]),o.push([e.id,'body{display:flex;justify-content:flex-start;height:100vh;width:100vw;font-family:"Roboto",sans-serif;font-weight:700;font-size:16pt}@keyframes expand{from{width:0}to{width:100%}}@keyframes close{from{width:100%}to{width:0}}@keyframes openDisplay{from{position:relative;width:100vw;height:100%;right:0%;z-index:2}to{position:relative;width:0vw;right:100%}}@keyframes closeDisplay{from{position:relative;width:0%;right:100%}to{position:relative;width:100%;height:100%;right:0%;z-index:2}}@keyframes fiftyfiftyDisplayPanel{from{position:relative;height:100%;width:0;left:0;z-index:0}to{width:50%}}@keyframes fiftyfiftySidePanel{from{background-color:#1d1d20;height:100%;width:100%;position:relative;z-index:2}to{width:50%}}@media(max-width: 500px){.side-panel{background-color:#424242;width:100%;height:100%}.display-open{animation-duration:200ms}.display-closed{animation-duration:200ms}}.side-panel{background-color:#1d1d20;height:100%;width:100%;position:relative;z-index:2}.display-open{animation-name:openDisplay;animation-delay:0ms;animation-duration:500ms;animation-fill-mode:forwards}.display-closed{animation-name:closeDisplay;animation-delay:0ms;animation-duration:500ms;animation-fill-mode:forwards}.fifty-fifty-sidepanel{animation-name:fiftyfiftySidePanel;animation-duration:500ms;animation-fill-mode:forwards}.project-display-panel{display:flex;flex-direction:column;justify-content:center;align-items:center}.project{justify-content:center;align-items:center;display:flex;color:#d25b00}.project button{height:1rem}@keyframes expand{from{width:0}to{width:100%}}@keyframes close{from{width:100%}to{width:0}}@keyframes openDisplay{from{position:relative;width:100vw;height:100%;right:0%;z-index:2}to{position:relative;width:0vw;right:100%}}@keyframes closeDisplay{from{position:relative;width:0%;right:100%}to{position:relative;width:100%;height:100%;right:0%;z-index:2}}@keyframes fiftyfiftyDisplayPanel{from{position:relative;height:100%;width:0;left:0;z-index:0}to{width:50%}}@keyframes fiftyfiftySidePanel{from{background-color:#1d1d20;height:100%;width:100%;position:relative;z-index:2}to{width:50%}}.main-panel{position:relative;height:100%;width:0;left:0;z-index:0}.expand-panel{animation-name:expand;animation-duration:500ms;animation-fill-mode:forwards}.close-panel{animation-name:close;animation-duration:500ms;animation-fill-mode:forwards}.fifty-fifty-display{animation-name:fiftyfiftyDisplayPanel;animation-duration:500ms;animation-fill-mode:forwards}.todo{width:80%;display:flex;border:2px solid #000;justify-content:space-between}.title{position:relative;z-index:0;font-size:1.5rem;font-weight:700}.todo-new-title{position:absolute;left:0;width:100%;font-size:1.5rem}.due-date{position:relative;z-index:0;font-size:1.5rem;font-weight:700}.todo-new-date{position:absolute;left:0;width:100%;font-size:1.5rem}.create-project-form{border:2px solid #000;height:20%;position:absolute;z-index:3;top:50%;left:50%;background-color:gray}#expand-arrow{font-size:2rem;position:absolute;top:50%}.create-todo-form{border:2px solid #000;height:20%;position:absolute;top:50%;left:50%;background-color:gray}',"",{version:3,sources:["webpack://./src/main.scss","webpack://./src/styles/animations.scss","webpack://./src/styles/projectPanel.scss","webpack://./src/styles/mainPanel.scss"],names:[],mappings:"AAEA,KACI,YAAA,CACA,0BAAA,CACA,YAAA,CACA,WAAA,CACA,+BAAA,CACA,eAAA,CACA,cAAA,CCPA,kBACI,KAAA,OAAA,CACA,GAAA,UAAA,CAAA,CAEJ,iBACI,KAAA,UAAA,CACA,GAAA,OAAA,CAAA,CAEJ,uBACI,KACI,iBAAA,CACA,WAAA,CACA,WAAA,CACA,QAAA,CACA,SAAA,CAEJ,GACI,iBAAA,CACA,SAAA,CACA,UAAA,CAAA,CAIR,wBACI,KACI,iBAAA,CACA,QAAA,CACA,UAAA,CAEJ,GAEI,iBAAA,CACA,UAAA,CACA,WAAA,CACA,QAAA,CACA,SAAA,CAAA,CAGR,kCACI,KAAA,iBAAA,CACI,WAAA,CACA,OAAA,CACA,MAAA,CACA,SAAA,CACJ,GACI,SAAA,CAAA,CAIR,+BACI,KACI,wBAAA,CACA,WAAA,CACA,UAAA,CACA,iBAAA,CACA,SAAA,CAEJ,GACI,SAAA,CAAA,CCzDZ,yBACI,YACI,wBAAA,CACA,UAAA,CACA,WAAA,CAEJ,cACI,wBAAA,CAEJ,gBACI,wBAAA,CAAA,CAQR,YACI,wBAAA,CACA,WAAA,CACA,UAAA,CACA,iBAAA,CACI,SAAA,CAIR,cACI,0BAAA,CACA,mBAAA,CACA,wBAAA,CACA,4BAAA,CAEJ,gBACI,2BAAA,CACA,mBAAA,CACA,wBAAA,CACA,4BAAA,CAEJ,uBACI,kCAAA,CACA,wBAAA,CACA,4BAAA,CAMJ,uBACI,YAAA,CACA,qBAAA,CACA,sBAAA,CACA,kBAAA,CAEJ,SACI,sBAAA,CACA,kBAAA,CACA,YAAA,CACA,aAAA,CACD,gBACC,WAAA,CD7DA,kBACI,KAAA,OAAA,CACA,GAAA,UAAA,CAAA,CAEJ,iBACI,KAAA,UAAA,CACA,GAAA,OAAA,CAAA,CAEJ,uBACI,KACI,iBAAA,CACA,WAAA,CACA,WAAA,CACA,QAAA,CACA,SAAA,CAEJ,GACI,iBAAA,CACA,SAAA,CACA,UAAA,CAAA,CAIR,wBACI,KACI,iBAAA,CACA,QAAA,CACA,UAAA,CAEJ,GAEI,iBAAA,CACA,UAAA,CACA,WAAA,CACA,QAAA,CACA,SAAA,CAAA,CAGR,kCACI,KAAA,iBAAA,CACI,WAAA,CACA,OAAA,CACA,MAAA,CACA,SAAA,CACJ,GACI,SAAA,CAAA,CAIR,+BACI,KACI,wBAAA,CACA,WAAA,CACA,UAAA,CACA,iBAAA,CACA,SAAA,CAEJ,GACI,SAAA,CAAA,CE1DZ,YACI,iBAAA,CACA,WAAA,CACA,OAAA,CACA,MAAA,CACA,SAAA,CAGJ,cACI,qBAAA,CACA,wBAAA,CACA,4BAAA,CAEJ,aACI,oBAAA,CACA,wBAAA,CACA,4BAAA,CAEJ,qBACI,qCAAA,CACA,wBAAA,CACA,4BAAA,CAGJ,MACI,SAAA,CACA,YAAA,CACA,qBAAA,CACA,6BAAA,CAEJ,OACI,iBAAA,CACA,SAAA,CACA,gBAAA,CACA,eAAA,CAEJ,gBACI,iBAAA,CACA,MAAA,CACA,UAAA,CACA,gBAAA,CAEJ,UACI,iBAAA,CACI,SAAA,CACA,gBAAA,CACA,eAAA,CAER,eACI,iBAAA,CACI,MAAA,CACA,UAAA,CACA,gBAAA,CAER,qBACI,qBAAA,CACA,UAAA,CACA,iBAAA,CACA,SAAA,CACA,OAAA,CACA,QAAA,CACA,qBAAA,CAEJ,cACI,cAAA,CACA,iBAAA,CACA,OAAA,CAGJ,kBACI,qBAAA,CACI,UAAA,CACA,iBAAA,CACA,OAAA,CACA,QAAA,CACA,qBAAA",sourcesContent:["@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@700&display=swap');\r\n@import './styles/animations.scss';\r\nbody{\r\n    display:flex;\r\n    justify-content: flex-start;\r\n    height:100vh;\r\n    width:100vw;\r\n    font-family:'Roboto',sans-serif;\r\n    font-weight:700;\r\n    font-size:16pt;\r\n}\r\n@import './styles/projectPanel.scss';\r\n@import 'styles/mainPanel.scss';\r\n\r\n\r\n","@mixin animations{\r\n\r\n    @keyframes expand{\r\n        from{width:0}\r\n        to{width:100%}\r\n    }\r\n    @keyframes close {\r\n        from{width:100%}\r\n        to{width:0}\r\n    }\r\n    @keyframes openDisplay{\r\n        from{\r\n            position:relative;\r\n            width:100vw;\r\n            height:100%;\r\n            right:0%;\r\n            z-index: 2;\r\n        }\r\n        to{\r\n            position:relative;\r\n            width:0vw;\r\n            right:100%;\r\n    \r\n        }\r\n    }\r\n    @keyframes closeDisplay{\r\n        from{\r\n            position:relative;\r\n            width:0%;\r\n            right:100%;\r\n        }\r\n        to{\r\n            \r\n            position:relative;\r\n            width:100%;\r\n            height:100%;\r\n            right:0%;\r\n            z-index: 2;\r\n        }\r\n    }\r\n    @keyframes fiftyfiftyDisplayPanel{\r\n        from{ position:relative;\r\n            height:100%;\r\n            width:0;\r\n            left:0;\r\n            z-index:0;}\r\n        to{\r\n            width:50%;\r\n\r\n            }\r\n    }\r\n    @keyframes fiftyfiftySidePanel{\r\n        from{\r\n            background-color: rgb(29, 29, 32);\r\n            height:100%;\r\n            width:100%;\r\n            position:relative;\r\n            z-index: 2;\r\n        }\r\n        to{\r\n            width:50%;\r\n        }\r\n    }\r\n}\r\n","@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@700&display=swap');\r\n\r\n@include animations;\r\n@media (max-width:500px){\r\n    .side-panel{\r\n        background-color:rgb(66, 66, 66);\r\n        width:100%;\r\n        height:100%;\r\n    }\r\n    .display-open{\r\n        animation-duration: 200ms;\r\n    }\r\n    .display-closed{\r\n        animation-duration: 200ms;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n.side-panel{\r\n    background-color: rgb(29, 29, 32);\r\n    height:100%;\r\n    width:100%;\r\n    position:relative;\r\n        z-index: 2;\r\n    \r\n\r\n}\r\n.display-open{\r\n    animation-name:openDisplay;\r\n    animation-delay:0ms;\r\n    animation-duration:500ms;\r\n    animation-fill-mode: forwards;\r\n}\r\n.display-closed{\r\n    animation-name:closeDisplay;\r\n    animation-delay:0ms;\r\n    animation-duration:500ms;\r\n    animation-fill-mode: forwards;\r\n}\r\n.fifty-fifty-sidepanel{\r\n    animation-name:fiftyfiftySidePanel;\r\n    animation-duration: 500ms;\r\n    animation-fill-mode: forwards;\r\n\r\n}\r\n.project-manager{\r\n}\r\n\r\n.project-display-panel{\r\n    display:flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n}\r\n.project{\r\n    justify-content: center;\r\n    align-items: center;\r\n    display:flex;\r\n    color:rgb(210, 91, 0);\r\n   button{\r\n    height:1rem;\r\n   }\r\n}\r\n\r\n\r\n","@include animations;\r\n\r\n.main-panel{\r\n    position:relative;\r\n    height:100%;\r\n    width:0;\r\n    left:0;\r\n    z-index:0;\r\n\r\n}\r\n.expand-panel{\r\n    animation-name:expand;\r\n    animation-duration: 500ms;\r\n    animation-fill-mode: forwards;\r\n}\r\n.close-panel{\r\n    animation-name:close;\r\n    animation-duration: 500ms;\r\n    animation-fill-mode: forwards;\r\n}\r\n.fifty-fifty-display{\r\n    animation-name:fiftyfiftyDisplayPanel;\r\n    animation-duration: 500ms;\r\n    animation-fill-mode: forwards;\r\n\r\n}\r\n.todo{\r\n    width:80%;\r\n    display:flex;\r\n    border:2px solid black;\r\n    justify-content: space-between;\r\n}\r\n.title{\r\n    position:relative;\r\n    z-index: 0;\r\n    font-size:1.5rem;\r\n    font-weight:700;\r\n}\r\n.todo-new-title{\r\n    position:absolute;\r\n    left:0;\r\n    width:100%;\r\n    font-size:1.5rem;\r\n}\r\n.due-date{\r\n    position: relative;\r\n        z-index: 0;\r\n        font-size: 1.5rem;\r\n        font-weight: 700;\r\n}\r\n.todo-new-date{\r\n    position: absolute;\r\n        left: 0;\r\n        width: 100%;\r\n        font-size: 1.5rem;\r\n}\r\n.create-project-form{\r\n    border:2px solid black;\r\n    height:20%;\r\n    position:absolute;\r\n    z-index: 3;\r\n    top:50%;\r\n    left:50%;\r\n    background-color: gray;\r\n}\r\n#expand-arrow{\r\n    font-size:2rem;\r\n    position:absolute;\r\n    top:50%;\r\n}\r\n\r\n.create-todo-form{\r\n    border: 2px solid black;\r\n        height: 20%;\r\n        position: absolute;\r\n        top: 50%;\r\n        left: 50%;\r\n        background-color: gray;\r\n}"],sourceRoot:""}]);const s=o},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,a,i){"string"==typeof e&&(e=[[null,e,void 0]]);var o={};if(r)for(var s=0;s<this.length;s++){var d=this[s][0];null!=d&&(o[d]=!0)}for(var l=0;l<e.length;l++){var u=[].concat(e[l]);r&&o[u[0]]||(void 0!==i&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=i),n&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=n):u[2]=n),a&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=a):u[4]="".concat(a)),t.push(u))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(a," */");return[t].concat([i]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var i={},o=[],s=0;s<e.length;s++){var d=e[s],l=r.base?d[0]+r.base:d[0],u=i[l]||0,c="".concat(l," ").concat(u);i[l]=u+1;var A=n(c),m={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==A)t[A].references++,t[A].updater(m);else{var f=a(m,r);r.byIndex=s,t.splice(s,0,{identifier:c,updater:f,references:1})}o.push(c)}return o}function a(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,a){var i=r(e=e||[],a=a||{});return function(e){e=e||[];for(var o=0;o<i.length;o++){var s=n(i[o]);t[s].references--}for(var d=r(e,a),l=0;l<i.length;l++){var u=n(i[l]);0===t[u].references&&(t[u].updater(),t.splice(u,1))}i=d}}},569:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var a=void 0!==n.layer;a&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,a&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(r){var a=t[r];if(void 0!==a)return a.exports;var i=t[r]={id:r,exports:{}};return e[r](i,i.exports,n),i.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nc=void 0,(()=>{class e{constructor(e,t,n,r,a){this._title=e,this._description=t,this._dueDate=n,this._priority=r,this.id=a}get title(){return this._title}get description(){return this._description}get dueDate(){return this._dueDate}get priority(){return this._priority}get id(){return this._id}set title(e){this._title=e}set description(e){this._description=e}set dueDate(e){this._dueDate=e}set priority(e){this._priority=e}set id(e){this._id=e}}class t{todos=[];constructor(e,t,n){this._title=e,this._id=t,this._div=n}get title(){return this._title}set title(e){this._title=e}get id(){return this._id}get div(){return this._div}set div(e){this._div=e}addTodo(e){this.todos.push(e)}getAll(){return this.todos}}const r=(e,t)=>{let n=e.getAll();for(let e in n)n[e].id==t&&n.splice(e,1)};function a(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function i(e){return i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i(e)}function o(e){return o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o(e)}function s(e){a(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"===o(e)&&"[object Date]"===t?new Date(e.getTime()):"number"==typeof e||"[object Number]"===t?new Date(e):("string"!=typeof e&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function d(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function l(e){a(1,arguments);var t=s(e),n=t.getUTCDay(),r=(n<1?7:0)+n-1;return t.setUTCDate(t.getUTCDate()-r),t.setUTCHours(0,0,0,0),t}function u(e){a(1,arguments);var t=s(e),n=t.getUTCFullYear(),r=new Date(0);r.setUTCFullYear(n+1,0,4),r.setUTCHours(0,0,0,0);var i=l(r),o=new Date(0);o.setUTCFullYear(n,0,4),o.setUTCHours(0,0,0,0);var d=l(o);return t.getTime()>=i.getTime()?n+1:t.getTime()>=d.getTime()?n:n-1}var c=6048e5;var A={};function m(){return A}function f(e,t){var n,r,i,o,l,u,c,A;a(1,arguments);var f=m(),h=d(null!==(n=null!==(r=null!==(i=null!==(o=null==t?void 0:t.weekStartsOn)&&void 0!==o?o:null==t||null===(l=t.locale)||void 0===l||null===(u=l.options)||void 0===u?void 0:u.weekStartsOn)&&void 0!==i?i:f.weekStartsOn)&&void 0!==r?r:null===(c=f.locale)||void 0===c||null===(A=c.options)||void 0===A?void 0:A.weekStartsOn)&&void 0!==n?n:0);if(!(h>=0&&h<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var p=s(e),C=p.getUTCDay(),g=(C<h?7:0)+C-h;return p.setUTCDate(p.getUTCDate()-g),p.setUTCHours(0,0,0,0),p}function h(e,t){var n,r,i,o,l,u,c,A;a(1,arguments);var h=s(e),p=h.getUTCFullYear(),C=m(),g=d(null!==(n=null!==(r=null!==(i=null!==(o=null==t?void 0:t.firstWeekContainsDate)&&void 0!==o?o:null==t||null===(l=t.locale)||void 0===l||null===(u=l.options)||void 0===u?void 0:u.firstWeekContainsDate)&&void 0!==i?i:C.firstWeekContainsDate)&&void 0!==r?r:null===(c=C.locale)||void 0===c||null===(A=c.options)||void 0===A?void 0:A.firstWeekContainsDate)&&void 0!==n?n:1);if(!(g>=1&&g<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var v=new Date(0);v.setUTCFullYear(p+1,0,g),v.setUTCHours(0,0,0,0);var y=f(v,t),w=new Date(0);w.setUTCFullYear(p,0,g),w.setUTCHours(0,0,0,0);var b=f(w,t);return h.getTime()>=y.getTime()?p+1:h.getTime()>=b.getTime()?p:p-1}var p=6048e5;function C(e,t){for(var n=e<0?"-":"",r=Math.abs(e).toString();r.length<t;)r="0"+r;return n+r}const g=function(e,t){var n=e.getUTCFullYear(),r=n>0?n:1-n;return C("yy"===t?r%100:r,t.length)},v=function(e,t){var n=e.getUTCMonth();return"M"===t?String(n+1):C(n+1,2)},y=function(e,t){return C(e.getUTCDate(),t.length)},w=function(e,t){return C(e.getUTCHours()%12||12,t.length)},b=function(e,t){return C(e.getUTCHours(),t.length)},x=function(e,t){return C(e.getUTCMinutes(),t.length)},E=function(e,t){return C(e.getUTCSeconds(),t.length)},k=function(e,t){var n=t.length,r=e.getUTCMilliseconds();return C(Math.floor(r*Math.pow(10,n-3)),t.length)};var S={G:function(e,t,n){var r=e.getUTCFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return n.era(r,{width:"abbreviated"});case"GGGGG":return n.era(r,{width:"narrow"});default:return n.era(r,{width:"wide"})}},y:function(e,t,n){if("yo"===t){var r=e.getUTCFullYear(),a=r>0?r:1-r;return n.ordinalNumber(a,{unit:"year"})}return g(e,t)},Y:function(e,t,n,r){var a=h(e,r),i=a>0?a:1-a;return"YY"===t?C(i%100,2):"Yo"===t?n.ordinalNumber(i,{unit:"year"}):C(i,t.length)},R:function(e,t){return C(u(e),t.length)},u:function(e,t){return C(e.getUTCFullYear(),t.length)},Q:function(e,t,n){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"Q":return String(r);case"QQ":return C(r,2);case"Qo":return n.ordinalNumber(r,{unit:"quarter"});case"QQQ":return n.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(r,{width:"narrow",context:"formatting"});default:return n.quarter(r,{width:"wide",context:"formatting"})}},q:function(e,t,n){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"q":return String(r);case"qq":return C(r,2);case"qo":return n.ordinalNumber(r,{unit:"quarter"});case"qqq":return n.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(r,{width:"narrow",context:"standalone"});default:return n.quarter(r,{width:"wide",context:"standalone"})}},M:function(e,t,n){var r=e.getUTCMonth();switch(t){case"M":case"MM":return v(e,t);case"Mo":return n.ordinalNumber(r+1,{unit:"month"});case"MMM":return n.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(r,{width:"narrow",context:"formatting"});default:return n.month(r,{width:"wide",context:"formatting"})}},L:function(e,t,n){var r=e.getUTCMonth();switch(t){case"L":return String(r+1);case"LL":return C(r+1,2);case"Lo":return n.ordinalNumber(r+1,{unit:"month"});case"LLL":return n.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(r,{width:"narrow",context:"standalone"});default:return n.month(r,{width:"wide",context:"standalone"})}},w:function(e,t,n,r){var i=function(e,t){a(1,arguments);var n=s(e),r=f(n,t).getTime()-function(e,t){var n,r,i,o,s,l,u,c;a(1,arguments);var A=m(),p=d(null!==(n=null!==(r=null!==(i=null!==(o=null==t?void 0:t.firstWeekContainsDate)&&void 0!==o?o:null==t||null===(s=t.locale)||void 0===s||null===(l=s.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==i?i:A.firstWeekContainsDate)&&void 0!==r?r:null===(u=A.locale)||void 0===u||null===(c=u.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==n?n:1),C=h(e,t),g=new Date(0);return g.setUTCFullYear(C,0,p),g.setUTCHours(0,0,0,0),f(g,t)}(n,t).getTime();return Math.round(r/p)+1}(e,r);return"wo"===t?n.ordinalNumber(i,{unit:"week"}):C(i,t.length)},I:function(e,t,n){var r=function(e){a(1,arguments);var t=s(e),n=l(t).getTime()-function(e){a(1,arguments);var t=u(e),n=new Date(0);return n.setUTCFullYear(t,0,4),n.setUTCHours(0,0,0,0),l(n)}(t).getTime();return Math.round(n/c)+1}(e);return"Io"===t?n.ordinalNumber(r,{unit:"week"}):C(r,t.length)},d:function(e,t,n){return"do"===t?n.ordinalNumber(e.getUTCDate(),{unit:"date"}):y(e,t)},D:function(e,t,n){var r=function(e){a(1,arguments);var t=s(e),n=t.getTime();t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0);var r=n-t.getTime();return Math.floor(r/864e5)+1}(e);return"Do"===t?n.ordinalNumber(r,{unit:"dayOfYear"}):C(r,t.length)},E:function(e,t,n){var r=e.getUTCDay();switch(t){case"E":case"EE":case"EEE":return n.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},e:function(e,t,n,r){var a=e.getUTCDay(),i=(a-r.weekStartsOn+8)%7||7;switch(t){case"e":return String(i);case"ee":return C(i,2);case"eo":return n.ordinalNumber(i,{unit:"day"});case"eee":return n.day(a,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(a,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},c:function(e,t,n,r){var a=e.getUTCDay(),i=(a-r.weekStartsOn+8)%7||7;switch(t){case"c":return String(i);case"cc":return C(i,t.length);case"co":return n.ordinalNumber(i,{unit:"day"});case"ccc":return n.day(a,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(a,{width:"narrow",context:"standalone"});case"cccccc":return n.day(a,{width:"short",context:"standalone"});default:return n.day(a,{width:"wide",context:"standalone"})}},i:function(e,t,n){var r=e.getUTCDay(),a=0===r?7:r;switch(t){case"i":return String(a);case"ii":return C(a,t.length);case"io":return n.ordinalNumber(a,{unit:"day"});case"iii":return n.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},a:function(e,t,n){var r=e.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(e,t,n){var r,a=e.getUTCHours();switch(r=12===a?"noon":0===a?"midnight":a/12>=1?"pm":"am",t){case"b":case"bb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(e,t,n){var r,a=e.getUTCHours();switch(r=a>=17?"evening":a>=12?"afternoon":a>=4?"morning":"night",t){case"B":case"BB":case"BBB":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(e,t,n){if("ho"===t){var r=e.getUTCHours()%12;return 0===r&&(r=12),n.ordinalNumber(r,{unit:"hour"})}return w(e,t)},H:function(e,t,n){return"Ho"===t?n.ordinalNumber(e.getUTCHours(),{unit:"hour"}):b(e,t)},K:function(e,t,n){var r=e.getUTCHours()%12;return"Ko"===t?n.ordinalNumber(r,{unit:"hour"}):C(r,t.length)},k:function(e,t,n){var r=e.getUTCHours();return 0===r&&(r=24),"ko"===t?n.ordinalNumber(r,{unit:"hour"}):C(r,t.length)},m:function(e,t,n){return"mo"===t?n.ordinalNumber(e.getUTCMinutes(),{unit:"minute"}):x(e,t)},s:function(e,t,n){return"so"===t?n.ordinalNumber(e.getUTCSeconds(),{unit:"second"}):E(e,t)},S:function(e,t){return k(e,t)},X:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();if(0===a)return"Z";switch(t){case"X":return M(a);case"XXXX":case"XX":return D(a);default:return D(a,":")}},x:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();switch(t){case"x":return M(a);case"xxxx":case"xx":return D(a);default:return D(a,":")}},O:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+T(a,":");default:return"GMT"+D(a,":")}},z:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+T(a,":");default:return"GMT"+D(a,":")}},t:function(e,t,n,r){var a=r._originalDate||e;return C(Math.floor(a.getTime()/1e3),t.length)},T:function(e,t,n,r){return C((r._originalDate||e).getTime(),t.length)}};function T(e,t){var n=e>0?"-":"+",r=Math.abs(e),a=Math.floor(r/60),i=r%60;if(0===i)return n+String(a);var o=t||"";return n+String(a)+o+C(i,2)}function M(e,t){return e%60==0?(e>0?"-":"+")+C(Math.abs(e)/60,2):D(e,t)}function D(e,t){var n=t||"",r=e>0?"-":"+",a=Math.abs(e);return r+C(Math.floor(a/60),2)+n+C(a%60,2)}const B=S;var L=function(e,t){switch(e){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});default:return t.date({width:"full"})}},P=function(e,t){switch(e){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});default:return t.time({width:"full"})}};const I={p:P,P:function(e,t){var n,r=e.match(/(P+)(p+)?/)||[],a=r[1],i=r[2];if(!i)return L(e,t);switch(a){case"P":n=t.dateTime({width:"short"});break;case"PP":n=t.dateTime({width:"medium"});break;case"PPP":n=t.dateTime({width:"long"});break;default:n=t.dateTime({width:"full"})}return n.replace("{{date}}",L(a,t)).replace("{{time}}",P(i,t))}};var U=["D","DD"],j=["YY","YYYY"];function O(e,t,n){if("YYYY"===e)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===e)throw new RangeError("Use `yy` instead of `YY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===e)throw new RangeError("Use `d` instead of `D` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===e)throw new RangeError("Use `dd` instead of `DD` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var W={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function N(e){return function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=t.width?String(t.width):e.defaultWidth;return e.formats[n]||e.formats[e.defaultWidth]}}const z={date:N({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:N({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:N({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var Y={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function J(e){return function(t,n){var r;if("formatting"===(null!=n&&n.context?String(n.context):"standalone")&&e.formattingValues){var a=e.defaultFormattingWidth||e.defaultWidth,i=null!=n&&n.width?String(n.width):a;r=e.formattingValues[i]||e.formattingValues[a]}else{var o=e.defaultWidth,s=null!=n&&n.width?String(n.width):e.defaultWidth;r=e.values[s]||e.values[o]}return r[e.argumentCallback?e.argumentCallback(t):t]}}const q={ordinalNumber:function(e,t){var n=Number(e),r=n%100;if(r>20||r<10)switch(r%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:J({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:J({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return e-1}}),month:J({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:J({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:J({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function _(e){return function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=n.width,a=r&&e.matchPatterns[r]||e.matchPatterns[e.defaultMatchWidth],i=t.match(a);if(!i)return null;var o,s=i[0],d=r&&e.parsePatterns[r]||e.parsePatterns[e.defaultParseWidth],l=Array.isArray(d)?function(e,t){for(var n=0;n<e.length;n++)if(e[n].test(s))return n}(d):function(e,t){for(var n in e)if(e.hasOwnProperty(n)&&e[n].test(s))return n}(d);return o=e.valueCallback?e.valueCallback(l):l,{value:o=n.valueCallback?n.valueCallback(o):o,rest:t.slice(s.length)}}}var R,G={ordinalNumber:(R={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.match(R.matchPattern);if(!n)return null;var r=n[0],a=e.match(R.parsePattern);if(!a)return null;var i=R.valueCallback?R.valueCallback(a[0]):a[0];return{value:i=t.valueCallback?t.valueCallback(i):i,rest:e.slice(r.length)}}),era:_({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:_({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:_({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:_({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:_({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const H={code:"en-US",formatDistance:function(e,t,n){var r,a=W[e];return r="string"==typeof a?a:1===t?a.one:a.other.replace("{{count}}",t.toString()),null!=n&&n.addSuffix?n.comparison&&n.comparison>0?"in "+r:r+" ago":r},formatLong:z,formatRelative:function(e,t,n,r){return Y[e]},localize:q,match:G,options:{weekStartsOn:0,firstWeekContainsDate:1}};var F=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,Q=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,X=/^'([^]*?)'?$/,K=/''/g,Z=/[a-zA-Z]/;function $(e,t,n){var r,o,l,u,c,A,f,h,p,C,g,v,y,w,b,x,E,k;a(2,arguments);var S=String(t),T=m(),M=null!==(r=null!==(o=null==n?void 0:n.locale)&&void 0!==o?o:T.locale)&&void 0!==r?r:H,D=d(null!==(l=null!==(u=null!==(c=null!==(A=null==n?void 0:n.firstWeekContainsDate)&&void 0!==A?A:null==n||null===(f=n.locale)||void 0===f||null===(h=f.options)||void 0===h?void 0:h.firstWeekContainsDate)&&void 0!==c?c:T.firstWeekContainsDate)&&void 0!==u?u:null===(p=T.locale)||void 0===p||null===(C=p.options)||void 0===C?void 0:C.firstWeekContainsDate)&&void 0!==l?l:1);if(!(D>=1&&D<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var L=d(null!==(g=null!==(v=null!==(y=null!==(w=null==n?void 0:n.weekStartsOn)&&void 0!==w?w:null==n||null===(b=n.locale)||void 0===b||null===(x=b.options)||void 0===x?void 0:x.weekStartsOn)&&void 0!==y?y:T.weekStartsOn)&&void 0!==v?v:null===(E=T.locale)||void 0===E||null===(k=E.options)||void 0===k?void 0:k.weekStartsOn)&&void 0!==g?g:0);if(!(L>=0&&L<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!M.localize)throw new RangeError("locale must contain localize property");if(!M.formatLong)throw new RangeError("locale must contain formatLong property");var P=s(e);if(!function(e){if(a(1,arguments),!function(e){return a(1,arguments),e instanceof Date||"object"===i(e)&&"[object Date]"===Object.prototype.toString.call(e)}(e)&&"number"!=typeof e)return!1;var t=s(e);return!isNaN(Number(t))}(P))throw new RangeError("Invalid time value");var W=function(e){var t=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return t.setUTCFullYear(e.getFullYear()),e.getTime()-t.getTime()}(P),N=function(e,t){return a(2,arguments),function(e,t){a(2,arguments);var n=s(e).getTime(),r=d(t);return new Date(n+r)}(e,-d(t))}(P,W),z={firstWeekContainsDate:D,weekStartsOn:L,locale:M,_originalDate:P};return S.match(Q).map((function(e){var t=e[0];return"p"===t||"P"===t?(0,I[t])(e,M.formatLong):e})).join("").match(F).map((function(r){if("''"===r)return"'";var a,i,o=r[0];if("'"===o)return(i=(a=r).match(X))?i[1].replace(K,"'"):a;var s,d=B[o];if(d)return null!=n&&n.useAdditionalWeekYearTokens||(s=r,-1===j.indexOf(s))||O(r,t,String(e)),null!=n&&n.useAdditionalDayOfYearTokens||!function(e){return-1!==U.indexOf(e)}(r)||O(r,t,String(e)),d(N,r,M.localize,z);if(o.match(Z))throw new RangeError("Format string contains an unescaped latin alphabet character `"+o+"`");return r})).join("")}const V=(e,t,n,a)=>{const i=document.querySelector("#expand-arrow"),o=document.querySelector(".side-panel");i.ondragover=()=>{t.parentElement.classList.remove("expand-panel"),o.classList.remove("display-open"),t.parentElement.classList.add("close-panel"),o.classList.add("display-closed")};let s=document.createElement("div");s.classList.add("todo"),s.id="todo-"+e.id,s.setAttribute("draggable","true");let d=document.createElement("input");d.setAttribute("type","checkbox"),d.classList.add("todo-checkbox");let l=document.createElement("p");l.classList.add("title"),l.textContent=e.title;let u=document.createElement("h4");u.classList.add("due-date"),u.textContent=e.dueDate;let c=document.createElement("input");c.setAttribute("type","date"),c.classList.add("todo-new-date"),c.value=e.dueDate;let A=document.createElement("button");A.classList.add("remove-todo"),A.textContent="Remove",s.appendChild(d),s.appendChild(l),s.appendChild(u),s.appendChild(A),t.appendChild(s);let m=document.createElement("input");return m.classList.add("todo-new-title"),m.value=e.title,A.addEventListener("click",(()=>{r(n,e.id),s.remove(),localStorage.setItem("packageManager",JSON.stringify(a))})),l.addEventListener("click",(()=>{l.appendChild(m),m.focus()})),m.onblur=()=>{e.title=m.value,l.textContent=e.title,m.remove(),localStorage.setItem("packageManager",JSON.stringify(a))},m.addEventListener("keyup",(({key:e})=>{"Enter"===e&&m.blur()})),s.ondragstart=t=>{const r={todoObj:e,projectObj:n};t.dataTransfer.setData("text",JSON.stringify(r))},s.ondragend=e=>{e.preventDefault(),te(a,n,t)},u.addEventListener("click",(()=>{u.appendChild(c),c.focus()})),c.onblur=()=>{if(""!==c.value){let t=$(new Date(`${c.value}T00:00`),"MM/dd/yyyy");e.dueDate=t,u.valueAsDate=t,u.textContent=e.dueDate,localStorage.setItem("packageManager",JSON.stringify(a))}c.remove()},c.addEventListener("keyup",(({key:e})=>{"Enter"===e&&c.blur()})),s},ee=(e,t)=>{e.getAll().forEach((n=>{n.getAll().forEach((r=>{V(r,t,n,e)}))}));let n=t.children;n=Array.prototype.slice.call(n),n.sort(((e,t)=>new Date(e.childNodes[2].innerHTML)-new Date(t.childNodes[2].innerHTML)));let r=t;r.innerHTML="";for(let e=0;e<n.length;e++)"Set Date"!==n[e].childNodes[2]?r.appendChild(n[e]):r.insertBefore(n[e],r.firstChild)},te=(e,t,n)=>{n.innerHTML="","All"===t.title?ee(e,n):t.getAll().forEach((r=>{V(r,n,t,e)}))},ne=(t,n,r)=>{const a=document.querySelector(".main-panel");let i=document.createElement("button");i.classList.add("create-todo-form-button"),i.id="todo-create-new",i.textContent="Create new Todo",i.addEventListener("click",(()=>{((t,n,r)=>{let a=document.createElement("div");a.classList.add("create-todo-form");let i=document.createElement("form"),o=document.createElement("label");o.setAttribute("for","form-todo-title"),o.textContent="Title";let s=document.createElement("input");s.setAttribute("type","text"),s.id="form-Todo-title";let d=document.createElement("label");d.setAttribute("for","form-todo-dueDate"),d.textContent="Due Date";let l=document.createElement("input");l.setAttribute("type","date"),l.id="form-todo-dueDate";let u=document.createElement("label");u.setAttribute("for","form-todo-priority"),u.textContent="Priority";let c=document.createElement("input");c.setAttribute("type","text"),c.id="form-todo-priority";let A=document.createElement("button");A.textContent="Create",A.classList.add("form-button-todo"),i.appendChild(o),i.appendChild(s),i.appendChild(d),i.appendChild(l),a.appendChild(i),a.appendChild(A),document.body.appendChild(a),s.focus(),s.onblur=()=>{},i.addEventListener("submit",(e=>{e.preventDefault(),m()})),A.addEventListener("click",(()=>{m()}));const m=()=>{let i;if(i=""!==l.value?$(new Date(`${l.value}T00:00`),"MM/dd/yyyy"):"Set Date",""!==s.value){let o=new e(s.value," ",i,c.value,(()=>{let e=0;return t.getAll().forEach((t=>{t.getAll().forEach((t=>e+=1))})),e})());n.addTodo(o),a.remove(),te(t,n,r),localStorage.setItem("packageManager",JSON.stringify(t))}}})(t,n,r)}));let o=document.getElementById("todo-create-new");return document.body.contains(o)&&o.remove(),a.appendChild(i),i},re=(t,n,a)=>{n.innerHTML="",t.projects.forEach((i=>{const o=((t,n,a,i,o,s)=>{const d=o.parentElement;if(document.querySelector("#expand-arrow").onclick=()=>{s.parentElement.classList.remove("expand-panel"),d.classList.remove("display-open"),s.parentElement.classList.add("close-panel"),d.classList.add("display-closed")},"All"!==n.title){let e=document.createElement("div"),a=document.createElement("button");a.classList.add("edit-project"),a.textContent="rename",e.classList.add("project"),e.id="project-"+i;let u=document.createElement("h1");u.classList.add("project-name"),u.textContent=n.title;let c=document.createElement("input");c.id="new-name-input",c.value=n.title;let A=document.createElement("button");A.classList.add(".project-remove-button"),A.textContent="X",e.appendChild(u),e.appendChild(a),e.appendChild(A),o.appendChild(e),e.addEventListener("drop",(e=>l(e,n,t))),A.addEventListener("click",(()=>{r(t,n.id),localStorage.setItem("packageManager",JSON.stringify(t)),e.remove()})),a.addEventListener("click",(()=>{u.remove(),e.appendChild(c)})),c.onblur=()=>{u.textContent=c.value,n.title=c.value,c.remove(),e.insertBefore(u,a),localStorage.setItem("packageManager",JSON.stringify(t))},c.addEventListener("keyup",(({key:e})=>{"Enter"===e&&c.blur()})),u.addEventListener("click",(function(){s.parentElement.classList.contains("close-panel")&&(s.parentElement.classList.remove("close-panel"),d.classList.remove("display-closed")),s.parentElement.classList.add("expand-panel"),d.classList.add("display-open"),s.innerHTML="",te(t,n,s),ne(t,n,s)})),e.addEventListener("dragover",(e=>{e.preventDefault()}))}else{let e=document.createElement("div");e.classList.add("project"),e.id="all-projects-container";let r=document.createElement("h1");r.classList.add("project-name"),r.textContent=n.title,e.appendChild(r),o.appendChild(e),r.addEventListener("click",(function(){s.parentElement.classList.contains("close-panel")&&(s.parentElement.classList.remove("close-panel"),d.classList.remove("display-closed")),s.parentElement.classList.add("expand-panel"),d.classList.add("display-open"),s.innerHTML="",ee(t,s),ne(t,n,s)}))}const l=(t,n,a)=>{t.preventDefault();const i=JSON.parse(t.dataTransfer.getData("text")).todoObj,o=JSON.parse(t.dataTransfer.getData("text")).projectObj,s=new e(i._title,i._description,i._dueDate," ",i._id);n.addTodo(s);let d=a.getAll();for(let e in d)if(d[e].id==o._id){let t=d[e];r(t,s.id)}localStorage.setItem("packageManager",JSON.stringify(a))}})(t,i,i.title,i.id,n,a);i.div=o,localStorage.setItem("packageManager",JSON.stringify(t))}))};var ae=n(379),ie=n.n(ae),oe=n(795),se=n.n(oe),de=n(569),le=n.n(de),ue=n(565),ce=n.n(ue),Ae=n(216),me=n.n(Ae),fe=n(589),he=n.n(fe),pe=n(169),Ce={};Ce.styleTagTransform=he(),Ce.setAttributes=ce(),Ce.insert=le().bind(null,"head"),Ce.domAPI=se(),Ce.insertStyleElement=me(),ie()(pe.Z,Ce),pe.Z&&pe.Z.locals&&pe.Z.locals;let ge,ve=new class{projects=[];addProj(e){this.projects.push(e)}getAll(){return this.projects}};if(null!=localStorage.getItem("packageManager")){if(ge=JSON.parse(localStorage.getItem("packageManager")).projects,ge.forEach(((n,r)=>{let a=new t(n._title,n._id,n._div);ve.addProj(a),n.todos.forEach((t=>{let n=new e(t._title,t._description,t._dueDate,"",t._id);a.addTodo(n)}))})),ve.getAll().length<1){let e=new t("All",0);ve.addProj(e)}}else{let e=new t("Project",0);ve.addProj(e)}const ye=(()=>{let e=document.createElement("div");e.classList.add("main-panel");let t=document.createElement("div");t.id="expand-arrow",t.textContent="<";let n=document.createElement("div");return n.classList.add("project-display-panel"),e.appendChild(n),e.appendChild(t),document.body.appendChild(e),n})(),we=((e,n)=>{let r=document.createElement("div");r.classList.add("side-panel");let a=document.createElement("div");a.classList.add("project-manager");let i=document.createElement("button");i.classList.add("new-project-button"),i.textContent="Create A New Project";let o=document.querySelector(".main-panel");const s=document.body;return r.appendChild(a),r.appendChild(i),s.insertBefore(r,o),i.addEventListener("click",(()=>{((e,n,r)=>{let a=document.createElement("div");a.classList.add("create-project-form");let i=document.createElement("form"),o=document.createElement("label");o.setAttribute("for","form-project-name"),o.textContent="Project Name";let s=document.createElement("input");s.setAttribute("type","text"),s.id="form-project-name",s.focus();let d=document.createElement("button");d.textContent="Create",d.classList.add("form-button"),i.appendChild(o),i.appendChild(s),a.appendChild(i),a.appendChild(d),document.body.appendChild(a),d.addEventListener("click",(()=>{""!==s.value?l():a.remove()})),s.onblur=()=>{""!==s.value?l():a.remove()},i.addEventListener("submit",(e=>{e.preventDefault(),""!==s.value?l():a.remove()}));const l=()=>{a.remove();let i=new t(s.value,n.getAll().length);n.addProj(i),re(n,e,r),localStorage.setItem("packageManager",JSON.stringify(n))}})(a,e,n)})),a})(ve,ye);re(ve,we,ye),localStorage.setItem("packageManager",JSON.stringify(ve))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,