(()=>{"use strict";var e={169:(e,t,n)=>{n.d(t,{Z:()=>u});var a=n(537),r=n.n(a),i=n(645),o=n.n(i),s=n(667),d=n.n(s),A=new URL(n(498),n.b),l=o()(r());l.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Roboto:wght@700&display=swap);"]),l.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Gruppo&display=swap);"]),l.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Open+Sans:ital,wght@0,300;0,400;0,500;0,600;0,700;0,800;1,400;1,500;1,600;1,700;1,800&display=swap);"]),l.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Gruppo&display=swap);"]),l.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Roboto:wght@700&display=swap);"]);var c=d()(A);l.push([e.id,'*{margin:0;font-family:"Open Sans",sans-serif;box-sizing:border-box}body{display:flex;justify-content:center;align-items:center;height:100vh;width:100vw;font-weight:700;font-size:18pt;background-color:#303030}@keyframes expand{from{width:0vw;left:100%}to{width:100%;left:0}}@keyframes close{from{width:100%}to{width:0vw;visibility:hidden}}@keyframes openDisplay{from{position:relative;width:100vw;height:100%;right:0%;z-index:2}to{position:relative;width:0vw;right:100%;visibility:hidden}}@keyframes closeDisplay{from{position:relative;width:0vw;right:100%}to{position:relative;width:100vw;height:100%;right:0;z-index:2}}@media(max-width: 500px){.side-panel{background-color:#fff;width:100%;height:100%;position:relative;z-index:2}.display-open{animation-duration:200ms}.display-closed{animation-duration:200ms}#panel-title{padding:2rem;color:rgba(166,69,0,.9843137255);font-size:3rem}}.side-panel{background-color:#303030;height:100%;width:100%;position:relative;z-index:2;display:flex;flex-direction:column;justify-content:space-around;background:#222}#panel-title{padding:2rem;color:rgba(166,69,0,.9843137255);font-size:3rem;text-shadow:1px 3px 5px rgba(0,0,0,.6)}.display-open{animation-name:openDisplay;animation-delay:0ms;animation-duration:500ms;animation-fill-mode:forwards}.display-closed{animation-name:closeDisplay;animation-delay:0ms;animation-duration:500ms;animation-fill-mode:forwards}.project-manager{display:flex;height:30%;width:100%;flex-direction:column;justify-content:space-between;align-items:center}.project{text-shadow:1px 3px 5px rgba(0,0,0,.6);box-shadow:1px 3px 5px #000;justify-content:flex-start;align-items:center;padding:.5rem 1rem .5rem 1rem;display:flex;width:80%;color:rgba(166,69,0,.9843137255);border:2px solid rgba(166,69,0,.9843137255);border-radius:.5rem}.project .project-name{left:1rem;position:relative;text-align:center;font-size:1.7rem}.project .button-panel{position:absolute;z-index:3;left:70%;display:flex}.edit-project{appearance:none;background:none;border:2px solid rgba(166,69,0,.9843137255);border-radius:.4rem;display:flex;justify-content:center;align-items:center;height:1.6rem;width:1.6rem}.edit-icon{width:1rem;height:1rem;border:2px solid rgba(166,69,0,.9843137255);mask-repeat:no-repeat;color:rgba(166,69,0,.9843137255);background:rgba(166,69,0,.9843137255);-webkit-mask-image:url('+c+");mask-image:url("+c+');-webkit-mask-size:1rem;mask-size:1rem}.new-project-button{height:2rem;width:10rem;font-size:1rem;border:2px solid rgba(166,69,0,.9843137255);border-radius:.5rem;color:rgba(166,69,0,.9843137255);background:#303030;position:relative;left:25%}#input-placeholder{position:relative}#input-placeholder .project-name{position:relative;z-index:0}#input-placeholder .project-name #form-project-name{position:absolute;text-align:center;left:0;width:100%;height:1.5rem}#input-placeholder .project-name #create-button{position:absolute;left:10rem}@keyframes expand{from{width:0vw;left:100%}to{width:100%;left:0}}@keyframes close{from{width:100%}to{width:0vw;visibility:hidden}}@keyframes openDisplay{from{position:relative;width:100vw;height:100%;right:0%;z-index:2}to{position:relative;width:0vw;right:100%;visibility:hidden}}@keyframes closeDisplay{from{position:relative;width:0vw;right:100%}to{position:relative;width:100vw;height:100%;right:0;z-index:2}}.main-panel{display:flex;flex-direction:column;justify-content:flex-start;gap:5rem;align-items:center;background-color:#303030;color:rgba(166,69,0,.9843137255);position:relative;height:100%;width:0;left:100%;z-index:0}.expand-panel{animation-name:expand;animation-duration:500ms;animation-fill-mode:forwards}.close-panel{animation-name:close;animation-duration:500ms;animation-fill-mode:forwards}.project-display-panel{padding-top:5rem;width:100%;display:flex;flex-direction:column;justify-content:flex-start;gap:5%;align-items:center}#nav-bar{position:absolute;display:flex;justify-content:center;align-items:center;top:0%;height:3rem;width:100%;padding:1rem;overflow:visible;text-shadow:1px 3px 5px rgba(0,0,0,.6);box-shadow:1px 3px 5px #000}#expand-arrow{font-size:2rem;flex:1 1 auto}#nav-title{flex:5 5 auto}.todo{text-shadow:1px 3px 5px rgba(0,0,0,.6);box-shadow:1px 2px 3px #000;width:90%;padding:1rem;display:flex;border:2px solid rgba(166,69,0,.9843137255);justify-content:space-between;align-items:center;border-radius:.5rem}.checkbox-container{flex:1 1 auto;height:100%;display:flex;justify-content:center;align-items:center}.todo-checkbox{width:20px;height:20px;border:2px solid rgba(166,69,0,.9843137255);background:#303030;border-radius:50%;appearance:none}input[type=checkbox]:checked{width:20px;height:20px;border:2px solid rgba(166,69,0,.9843137255);background:#ffa72e;background:radial-gradient(circle, rgba(166, 69, 0, 0.9843137255) 0%, rgba(166, 69, 0, 0.9843137255) 32%, rgb(0, 0, 0) 69%);border-radius:50%}.title{position:relative;z-index:0;font-size:1rem;font-weight:700;flex:3 3 auto;max-width:40%}.todo-new-title{position:absolute;top:0;left:0;width:100%;height:100%}.due-date{text-align:center;position:relative;z-index:0;font-size:1rem;flex:1 1 auto}.todo-new-date{position:absolute;left:0;width:85%}.remove-button-container{display:flex;justify-content:center;align-items:center}.remove-button-container .remove-todo{appearance:none;background:none;border-radius:50%;border:none;height:1.2rem;width:1.2rem;padding:.1rem;color:rgba(166,69,0,.9843137255);font-family:"Open Sans",sans-serif;font-weight:700;font-size:.8rem;box-shadow:1px 2px 3px #000}.create-todo-form{border:2px solid #000;height:20%;position:absolute;top:50%;left:50%;background-color:gray}#todo-create-new{height:2rem;width:10rem;font-size:1rem;border:2px solid rgba(166,69,0,.9843137255);border-radius:.5rem;color:rgba(166,69,0,.9843137255);background:#303030}',"",{version:3,sources:["webpack://./src/main.scss","webpack://./src/styles/animations.scss","webpack://./src/styles/projectPanel.scss","webpack://./src/styles/mainPanel.scss","webpack://./src/styles/todos.scss"],names:[],mappings:"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",sourcesContent:["@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@700&display=swap');\n@import './styles/animations.scss';\n@import url('https://fonts.googleapis.com/css2?family=Gruppo&display=swap');\n*{\n    margin:0;\n    font-family:'Open Sans',sans-serif;\n    box-sizing: border-box;\n}\nbody{\n    display:flex;\n    justify-content: center;\n    align-items: center;\n    height:100vh;\n    width:100vw;\n    font-weight:700;\n    font-size:18pt;\n    background-color: $bgColor;\n}\n@import './styles/projectPanel.scss';\n@import './styles/mainPanel.scss';\n@import './styles/todos.scss';\n\n\n","$pink-ish:rgba(255, 192, 203, 0.505);\n$goldish:rgba(251,235,215,1);\n$theme-font:#a64500fb;\n$bgColor: #303030;\n\n    @import url('https://fonts.googleapis.com/css2?family=Gruppo&display=swap');\n    @import url('https://fonts.googleapis.com/css2?family=Open+Sans:ital,wght@0,300;0,400;0,500;0,600;0,700;0,800;1,400;1,500;1,600;1,700;1,800&display=swap');\n\n@mixin animations{\n\n    @keyframes expand{\n        from{width:0vw;\n        left: 100%;\n        }\n        to{width:100%;\n        left:0;}\n    }\n    @keyframes close {\n        from{width:100%}\n        to{width:0vw;\n        visibility:hidden;\n    }\n    }\n    @keyframes openDisplay{\n        from{\n            position:relative;\n            width:100vw;\n            height:100%;\n            right:0%;\n            z-index: 2;\n        }\n        to{\n            position:relative;\n            width:0vw;\n            right:100%;\n            visibility: hidden;\n    \n        }\n    }\n    @keyframes closeDisplay{\n        from{\n            position:relative;\n            width:0vw;\n            right:100%;\n        }\n        to{\n            \n            position:relative;\n            width:100vw;\n            height:100%;\n            right:0;\n            z-index: 2;\n        }\n    }\n\n}\n","@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@700&display=swap');\n\n@include animations;\n@media (max-width:500px){\n    .side-panel{\n        background-color:rgb(255, 255, 255);\n        width:100%;\n        height:100%;\n        position:relative;\n        z-index: 2;\n    }\n    .display-open{\n        animation-duration: 200ms;\n    }\n    .display-closed{\n        animation-duration: 200ms;\n    }\n\n    #panel-title{\n        padding:2rem;\n        color:$theme-font;\n        font-size:3rem;\n        \n    }\n\n\n\n\n\n\n\n\n}\n\n\n\n\n\n.side-panel{\n    background-color:$bgColor;\n    height:100%;\n    width:100%;\n    position:relative;\n    z-index: 2;\n    display:flex;\n    flex-direction: column;\n    justify-content: space-around;\n    background: rgb(34, 34, 34);\n    \n    \n}\n#panel-title{\n    padding:2rem;\n    color:$theme-font;\n    font-size:3rem;\n    text-shadow: 1px 3px 5px rgba(0,0,0,0.6);\n}\n.display-open{\n    animation-name:openDisplay;\n    animation-delay:0ms;\n    animation-duration:500ms;\n    animation-fill-mode: forwards;\n}\n.display-closed{\n    animation-name:closeDisplay;\n    animation-delay:0ms;\n    animation-duration:500ms;\n    animation-fill-mode: forwards;\n}\n\n.project-manager{\n    display:flex;\n    height:30%;\n    width:100%;\n    flex-direction:column;\n    justify-content: space-between;\n    align-items: center;\n}\n.project{\n    text-shadow: 1px 3px 5px rgba(0,0,0,0.6);\n    box-shadow: 1px 3px 5px black;\n    $pink-ish:rgba(255, 192, 203, 0.505);\n    $goldish:rgba(251,235,215,1);\n    justify-content: flex-start;\n    align-items: center;\n    padding: .5rem 1rem .5rem 1rem;\n    display:flex;\n    width:80%;\n    color:$theme-font;\n     border:2px solid $theme-font;\n     border-radius: .5rem;\n    // box-shadow:inset 1px 2px 6px 1px pink;\n    .project-name{\n        left:1rem;\n        position: relative;\n        text-align: center;\n        font-size:1.7rem;\n\n    }\n   .button-panel{\n        position:absolute;\n        z-index:3;\n        left:70%;\n        display:flex;\n    \n   }\n}\n.edit-project{\n    appearance:none;\n    background:none;\n    border:2px solid $theme-font;\n    border-radius: .4rem;\n   display: flex;\n   justify-content: center;\n   align-items: center;\n   height:1.6rem;\n   width:1.6rem;\n}\n.edit-icon{\n    width: 1rem;\n    height: 1rem;\n    border:2px solid $theme-font;\n    mask-repeat: no-repeat;\n    color:$theme-font;\n    background: $theme-font;\n    -webkit-mask-image: url(./img/pencil.svg);\n    mask-image: url(./img/pencil.svg);\n    -webkit-mask-size: 1rem;\n    mask-size: 1rem;\n\n}\n\n.new-project-button{\n    height:2rem;\n    width:10rem;\n    font-size:1rem;\n    border:2px solid $theme-font;\n    border-radius:.5rem;\n    color:$theme-font;\n    background: rgb(48, 48, 48);\n    position:relative;\n    left:25%;\n\n}\n#input-placeholder{\n    position:relative;\n    \n    .project-name{\n        position:relative;\n        z-index:0;\n       \n        \n        #form-project-name{\n            position:absolute;\n            \n            text-align: center;\n            left:0;\n            width:100%;\n            height:1.5rem;\n            \n           \n        }\n        #create-button{\n            position:absolute;\n            left:10rem;\n        }\n    }\n}\n\n\n","@include animations;\n.main-panel{\n    display:flex;\n    flex-direction: column;\n    justify-content: flex-start;\n    gap:5rem;\n    align-items: center;\n    background-color: $bgColor;\n    color:$theme-font;\n    position:relative;\n    height:100%;\n    width:0;\n    left:100%;\n    z-index:0;\n\n}\n.expand-panel{\n    animation-name:expand;\n    animation-duration: 500ms;\n    animation-fill-mode: forwards;\n}\n.close-panel{\n    animation-name:close;\n    animation-duration: 500ms;\n    animation-fill-mode: forwards;\n}\n.project-display-panel{\n    \n    padding-top:5rem;\n    width:100%;\n    display:flex;\n    flex-direction: column;\n    justify-content: flex-start;\n    gap:5%;\n    align-items: center;\n}\n\n#nav-bar{\n    position:absolute;\n    display:flex;\n    justify-content: center;\n    align-items: center;\n    top:0%;\n    height:3rem;\n    width:100%;\n    padding:1rem;\n   \n    overflow: visible;\n    \n    text-shadow: 1px 3px 5px rgba(0,0,0,0.6);\n    box-shadow: 1px 3px 5px black;\n}\n\n#expand-arrow{\n    font-size:2rem;\n    flex:1 1 auto;\n}\n#nav-title{\n    flex :5 5 auto;\n}\n",".todo{\n    text-shadow: 1px 3px 5px rgba(0,0,0,0.6);\n    box-shadow: 1px 2px 3px black;\n    width:90%;\n    padding:1rem;\n    display:flex;\n    border:2px solid $theme-font;\n    justify-content: space-between;\n    align-items: center;\n    border-radius:.5rem;\n}\n.checkbox-container{\n    flex:1 1 auto;\nheight:100%;\ndisplay:flex;\njustify-content: center;\nalign-items: center;\n}\n.todo-checkbox{\n    \n    width:20px;\n    height:20px;\n    border:2px solid $theme-font;\n    background:$bgColor;\n    border-radius:50%;\n    appearance: none;\n  \n}\ninput[type='checkbox']:checked{\n    width:20px;\n    height:20px;\n    border:2px solid $theme-font;\n    background: rgb(255,167,46);\n    background: radial-gradient(circle, $theme-font 0%,$theme-font 32%, rgba(0,0,0,1) 69%); \n    border-radius:50%;\n  \n}\n.title{\n    position:relative;\n    z-index: 0;\n    font-size:1rem;\n    font-weight:700;\n    flex: 3 3 auto;\n    max-width: 40%;\n}\n.todo-new-title{\n    position:absolute;\n    top:0;\n    left:0;\n    width:100%;\n    height:100%;\n}\n.due-date{\n    text-align: center;\n    position: relative;\n        z-index: 0;\n        font-size:1rem;\n        flex: 1 1 auto;\n}\n.todo-new-date{\n    position: absolute;\n        left: 0;\n        width: 85%;\n}\n.remove-button-container{\n    display:flex;\n    justify-content: center;\n    align-items: center;\n    .remove-todo{\n        appearance:none;\n        background:none;\n        border-radius: 50%;\n        border:none;\n        height:1.2rem;\n        width:1.2rem;\n        padding:.1rem;\n        color:$theme-font;\n        font-family:'Open Sans', sans-serif;\n        font-weight:700;\n        font-size:.8rem;\n        box-shadow:1px 2px 3px black;\n        \n\n    }\n}\n\n.create-todo-form{\n    border: 2px solid black;\n        height: 20%;\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        background-color: gray;\n}\n\n#todo-create-new{\n    height:2rem;\n    width:10rem;\n    font-size:1rem;\n    border:2px solid $theme-font;\n    border-radius:.5rem;\n    color:$theme-font;\n    background: rgb(48, 48, 48);\n}"],sourceRoot:""}]);const u=l},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",a=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),a&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),a&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,a,r,i){"string"==typeof e&&(e=[[null,e,void 0]]);var o={};if(a)for(var s=0;s<this.length;s++){var d=this[s][0];null!=d&&(o[d]=!0)}for(var A=0;A<e.length;A++){var l=[].concat(e[A]);a&&o[l[0]]||(void 0!==i&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=i),n&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=n):l[2]=n),r&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=r):l[4]="".concat(r)),t.push(l))}},t}},667:e=>{e.exports=function(e,t){return t||(t={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),/["'() \t\n]|(%20)/.test(e)||t.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),i="/*# ".concat(r," */");return[t].concat([i]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,a=0;a<t.length;a++)if(t[a].identifier===e){n=a;break}return n}function a(e,a){for(var i={},o=[],s=0;s<e.length;s++){var d=e[s],A=a.base?d[0]+a.base:d[0],l=i[A]||0,c="".concat(A," ").concat(l);i[A]=l+1;var u=n(c),m={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==u)t[u].references++,t[u].updater(m);else{var p=r(m,a);a.byIndex=s,t.splice(s,0,{identifier:c,updater:p,references:1})}o.push(c)}return o}function r(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,r){var i=a(e=e||[],r=r||{});return function(e){e=e||[];for(var o=0;o<i.length;o++){var s=n(i[o]);t[s].references--}for(var d=a(e,r),A=0;A<i.length;A++){var l=n(i[A]);0===t[l].references&&(t[l].updater(),t.splice(l,1))}i=d}}},569:e=>{var t={};e.exports=function(e,n){var a=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var a="";n.supports&&(a+="@supports (".concat(n.supports,") {")),n.media&&(a+="@media ".concat(n.media," {"));var r=void 0!==n.layer;r&&(a+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),a+=n.css,r&&(a+="}"),n.media&&(a+="}"),n.supports&&(a+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(a+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(a,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},498:(e,t,n)=>{e.exports=n.p+"23afb4ce8bbef790e5ef.svg"}},t={};function n(a){var r=t[a];if(void 0!==r)return r.exports;var i=t[a]={id:a,exports:{}};return e[a](i,i.exports,n),i.exports}n.m=e,n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var a in t)n.o(t,a)&&!n.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:t[a]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var a=t.getElementsByTagName("script");a.length&&(e=a[a.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),n.b=document.baseURI||self.location.href,n.nc=void 0,(()=>{class e{constructor(e,t,n,a,r){this._title=e,this._description=t,this._dueDate=n,this._priority=a,this.id=r}get title(){return this._title}get description(){return this._description}get dueDate(){return this._dueDate}get priority(){return this._priority}get id(){return this._id}set title(e){this._title=e}set description(e){this._description=e}set dueDate(e){this._dueDate=e}set priority(e){this._priority=e}set id(e){this._id=e}}class t{todos=[];constructor(e,t,n){this._title=e,this._id=t,this._div=n}get title(){return this._title}set title(e){this._title=e}get id(){return this._id}get div(){return this._div}set div(e){this._div=e}addTodo(e){this.todos.push(e)}getAll(){return this.todos}}const a=(e,t)=>{let n=e.getAll();for(let e in n)n[e].id==t&&n.splice(e,1)};function r(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function i(e){return i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i(e)}function o(e){return o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o(e)}function s(e){r(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"===o(e)&&"[object Date]"===t?new Date(e.getTime()):"number"==typeof e||"[object Number]"===t?new Date(e):("string"!=typeof e&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function d(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function A(e){r(1,arguments);var t=s(e),n=t.getUTCDay(),a=(n<1?7:0)+n-1;return t.setUTCDate(t.getUTCDate()-a),t.setUTCHours(0,0,0,0),t}function l(e){r(1,arguments);var t=s(e),n=t.getUTCFullYear(),a=new Date(0);a.setUTCFullYear(n+1,0,4),a.setUTCHours(0,0,0,0);var i=A(a),o=new Date(0);o.setUTCFullYear(n,0,4),o.setUTCHours(0,0,0,0);var d=A(o);return t.getTime()>=i.getTime()?n+1:t.getTime()>=d.getTime()?n:n-1}var c=6048e5;var u={};function m(){return u}function p(e,t){var n,a,i,o,A,l,c,u;r(1,arguments);var p=m(),h=d(null!==(n=null!==(a=null!==(i=null!==(o=null==t?void 0:t.weekStartsOn)&&void 0!==o?o:null==t||null===(A=t.locale)||void 0===A||null===(l=A.options)||void 0===l?void 0:l.weekStartsOn)&&void 0!==i?i:p.weekStartsOn)&&void 0!==a?a:null===(c=p.locale)||void 0===c||null===(u=c.options)||void 0===u?void 0:u.weekStartsOn)&&void 0!==n?n:0);if(!(h>=0&&h<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var C=s(e),f=C.getUTCDay(),g=(f<h?7:0)+f-h;return C.setUTCDate(C.getUTCDate()-g),C.setUTCHours(0,0,0,0),C}function h(e,t){var n,a,i,o,A,l,c,u;r(1,arguments);var h=s(e),C=h.getUTCFullYear(),f=m(),g=d(null!==(n=null!==(a=null!==(i=null!==(o=null==t?void 0:t.firstWeekContainsDate)&&void 0!==o?o:null==t||null===(A=t.locale)||void 0===A||null===(l=A.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==i?i:f.firstWeekContainsDate)&&void 0!==a?a:null===(c=f.locale)||void 0===c||null===(u=c.options)||void 0===u?void 0:u.firstWeekContainsDate)&&void 0!==n?n:1);if(!(g>=1&&g<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var b=new Date(0);b.setUTCFullYear(C+1,0,g),b.setUTCHours(0,0,0,0);var v=p(b,t),w=new Date(0);w.setUTCFullYear(C,0,g),w.setUTCHours(0,0,0,0);var y=p(w,t);return h.getTime()>=v.getTime()?C+1:h.getTime()>=y.getTime()?C:C-1}var C=6048e5;function f(e,t){for(var n=e<0?"-":"",a=Math.abs(e).toString();a.length<t;)a="0"+a;return n+a}const g=function(e,t){var n=e.getUTCFullYear(),a=n>0?n:1-n;return f("yy"===t?a%100:a,t.length)},b=function(e,t){var n=e.getUTCMonth();return"M"===t?String(n+1):f(n+1,2)},v=function(e,t){return f(e.getUTCDate(),t.length)},w=function(e,t){return f(e.getUTCHours()%12||12,t.length)},y=function(e,t){return f(e.getUTCHours(),t.length)},x=function(e,t){return f(e.getUTCMinutes(),t.length)},k=function(e,t){return f(e.getUTCSeconds(),t.length)},E=function(e,t){var n=t.length,a=e.getUTCMilliseconds();return f(Math.floor(a*Math.pow(10,n-3)),t.length)};var B={G:function(e,t,n){var a=e.getUTCFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return n.era(a,{width:"abbreviated"});case"GGGGG":return n.era(a,{width:"narrow"});default:return n.era(a,{width:"wide"})}},y:function(e,t,n){if("yo"===t){var a=e.getUTCFullYear(),r=a>0?a:1-a;return n.ordinalNumber(r,{unit:"year"})}return g(e,t)},Y:function(e,t,n,a){var r=h(e,a),i=r>0?r:1-r;return"YY"===t?f(i%100,2):"Yo"===t?n.ordinalNumber(i,{unit:"year"}):f(i,t.length)},R:function(e,t){return f(l(e),t.length)},u:function(e,t){return f(e.getUTCFullYear(),t.length)},Q:function(e,t,n){var a=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"Q":return String(a);case"QQ":return f(a,2);case"Qo":return n.ordinalNumber(a,{unit:"quarter"});case"QQQ":return n.quarter(a,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(a,{width:"narrow",context:"formatting"});default:return n.quarter(a,{width:"wide",context:"formatting"})}},q:function(e,t,n){var a=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"q":return String(a);case"qq":return f(a,2);case"qo":return n.ordinalNumber(a,{unit:"quarter"});case"qqq":return n.quarter(a,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(a,{width:"narrow",context:"standalone"});default:return n.quarter(a,{width:"wide",context:"standalone"})}},M:function(e,t,n){var a=e.getUTCMonth();switch(t){case"M":case"MM":return b(e,t);case"Mo":return n.ordinalNumber(a+1,{unit:"month"});case"MMM":return n.month(a,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(a,{width:"narrow",context:"formatting"});default:return n.month(a,{width:"wide",context:"formatting"})}},L:function(e,t,n){var a=e.getUTCMonth();switch(t){case"L":return String(a+1);case"LL":return f(a+1,2);case"Lo":return n.ordinalNumber(a+1,{unit:"month"});case"LLL":return n.month(a,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(a,{width:"narrow",context:"standalone"});default:return n.month(a,{width:"wide",context:"standalone"})}},w:function(e,t,n,a){var i=function(e,t){r(1,arguments);var n=s(e),a=p(n,t).getTime()-function(e,t){var n,a,i,o,s,A,l,c;r(1,arguments);var u=m(),C=d(null!==(n=null!==(a=null!==(i=null!==(o=null==t?void 0:t.firstWeekContainsDate)&&void 0!==o?o:null==t||null===(s=t.locale)||void 0===s||null===(A=s.options)||void 0===A?void 0:A.firstWeekContainsDate)&&void 0!==i?i:u.firstWeekContainsDate)&&void 0!==a?a:null===(l=u.locale)||void 0===l||null===(c=l.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==n?n:1),f=h(e,t),g=new Date(0);return g.setUTCFullYear(f,0,C),g.setUTCHours(0,0,0,0),p(g,t)}(n,t).getTime();return Math.round(a/C)+1}(e,a);return"wo"===t?n.ordinalNumber(i,{unit:"week"}):f(i,t.length)},I:function(e,t,n){var a=function(e){r(1,arguments);var t=s(e),n=A(t).getTime()-function(e){r(1,arguments);var t=l(e),n=new Date(0);return n.setUTCFullYear(t,0,4),n.setUTCHours(0,0,0,0),A(n)}(t).getTime();return Math.round(n/c)+1}(e);return"Io"===t?n.ordinalNumber(a,{unit:"week"}):f(a,t.length)},d:function(e,t,n){return"do"===t?n.ordinalNumber(e.getUTCDate(),{unit:"date"}):v(e,t)},D:function(e,t,n){var a=function(e){r(1,arguments);var t=s(e),n=t.getTime();t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0);var a=n-t.getTime();return Math.floor(a/864e5)+1}(e);return"Do"===t?n.ordinalNumber(a,{unit:"dayOfYear"}):f(a,t.length)},E:function(e,t,n){var a=e.getUTCDay();switch(t){case"E":case"EE":case"EEE":return n.day(a,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(a,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},e:function(e,t,n,a){var r=e.getUTCDay(),i=(r-a.weekStartsOn+8)%7||7;switch(t){case"e":return String(i);case"ee":return f(i,2);case"eo":return n.ordinalNumber(i,{unit:"day"});case"eee":return n.day(r,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(r,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},c:function(e,t,n,a){var r=e.getUTCDay(),i=(r-a.weekStartsOn+8)%7||7;switch(t){case"c":return String(i);case"cc":return f(i,t.length);case"co":return n.ordinalNumber(i,{unit:"day"});case"ccc":return n.day(r,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(r,{width:"narrow",context:"standalone"});case"cccccc":return n.day(r,{width:"short",context:"standalone"});default:return n.day(r,{width:"wide",context:"standalone"})}},i:function(e,t,n){var a=e.getUTCDay(),r=0===a?7:a;switch(t){case"i":return String(r);case"ii":return f(r,t.length);case"io":return n.ordinalNumber(r,{unit:"day"});case"iii":return n.day(a,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(a,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},a:function(e,t,n){var a=e.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(a,{width:"narrow",context:"formatting"});default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},b:function(e,t,n){var a,r=e.getUTCHours();switch(a=12===r?"noon":0===r?"midnight":r/12>=1?"pm":"am",t){case"b":case"bb":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(a,{width:"narrow",context:"formatting"});default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},B:function(e,t,n){var a,r=e.getUTCHours();switch(a=r>=17?"evening":r>=12?"afternoon":r>=4?"morning":"night",t){case"B":case"BB":case"BBB":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(a,{width:"narrow",context:"formatting"});default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},h:function(e,t,n){if("ho"===t){var a=e.getUTCHours()%12;return 0===a&&(a=12),n.ordinalNumber(a,{unit:"hour"})}return w(e,t)},H:function(e,t,n){return"Ho"===t?n.ordinalNumber(e.getUTCHours(),{unit:"hour"}):y(e,t)},K:function(e,t,n){var a=e.getUTCHours()%12;return"Ko"===t?n.ordinalNumber(a,{unit:"hour"}):f(a,t.length)},k:function(e,t,n){var a=e.getUTCHours();return 0===a&&(a=24),"ko"===t?n.ordinalNumber(a,{unit:"hour"}):f(a,t.length)},m:function(e,t,n){return"mo"===t?n.ordinalNumber(e.getUTCMinutes(),{unit:"minute"}):x(e,t)},s:function(e,t,n){return"so"===t?n.ordinalNumber(e.getUTCSeconds(),{unit:"second"}):k(e,t)},S:function(e,t){return E(e,t)},X:function(e,t,n,a){var r=(a._originalDate||e).getTimezoneOffset();if(0===r)return"Z";switch(t){case"X":return T(r);case"XXXX":case"XX":return D(r);default:return D(r,":")}},x:function(e,t,n,a){var r=(a._originalDate||e).getTimezoneOffset();switch(t){case"x":return T(r);case"xxxx":case"xx":return D(r);default:return D(r,":")}},O:function(e,t,n,a){var r=(a._originalDate||e).getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+S(r,":");default:return"GMT"+D(r,":")}},z:function(e,t,n,a){var r=(a._originalDate||e).getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+S(r,":");default:return"GMT"+D(r,":")}},t:function(e,t,n,a){var r=a._originalDate||e;return f(Math.floor(r.getTime()/1e3),t.length)},T:function(e,t,n,a){return f((a._originalDate||e).getTime(),t.length)}};function S(e,t){var n=e>0?"-":"+",a=Math.abs(e),r=Math.floor(a/60),i=a%60;if(0===i)return n+String(r);var o=t||"";return n+String(r)+o+f(i,2)}function T(e,t){return e%60==0?(e>0?"-":"+")+f(Math.abs(e)/60,2):D(e,t)}function D(e,t){var n=t||"",a=e>0?"-":"+",r=Math.abs(e);return a+f(Math.floor(r/60),2)+n+f(r%60,2)}const M=B;var j=function(e,t){switch(e){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});default:return t.date({width:"full"})}},L=function(e,t){switch(e){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});default:return t.time({width:"full"})}};const I={p:L,P:function(e,t){var n,a=e.match(/(P+)(p+)?/)||[],r=a[1],i=a[2];if(!i)return j(e,t);switch(r){case"P":n=t.dateTime({width:"short"});break;case"PP":n=t.dateTime({width:"medium"});break;case"PPP":n=t.dateTime({width:"long"});break;default:n=t.dateTime({width:"full"})}return n.replace("{{date}}",j(r,t)).replace("{{time}}",L(i,t))}};var U=["D","DD"],P=["YY","YYYY"];function W(e,t,n){if("YYYY"===e)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===e)throw new RangeError("Use `yy` instead of `YY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===e)throw new RangeError("Use `d` instead of `D` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===e)throw new RangeError("Use `dd` instead of `DD` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var O={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function z(e){return function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=t.width?String(t.width):e.defaultWidth;return e.formats[n]||e.formats[e.defaultWidth]}}const Y={date:z({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:z({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:z({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var N={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function J(e){return function(t,n){var a;if("formatting"===(null!=n&&n.context?String(n.context):"standalone")&&e.formattingValues){var r=e.defaultFormattingWidth||e.defaultWidth,i=null!=n&&n.width?String(n.width):r;a=e.formattingValues[i]||e.formattingValues[r]}else{var o=e.defaultWidth,s=null!=n&&n.width?String(n.width):e.defaultWidth;a=e.values[s]||e.values[o]}return a[e.argumentCallback?e.argumentCallback(t):t]}}const q={ordinalNumber:function(e,t){var n=Number(e),a=n%100;if(a>20||a<10)switch(a%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:J({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:J({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return e-1}}),month:J({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:J({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:J({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function G(e){return function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},a=n.width,r=a&&e.matchPatterns[a]||e.matchPatterns[e.defaultMatchWidth],i=t.match(r);if(!i)return null;var o,s=i[0],d=a&&e.parsePatterns[a]||e.parsePatterns[e.defaultParseWidth],A=Array.isArray(d)?function(e,t){for(var n=0;n<e.length;n++)if(e[n].test(s))return n}(d):function(e,t){for(var n in e)if(e.hasOwnProperty(n)&&e[n].test(s))return n}(d);return o=e.valueCallback?e.valueCallback(A):A,{value:o=n.valueCallback?n.valueCallback(o):o,rest:t.slice(s.length)}}}var _,H={ordinalNumber:(_={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.match(_.matchPattern);if(!n)return null;var a=n[0],r=e.match(_.parsePattern);if(!r)return null;var i=_.valueCallback?_.valueCallback(r[0]):r[0];return{value:i=t.valueCallback?t.valueCallback(i):i,rest:e.slice(a.length)}}),era:G({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:G({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:G({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:G({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:G({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const R={code:"en-US",formatDistance:function(e,t,n){var a,r=O[e];return a="string"==typeof r?r:1===t?r.one:r.other.replace("{{count}}",t.toString()),null!=n&&n.addSuffix?n.comparison&&n.comparison>0?"in "+a:a+" ago":a},formatLong:Y,formatRelative:function(e,t,n,a){return N[e]},localize:q,match:H,options:{weekStartsOn:0,firstWeekContainsDate:1}};var $=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,F=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,Q=/^'([^]*?)'?$/,X=/''/g,K=/[a-zA-Z]/;function Z(e,t,n){var a,o,A,l,c,u,p,h,C,f,g,b,v,w,y,x,k,E;r(2,arguments);var B=String(t),S=m(),T=null!==(a=null!==(o=null==n?void 0:n.locale)&&void 0!==o?o:S.locale)&&void 0!==a?a:R,D=d(null!==(A=null!==(l=null!==(c=null!==(u=null==n?void 0:n.firstWeekContainsDate)&&void 0!==u?u:null==n||null===(p=n.locale)||void 0===p||null===(h=p.options)||void 0===h?void 0:h.firstWeekContainsDate)&&void 0!==c?c:S.firstWeekContainsDate)&&void 0!==l?l:null===(C=S.locale)||void 0===C||null===(f=C.options)||void 0===f?void 0:f.firstWeekContainsDate)&&void 0!==A?A:1);if(!(D>=1&&D<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var j=d(null!==(g=null!==(b=null!==(v=null!==(w=null==n?void 0:n.weekStartsOn)&&void 0!==w?w:null==n||null===(y=n.locale)||void 0===y||null===(x=y.options)||void 0===x?void 0:x.weekStartsOn)&&void 0!==v?v:S.weekStartsOn)&&void 0!==b?b:null===(k=S.locale)||void 0===k||null===(E=k.options)||void 0===E?void 0:E.weekStartsOn)&&void 0!==g?g:0);if(!(j>=0&&j<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!T.localize)throw new RangeError("locale must contain localize property");if(!T.formatLong)throw new RangeError("locale must contain formatLong property");var L=s(e);if(!function(e){if(r(1,arguments),!function(e){return r(1,arguments),e instanceof Date||"object"===i(e)&&"[object Date]"===Object.prototype.toString.call(e)}(e)&&"number"!=typeof e)return!1;var t=s(e);return!isNaN(Number(t))}(L))throw new RangeError("Invalid time value");var O=function(e){var t=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return t.setUTCFullYear(e.getFullYear()),e.getTime()-t.getTime()}(L),z=function(e,t){return r(2,arguments),function(e,t){r(2,arguments);var n=s(e).getTime(),a=d(t);return new Date(n+a)}(e,-d(t))}(L,O),Y={firstWeekContainsDate:D,weekStartsOn:j,locale:T,_originalDate:L};return B.match(F).map((function(e){var t=e[0];return"p"===t||"P"===t?(0,I[t])(e,T.formatLong):e})).join("").match($).map((function(a){if("''"===a)return"'";var r,i,o=a[0];if("'"===o)return(i=(r=a).match(Q))?i[1].replace(X,"'"):r;var s,d=M[o];if(d)return null!=n&&n.useAdditionalWeekYearTokens||(s=a,-1===P.indexOf(s))||W(a,t,String(e)),null!=n&&n.useAdditionalDayOfYearTokens||!function(e){return-1!==U.indexOf(e)}(a)||W(a,t,String(e)),d(z,a,T.localize,Y);if(o.match(K))throw new RangeError("Format string contains an unescaped latin alphabet character `"+o+"`");return a})).join("")}const V=(e,t,n,r)=>{const i=document.querySelector("#expand-arrow"),o=document.querySelector(".side-panel");i.ondragover=()=>{t.parentElement.classList.remove("expand-panel"),o.classList.remove("display-open"),t.parentElement.classList.add("close-panel"),o.classList.add("display-closed")};let s=document.createElement("div");s.classList.add("todo"),s.id="todo-"+e.id,s.setAttribute("draggable","true");let d=document.createElement("input");d.setAttribute("type","checkbox"),d.classList.add("todo-checkbox");let A=document.createElement("p");A.classList.add("title"),A.textContent=e.title;let l=document.createElement("p");l.classList.add("due-date"),l.textContent=e.dueDate;let c=document.createElement("input");c.setAttribute("type","date"),c.classList.add("todo-new-date"),c.value=e.dueDate;let u=document.createElement("button");u.classList.add("remove-todo"),u.textContent="X";let m=document.createElement("div");m.classList.add("remove-button-container"),m.appendChild(u);let p=document.createElement("div");p.classList.add("checkbox-container"),p.appendChild(d),s.appendChild(p),s.appendChild(A),s.appendChild(l),s.appendChild(m),t.appendChild(s);let h=document.createElement("input");return h.classList.add("todo-new-title"),h.value=e.title,u.addEventListener("click",(()=>{a(n,e.id),s.remove(),localStorage.setItem("packageManager",JSON.stringify(r))})),A.addEventListener("click",(()=>{A.appendChild(h),h.focus()})),h.onblur=()=>{e.title=h.value,A.textContent=e.title,h.remove(),localStorage.setItem("packageManager",JSON.stringify(r))},h.addEventListener("keyup",(({key:e})=>{"Enter"===e&&h.blur()})),s.ondragstart=t=>{const a={todoObj:e,projectObj:n};t.dataTransfer.setData("text",JSON.stringify(a))},s.ondragend=e=>{e.preventDefault(),te(r,n,t)},l.addEventListener("click",(()=>{l.appendChild(c),c.focus()})),c.onblur=()=>{if(""!==c.value){let t=Z(new Date(`${c.value}T00:00`),"MM/dd/yyyy");e.dueDate=t,l.valueAsDate=t,l.textContent=e.dueDate,localStorage.setItem("packageManager",JSON.stringify(r))}c.remove()},c.addEventListener("keyup",(({key:e})=>{"Enter"===e&&c.blur()})),s},ee=(e,t)=>{e.getAll().forEach((n=>{n.getAll().forEach((a=>{V(a,t,n,e)}))}));let n=t.children;n=Array.prototype.slice.call(n),n.sort(((e,t)=>new Date(e.childNodes[2].innerHTML)-new Date(t.childNodes[2].innerHTML)));let a=t;a.innerHTML="";for(let e=0;e<n.length;e++)"Set Date"!==n[e].childNodes[2]?a.appendChild(n[e]):a.insertBefore(n[e],a.firstChild)},te=(e,t,n)=>{n.innerHTML="","All"===t.title?ee(e,n):t.getAll().forEach((a=>{V(a,n,t,e)}))},ne=(t,n,a)=>{const r=document.querySelector(".main-panel");let i=document.createElement("button");i.classList.add("create-todo-form-button"),i.id="todo-create-new",i.textContent="Create new Todo",i.addEventListener("click",(()=>{((t,n,a)=>{let r=document.createElement("div");r.classList.add("create-todo-form");let i=document.createElement("form"),o=document.createElement("label");o.setAttribute("for","form-todo-title"),o.textContent="Title";let s=document.createElement("input");s.setAttribute("type","text"),s.id="form-Todo-title";let d=document.createElement("label");d.setAttribute("for","form-todo-dueDate"),d.textContent="Due Date";let A=document.createElement("input");A.setAttribute("type","date"),A.id="form-todo-dueDate";let l=document.createElement("label");l.setAttribute("for","form-todo-priority"),l.textContent="Priority";let c=document.createElement("input");c.setAttribute("type","text"),c.id="form-todo-priority";let u=document.createElement("button");u.textContent="Create",u.classList.add("form-button-todo"),i.appendChild(o),i.appendChild(s),i.appendChild(d),i.appendChild(A),r.appendChild(i),r.appendChild(u),document.body.appendChild(r),s.focus(),s.onblur=()=>{},i.addEventListener("submit",(e=>{e.preventDefault(),m()})),u.addEventListener("click",(()=>{m()}));const m=()=>{let i;if(i=""!==A.value?Z(new Date(`${A.value}T00:00`),"MM/dd/yyyy"):"Set Date",""!==s.value){let o=new e(s.value," ",i,c.value,(()=>{let e=0;return t.getAll().forEach((t=>{t.getAll().forEach((t=>e+=1))})),e})());n.addTodo(o),r.remove(),te(t,n,a),localStorage.setItem("packageManager",JSON.stringify(t))}}})(t,n,a)}));let o=document.getElementById("todo-create-new");return document.body.contains(o)&&o.remove(),r.appendChild(i),i},ae=(t,n,r)=>{n.innerHTML="",t.projects.forEach((i=>{const o=((t,n,r,i,o,s)=>{const d=document.querySelector("#nav-title"),A=o.parentElement;if(document.querySelector("#expand-arrow").onclick=()=>{s.parentElement.classList.remove("expand-panel"),A.classList.remove("display-open"),s.parentElement.classList.add("close-panel"),A.classList.add("display-closed")},"All"!==n.title){let e=document.createElement("div"),r=document.createElement("button");r.classList.add("edit-project");let c=document.createElement("img");c.classList.add("edit-icon"),r.appendChild(c),e.classList.add("project"),e.id="project-"+i;let u=document.createElement("p");u.classList.add("project-name"),u.textContent=n.title;let m=document.createElement("input");m.id="new-name-input",m.value=n.title;let p=document.createElement("button");p.classList.add(".project-remove-button"),p.textContent="X",e.appendChild(u);let h=document.createElement("div");h.classList.add("button-panel"),h.appendChild(r),h.appendChild(p),e.appendChild(h),o.appendChild(e),e.addEventListener("drop",(e=>l(e,n,t))),p.addEventListener("click",(()=>{a(t,n.id),localStorage.setItem("packageManager",JSON.stringify(t)),e.remove()})),r.addEventListener("click",(()=>{u.remove(),e.appendChild(m)})),m.onblur=()=>{u.textContent=m.value,n.title=m.value,m.remove(),e.insertBefore(u,h),localStorage.setItem("packageManager",JSON.stringify(t))},m.addEventListener("keyup",(({key:e})=>{"Enter"===e&&m.blur()})),u.addEventListener("click",(function(){s.parentElement.classList.contains("close-panel")&&(s.parentElement.classList.remove("close-panel"),A.classList.remove("display-closed")),s.parentElement.classList.add("expand-panel"),A.classList.add("display-open"),s.innerHTML="",d.textContent=n.title,te(t,n,s),ne(t,n,s)})),e.addEventListener("dragover",(e=>{e.preventDefault()}))}else{let e=document.createElement("div");e.classList.add("project"),e.id="all-projects-container";let a=document.createElement("p");a.classList.add("project-name"),a.textContent=n.title,e.appendChild(a),o.appendChild(e),a.addEventListener("click",(function(){s.parentElement.classList.contains("close-panel")&&(s.parentElement.classList.remove("close-panel"),A.classList.remove("display-closed")),s.parentElement.classList.add("expand-panel"),A.classList.add("display-open"),s.innerHTML="",d.textContent=n.title,ee(t,s),ne(t,n,s)}))}const l=(t,n,r)=>{t.preventDefault();const i=JSON.parse(t.dataTransfer.getData("text")).todoObj,o=JSON.parse(t.dataTransfer.getData("text")).projectObj,s=new e(i._title,i._description,i._dueDate," ",i._id);n.addTodo(s);let d=r.getAll();for(let e in d)if(d[e].id==o._id){let t=d[e];a(t,s.id)}localStorage.setItem("packageManager",JSON.stringify(r))}})(t,i,i.title,i.id,n,r);i.div=o,localStorage.setItem("packageManager",JSON.stringify(t))}))};var re=n(379),ie=n.n(re),oe=n(795),se=n.n(oe),de=n(569),Ae=n.n(de),le=n(565),ce=n.n(le),ue=n(216),me=n.n(ue),pe=n(589),he=n.n(pe),Ce=n(169),fe={};fe.styleTagTransform=he(),fe.setAttributes=ce(),fe.insert=Ae().bind(null,"head"),fe.domAPI=se(),fe.insertStyleElement=me(),ie()(Ce.Z,fe),Ce.Z&&Ce.Z.locals&&Ce.Z.locals;let ge,be=new class{projects=[];addProj(e){this.projects.push(e)}getAll(){return this.projects}};if(null!=localStorage.getItem("packageManager")){if(ge=JSON.parse(localStorage.getItem("packageManager")).projects,ge.forEach(((n,a)=>{let r=new t(n._title,n._id,n._div);be.addProj(r),n.todos.forEach((t=>{let n=new e(t._title,t._description,t._dueDate,"",t._id);r.addTodo(n)}))})),be.getAll().length<1){let e=new t("All",0);be.addProj(e)}}else{let e=new t("Project",0);be.addProj(e)}const ve=(()=>{let e=document.createElement("div");e.classList.add("main-panel");let t=document.createElement("div");t.id="nav-bar";let n=document.createElement("div");n.id="expand-arrow",n.textContent="<";let a=document.createElement("div");a.classList.add("project-display-panel");let r=document.createElement("p");return r.textContent="Project Title",r.id="nav-title",t.appendChild(n),t.appendChild(r),e.appendChild(t),e.appendChild(a),document.body.appendChild(e),a})(),we=((e,n)=>{let a=document.createElement("div");a.classList.add("side-panel");let r=document.createElement("div");r.innerHTML="<h2 id = panel-title>Projects</h2>";let i=document.createElement("div");i.classList.add("project-manager");let o=document.createElement("button");o.classList.add("new-project-button"),o.textContent="+ Add Project";let s=document.querySelector(".main-panel");const d=document.body;return a.appendChild(r),a.appendChild(i),a.appendChild(o),d.insertBefore(a,s),o.addEventListener("click",(()=>{((e,n,a)=>{let r=document.createElement("input");r.setAttribute("type","text"),r.id="form-project-name";let i=document.createElement("button");i.textContent="Create",i.id="create-button";let o=document.createElement("div");o.id="input-placeholder",o.innerHTML='<p class = "project-name" >new project</p>',o.classList.add("project"),o.children[0].appendChild(r),o.children[0].appendChild(i),e.appendChild(o),r.focus(),r.addEventListener("keyup",(({key:e})=>{"Enter"===e&&r.blur()})),i.addEventListener("click",(()=>{""!==r.value?s():newProjectFormDiv.remove()})),r.onblur=()=>{""!==r.value?s():newProjectFormDiv.remove()};const s=()=>{let i=new t(r.value,n.getAll().length);n.addProj(i),ae(n,e,a),localStorage.setItem("packageManager",JSON.stringify(n))}})(i,e,n)})),i})(be,ve);ae(be,we,ve),localStorage.setItem("packageManager",JSON.stringify(be))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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RUFBRXJXLFVBQzFCLFVBQU5BLEdBQ0RnYixFQUFVdEUsTUFDWixJQUdGNEIsRUFBYWpDLGlCQUFpQixTQUFTLEtBQ2hCLEtBQWxCMkUsRUFBVWhLLE1BQ2J3SCxJQUVHMEMsa0JBQWtCcGUsUUFBUSxJQUUvQmtlLEVBQVV2RSxPQUFPLEtBQ00sS0FBbEJ1RSxFQUFVaEssTUFDYndILElBRUcwQyxrQkFBa0JwZSxRQUFRLEVBTWpDLE1BQU0wYixFQUFXLEtBRWYsSUFBSTJDLEVBQWUsSUFBSTVZLEVBQVF5WSxFQUFVaEssTUFBT1osRUFBR3ZOLFNBQVNwSixRQUM1RDJXLEVBQUdnSyxRQUFRZSxHQUNYLEdBQWEvSyxFQUFJK0ksRUFBWWhFLEdBQzdCbUIsYUFBYUMsUUFBUSxpQkFBa0JuYixLQUFLQyxVQUFVK1UsR0FBSSxDQUU1RCxFRGpDRSxDQUFxQjRJLEVBQW1CNUksRUFBSStFLEVBQWEsSUFHcEQ2RCxDQUFpQixFRmNBb0MsQ0FBbUJoTCxHQUFJK0UsSUFLakQsR0FBYS9FLEdBQUk0SSxHQUFtQjdELElBQ3BDbUIsYUFBYUMsUUFBUSxpQkFBaUJuYixLQUFLQyxVQUFVK1UsSSIsInNvdXJjZXMiOlsid2VicGFjazovL3RvZG8vLi9zcmMvbWFpbi5zY3NzIiwid2VicGFjazovL3RvZG8vLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovL3RvZG8vLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvZ2V0VXJsLmpzIiwid2VicGFjazovL3RvZG8vLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qcyIsIndlYnBhY2s6Ly90b2RvLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovL3RvZG8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzIiwid2VicGFjazovL3RvZG8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vdG9kby8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qcyIsIndlYnBhY2s6Ly90b2RvLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanMiLCJ3ZWJwYWNrOi8vdG9kby8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzIiwid2VicGFjazovL3RvZG8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vdG9kby93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly90b2RvL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly90b2RvL3dlYnBhY2svcnVudGltZS9nbG9iYWwiLCJ3ZWJwYWNrOi8vdG9kby93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL3RvZG8vd2VicGFjay9ydW50aW1lL3B1YmxpY1BhdGgiLCJ3ZWJwYWNrOi8vdG9kby93ZWJwYWNrL3J1bnRpbWUvanNvbnAgY2h1bmsgbG9hZGluZyIsIndlYnBhY2s6Ly90b2RvL3dlYnBhY2svcnVudGltZS9ub25jZSIsIndlYnBhY2s6Ly90b2RvLy4vc3JjL21vZHVsZXMvVG9kby5qcyIsIndlYnBhY2s6Ly90b2RvLy4vc3JjL21vZHVsZXMvUHJvamVjdC5qcyIsIndlYnBhY2s6Ly90b2RvLy4vc3JjL21vZHVsZXMvcmVtb3ZlRWxlbWVudC5qcyIsIndlYnBhY2s6Ly90b2RvLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9pc0RhdGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vdG9EYXRlL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvdG9JbnRlZ2VyL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvc3RhcnRPZlVUQ0lTT1dlZWsvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9nZXRVVENJU09XZWVrWWVhci9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2dldFVUQ0lTT1dlZWsvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9kZWZhdWx0T3B0aW9ucy9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3N0YXJ0T2ZVVENXZWVrL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvZ2V0VVRDV2Vla1llYXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9nZXRVVENXZWVrL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvYWRkTGVhZGluZ1plcm9zL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvZm9ybWF0L2xpZ2h0Rm9ybWF0dGVycy9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2Zvcm1hdC9mb3JtYXR0ZXJzL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvc3RhcnRPZlVUQ1dlZWtZZWFyL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvc3RhcnRPZlVUQ0lTT1dlZWtZZWFyL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvZ2V0VVRDRGF5T2ZZZWFyL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvZm9ybWF0L2xvbmdGb3JtYXR0ZXJzL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvcHJvdGVjdGVkVG9rZW5zL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9lbi1VUy9fbGliL2Zvcm1hdERpc3RhbmNlL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9fbGliL2J1aWxkRm9ybWF0TG9uZ0ZuL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9lbi1VUy9fbGliL2Zvcm1hdExvbmcvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2VuLVVTL19saWIvZm9ybWF0UmVsYXRpdmUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL19saWIvYnVpbGRMb2NhbGl6ZUZuL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9lbi1VUy9fbGliL2xvY2FsaXplL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9fbGliL2J1aWxkTWF0Y2hGbi9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvZW4tVVMvX2xpYi9tYXRjaC9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvX2xpYi9idWlsZE1hdGNoUGF0dGVybkZuL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9lbi1VUy9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2RlZmF1bHRMb2NhbGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vZm9ybWF0L2luZGV4LmpzIiwid2VicGFjazovL3RvZG8vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2lzVmFsaWQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9nZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL3N1Yk1pbGxpc2Vjb25kcy9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9hZGRNaWxsaXNlY29uZHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby8uL3NyYy9tb2R1bGVzL2RyYXdUb2RvLmpzIiwid2VicGFjazovL3RvZG8vLi9zcmMvbW9kdWxlcy9kcmF3QWxsVG9kb3MuanMiLCJ3ZWJwYWNrOi8vdG9kby8uL3NyYy9tb2R1bGVzL2RyYXdFeGlzdGluZ1RvZG9zLmpzIiwid2VicGFjazovL3RvZG8vLi9zcmMvbW9kdWxlcy9uZXdUb2RvQnV0dG9uLmpzIiwid2VicGFjazovL3RvZG8vLi9zcmMvbW9kdWxlcy9uZXdUb2RvRm9ybS5qcyIsIndlYnBhY2s6Ly90b2RvLy4vc3JjL21vZHVsZXMvbG9hZFByb2plY3RzLmpzIiwid2VicGFjazovL3RvZG8vLi9zcmMvbW9kdWxlcy9kcmF3UHJvamVjdHNUb0xpc3QuanMiLCJ3ZWJwYWNrOi8vdG9kby8uL3NyYy9tYWluLnNjc3M/NGU1MyIsIndlYnBhY2s6Ly90b2RvLy4vc3JjL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8vLi9zcmMvbW9kdWxlcy9Qcm9qZWN0TWFuYWdlci5qcyIsIndlYnBhY2s6Ly90b2RvLy4vc3JjL21vZHVsZXMvbG9hZE1haW4uanMiLCJ3ZWJwYWNrOi8vdG9kby8uL3NyYy9tb2R1bGVzL25ld1Byb2plY3RGb3JtLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9nZXRVcmwuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMF9fXyA9IG5ldyBVUkwoXCIuL2ltZy9wZW5jaWwuc3ZnXCIsIGltcG9ydC5tZXRhLnVybCk7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiQGltcG9ydCB1cmwoaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3MyP2ZhbWlseT1Sb2JvdG86d2dodEA3MDAmZGlzcGxheT1zd2FwKTtcIl0pO1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIkBpbXBvcnQgdXJsKGh0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzMj9mYW1pbHk9R3J1cHBvJmRpc3BsYXk9c3dhcCk7XCJdKTtcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCJAaW1wb3J0IHVybChodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2NzczI/ZmFtaWx5PU9wZW4rU2FuczppdGFsLHdnaHRAMCwzMDA7MCw0MDA7MCw1MDA7MCw2MDA7MCw3MDA7MCw4MDA7MSw0MDA7MSw1MDA7MSw2MDA7MSw3MDA7MSw4MDAmZGlzcGxheT1zd2FwKTtcIl0pO1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIkBpbXBvcnQgdXJsKGh0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzMj9mYW1pbHk9R3J1cHBvJmRpc3BsYXk9c3dhcCk7XCJdKTtcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCJAaW1wb3J0IHVybChodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2NzczI/ZmFtaWx5PVJvYm90bzp3Z2h0QDcwMCZkaXNwbGF5PXN3YXApO1wiXSk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzBfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiKnttYXJnaW46MDtmb250LWZhbWlseTpcXFwiT3BlbiBTYW5zXFxcIixzYW5zLXNlcmlmO2JveC1zaXppbmc6Ym9yZGVyLWJveH1ib2R5e2Rpc3BsYXk6ZmxleDtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcjtoZWlnaHQ6MTAwdmg7d2lkdGg6MTAwdnc7Zm9udC13ZWlnaHQ6NzAwO2ZvbnQtc2l6ZToxOHB0O2JhY2tncm91bmQtY29sb3I6IzMwMzAzMH1Aa2V5ZnJhbWVzIGV4cGFuZHtmcm9te3dpZHRoOjB2dztsZWZ0OjEwMCV9dG97d2lkdGg6MTAwJTtsZWZ0OjB9fUBrZXlmcmFtZXMgY2xvc2V7ZnJvbXt3aWR0aDoxMDAlfXRve3dpZHRoOjB2dzt2aXNpYmlsaXR5OmhpZGRlbn19QGtleWZyYW1lcyBvcGVuRGlzcGxheXtmcm9te3Bvc2l0aW9uOnJlbGF0aXZlO3dpZHRoOjEwMHZ3O2hlaWdodDoxMDAlO3JpZ2h0OjAlO3otaW5kZXg6Mn10b3twb3NpdGlvbjpyZWxhdGl2ZTt3aWR0aDowdnc7cmlnaHQ6MTAwJTt2aXNpYmlsaXR5OmhpZGRlbn19QGtleWZyYW1lcyBjbG9zZURpc3BsYXl7ZnJvbXtwb3NpdGlvbjpyZWxhdGl2ZTt3aWR0aDowdnc7cmlnaHQ6MTAwJX10b3twb3NpdGlvbjpyZWxhdGl2ZTt3aWR0aDoxMDB2dztoZWlnaHQ6MTAwJTtyaWdodDowO3otaW5kZXg6Mn19QG1lZGlhKG1heC13aWR0aDogNTAwcHgpey5zaWRlLXBhbmVse2JhY2tncm91bmQtY29sb3I6I2ZmZjt3aWR0aDoxMDAlO2hlaWdodDoxMDAlO3Bvc2l0aW9uOnJlbGF0aXZlO3otaW5kZXg6Mn0uZGlzcGxheS1vcGVue2FuaW1hdGlvbi1kdXJhdGlvbjoyMDBtc30uZGlzcGxheS1jbG9zZWR7YW5pbWF0aW9uLWR1cmF0aW9uOjIwMG1zfSNwYW5lbC10aXRsZXtwYWRkaW5nOjJyZW07Y29sb3I6cmdiYSgxNjYsNjksMCwuOTg0MzEzNzI1NSk7Zm9udC1zaXplOjNyZW19fS5zaWRlLXBhbmVse2JhY2tncm91bmQtY29sb3I6IzMwMzAzMDtoZWlnaHQ6MTAwJTt3aWR0aDoxMDAlO3Bvc2l0aW9uOnJlbGF0aXZlO3otaW5kZXg6MjtkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246Y29sdW1uO2p1c3RpZnktY29udGVudDpzcGFjZS1hcm91bmQ7YmFja2dyb3VuZDojMjIyfSNwYW5lbC10aXRsZXtwYWRkaW5nOjJyZW07Y29sb3I6cmdiYSgxNjYsNjksMCwuOTg0MzEzNzI1NSk7Zm9udC1zaXplOjNyZW07dGV4dC1zaGFkb3c6MXB4IDNweCA1cHggcmdiYSgwLDAsMCwuNil9LmRpc3BsYXktb3BlbnthbmltYXRpb24tbmFtZTpvcGVuRGlzcGxheTthbmltYXRpb24tZGVsYXk6MG1zO2FuaW1hdGlvbi1kdXJhdGlvbjo1MDBtczthbmltYXRpb24tZmlsbC1tb2RlOmZvcndhcmRzfS5kaXNwbGF5LWNsb3NlZHthbmltYXRpb24tbmFtZTpjbG9zZURpc3BsYXk7YW5pbWF0aW9uLWRlbGF5OjBtczthbmltYXRpb24tZHVyYXRpb246NTAwbXM7YW5pbWF0aW9uLWZpbGwtbW9kZTpmb3J3YXJkc30ucHJvamVjdC1tYW5hZ2Vye2Rpc3BsYXk6ZmxleDtoZWlnaHQ6MzAlO3dpZHRoOjEwMCU7ZmxleC1kaXJlY3Rpb246Y29sdW1uO2p1c3RpZnktY29udGVudDpzcGFjZS1iZXR3ZWVuO2FsaWduLWl0ZW1zOmNlbnRlcn0ucHJvamVjdHt0ZXh0LXNoYWRvdzoxcHggM3B4IDVweCByZ2JhKDAsMCwwLC42KTtib3gtc2hhZG93OjFweCAzcHggNXB4ICMwMDA7anVzdGlmeS1jb250ZW50OmZsZXgtc3RhcnQ7YWxpZ24taXRlbXM6Y2VudGVyO3BhZGRpbmc6LjVyZW0gMXJlbSAuNXJlbSAxcmVtO2Rpc3BsYXk6ZmxleDt3aWR0aDo4MCU7Y29sb3I6cmdiYSgxNjYsNjksMCwuOTg0MzEzNzI1NSk7Ym9yZGVyOjJweCBzb2xpZCByZ2JhKDE2Niw2OSwwLC45ODQzMTM3MjU1KTtib3JkZXItcmFkaXVzOi41cmVtfS5wcm9qZWN0IC5wcm9qZWN0LW5hbWV7bGVmdDoxcmVtO3Bvc2l0aW9uOnJlbGF0aXZlO3RleHQtYWxpZ246Y2VudGVyO2ZvbnQtc2l6ZToxLjdyZW19LnByb2plY3QgLmJ1dHRvbi1wYW5lbHtwb3NpdGlvbjphYnNvbHV0ZTt6LWluZGV4OjM7bGVmdDo3MCU7ZGlzcGxheTpmbGV4fS5lZGl0LXByb2plY3R7YXBwZWFyYW5jZTpub25lO2JhY2tncm91bmQ6bm9uZTtib3JkZXI6MnB4IHNvbGlkIHJnYmEoMTY2LDY5LDAsLjk4NDMxMzcyNTUpO2JvcmRlci1yYWRpdXM6LjRyZW07ZGlzcGxheTpmbGV4O2p1c3RpZnktY29udGVudDpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyO2hlaWdodDoxLjZyZW07d2lkdGg6MS42cmVtfS5lZGl0LWljb257d2lkdGg6MXJlbTtoZWlnaHQ6MXJlbTtib3JkZXI6MnB4IHNvbGlkIHJnYmEoMTY2LDY5LDAsLjk4NDMxMzcyNTUpO21hc2stcmVwZWF0Om5vLXJlcGVhdDtjb2xvcjpyZ2JhKDE2Niw2OSwwLC45ODQzMTM3MjU1KTtiYWNrZ3JvdW5kOnJnYmEoMTY2LDY5LDAsLjk4NDMxMzcyNTUpOy13ZWJraXQtbWFzay1pbWFnZTp1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8wX19fICsgXCIpO21hc2staW1hZ2U6dXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fXyArIFwiKTstd2Via2l0LW1hc2stc2l6ZToxcmVtO21hc2stc2l6ZToxcmVtfS5uZXctcHJvamVjdC1idXR0b257aGVpZ2h0OjJyZW07d2lkdGg6MTByZW07Zm9udC1zaXplOjFyZW07Ym9yZGVyOjJweCBzb2xpZCByZ2JhKDE2Niw2OSwwLC45ODQzMTM3MjU1KTtib3JkZXItcmFkaXVzOi41cmVtO2NvbG9yOnJnYmEoMTY2LDY5LDAsLjk4NDMxMzcyNTUpO2JhY2tncm91bmQ6IzMwMzAzMDtwb3NpdGlvbjpyZWxhdGl2ZTtsZWZ0OjI1JX0jaW5wdXQtcGxhY2Vob2xkZXJ7cG9zaXRpb246cmVsYXRpdmV9I2lucHV0LXBsYWNlaG9sZGVyIC5wcm9qZWN0LW5hbWV7cG9zaXRpb246cmVsYXRpdmU7ei1pbmRleDowfSNpbnB1dC1wbGFjZWhvbGRlciAucHJvamVjdC1uYW1lICNmb3JtLXByb2plY3QtbmFtZXtwb3NpdGlvbjphYnNvbHV0ZTt0ZXh0LWFsaWduOmNlbnRlcjtsZWZ0OjA7d2lkdGg6MTAwJTtoZWlnaHQ6MS41cmVtfSNpbnB1dC1wbGFjZWhvbGRlciAucHJvamVjdC1uYW1lICNjcmVhdGUtYnV0dG9ue3Bvc2l0aW9uOmFic29sdXRlO2xlZnQ6MTByZW19QGtleWZyYW1lcyBleHBhbmR7ZnJvbXt3aWR0aDowdnc7bGVmdDoxMDAlfXRve3dpZHRoOjEwMCU7bGVmdDowfX1Aa2V5ZnJhbWVzIGNsb3Nle2Zyb217d2lkdGg6MTAwJX10b3t3aWR0aDowdnc7dmlzaWJpbGl0eTpoaWRkZW59fUBrZXlmcmFtZXMgb3BlbkRpc3BsYXl7ZnJvbXtwb3NpdGlvbjpyZWxhdGl2ZTt3aWR0aDoxMDB2dztoZWlnaHQ6MTAwJTtyaWdodDowJTt6LWluZGV4OjJ9dG97cG9zaXRpb246cmVsYXRpdmU7d2lkdGg6MHZ3O3JpZ2h0OjEwMCU7dmlzaWJpbGl0eTpoaWRkZW59fUBrZXlmcmFtZXMgY2xvc2VEaXNwbGF5e2Zyb217cG9zaXRpb246cmVsYXRpdmU7d2lkdGg6MHZ3O3JpZ2h0OjEwMCV9dG97cG9zaXRpb246cmVsYXRpdmU7d2lkdGg6MTAwdnc7aGVpZ2h0OjEwMCU7cmlnaHQ6MDt6LWluZGV4OjJ9fS5tYWluLXBhbmVse2Rpc3BsYXk6ZmxleDtmbGV4LWRpcmVjdGlvbjpjb2x1bW47anVzdGlmeS1jb250ZW50OmZsZXgtc3RhcnQ7Z2FwOjVyZW07YWxpZ24taXRlbXM6Y2VudGVyO2JhY2tncm91bmQtY29sb3I6IzMwMzAzMDtjb2xvcjpyZ2JhKDE2Niw2OSwwLC45ODQzMTM3MjU1KTtwb3NpdGlvbjpyZWxhdGl2ZTtoZWlnaHQ6MTAwJTt3aWR0aDowO2xlZnQ6MTAwJTt6LWluZGV4OjB9LmV4cGFuZC1wYW5lbHthbmltYXRpb24tbmFtZTpleHBhbmQ7YW5pbWF0aW9uLWR1cmF0aW9uOjUwMG1zO2FuaW1hdGlvbi1maWxsLW1vZGU6Zm9yd2FyZHN9LmNsb3NlLXBhbmVse2FuaW1hdGlvbi1uYW1lOmNsb3NlO2FuaW1hdGlvbi1kdXJhdGlvbjo1MDBtczthbmltYXRpb24tZmlsbC1tb2RlOmZvcndhcmRzfS5wcm9qZWN0LWRpc3BsYXktcGFuZWx7cGFkZGluZy10b3A6NXJlbTt3aWR0aDoxMDAlO2Rpc3BsYXk6ZmxleDtmbGV4LWRpcmVjdGlvbjpjb2x1bW47anVzdGlmeS1jb250ZW50OmZsZXgtc3RhcnQ7Z2FwOjUlO2FsaWduLWl0ZW1zOmNlbnRlcn0jbmF2LWJhcntwb3NpdGlvbjphYnNvbHV0ZTtkaXNwbGF5OmZsZXg7anVzdGlmeS1jb250ZW50OmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXI7dG9wOjAlO2hlaWdodDozcmVtO3dpZHRoOjEwMCU7cGFkZGluZzoxcmVtO292ZXJmbG93OnZpc2libGU7dGV4dC1zaGFkb3c6MXB4IDNweCA1cHggcmdiYSgwLDAsMCwuNik7Ym94LXNoYWRvdzoxcHggM3B4IDVweCAjMDAwfSNleHBhbmQtYXJyb3d7Zm9udC1zaXplOjJyZW07ZmxleDoxIDEgYXV0b30jbmF2LXRpdGxle2ZsZXg6NSA1IGF1dG99LnRvZG97dGV4dC1zaGFkb3c6MXB4IDNweCA1cHggcmdiYSgwLDAsMCwuNik7Ym94LXNoYWRvdzoxcHggMnB4IDNweCAjMDAwO3dpZHRoOjkwJTtwYWRkaW5nOjFyZW07ZGlzcGxheTpmbGV4O2JvcmRlcjoycHggc29saWQgcmdiYSgxNjYsNjksMCwuOTg0MzEzNzI1NSk7anVzdGlmeS1jb250ZW50OnNwYWNlLWJldHdlZW47YWxpZ24taXRlbXM6Y2VudGVyO2JvcmRlci1yYWRpdXM6LjVyZW19LmNoZWNrYm94LWNvbnRhaW5lcntmbGV4OjEgMSBhdXRvO2hlaWdodDoxMDAlO2Rpc3BsYXk6ZmxleDtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcn0udG9kby1jaGVja2JveHt3aWR0aDoyMHB4O2hlaWdodDoyMHB4O2JvcmRlcjoycHggc29saWQgcmdiYSgxNjYsNjksMCwuOTg0MzEzNzI1NSk7YmFja2dyb3VuZDojMzAzMDMwO2JvcmRlci1yYWRpdXM6NTAlO2FwcGVhcmFuY2U6bm9uZX1pbnB1dFt0eXBlPWNoZWNrYm94XTpjaGVja2Vke3dpZHRoOjIwcHg7aGVpZ2h0OjIwcHg7Ym9yZGVyOjJweCBzb2xpZCByZ2JhKDE2Niw2OSwwLC45ODQzMTM3MjU1KTtiYWNrZ3JvdW5kOiNmZmE3MmU7YmFja2dyb3VuZDpyYWRpYWwtZ3JhZGllbnQoY2lyY2xlLCByZ2JhKDE2NiwgNjksIDAsIDAuOTg0MzEzNzI1NSkgMCUsIHJnYmEoMTY2LCA2OSwgMCwgMC45ODQzMTM3MjU1KSAzMiUsIHJnYigwLCAwLCAwKSA2OSUpO2JvcmRlci1yYWRpdXM6NTAlfS50aXRsZXtwb3NpdGlvbjpyZWxhdGl2ZTt6LWluZGV4OjA7Zm9udC1zaXplOjFyZW07Zm9udC13ZWlnaHQ6NzAwO2ZsZXg6MyAzIGF1dG87bWF4LXdpZHRoOjQwJX0udG9kby1uZXctdGl0bGV7cG9zaXRpb246YWJzb2x1dGU7dG9wOjA7bGVmdDowO3dpZHRoOjEwMCU7aGVpZ2h0OjEwMCV9LmR1ZS1kYXRle3RleHQtYWxpZ246Y2VudGVyO3Bvc2l0aW9uOnJlbGF0aXZlO3otaW5kZXg6MDtmb250LXNpemU6MXJlbTtmbGV4OjEgMSBhdXRvfS50b2RvLW5ldy1kYXRle3Bvc2l0aW9uOmFic29sdXRlO2xlZnQ6MDt3aWR0aDo4NSV9LnJlbW92ZS1idXR0b24tY29udGFpbmVye2Rpc3BsYXk6ZmxleDtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcn0ucmVtb3ZlLWJ1dHRvbi1jb250YWluZXIgLnJlbW92ZS10b2Rve2FwcGVhcmFuY2U6bm9uZTtiYWNrZ3JvdW5kOm5vbmU7Ym9yZGVyLXJhZGl1czo1MCU7Ym9yZGVyOm5vbmU7aGVpZ2h0OjEuMnJlbTt3aWR0aDoxLjJyZW07cGFkZGluZzouMXJlbTtjb2xvcjpyZ2JhKDE2Niw2OSwwLC45ODQzMTM3MjU1KTtmb250LWZhbWlseTpcXFwiT3BlbiBTYW5zXFxcIixzYW5zLXNlcmlmO2ZvbnQtd2VpZ2h0OjcwMDtmb250LXNpemU6LjhyZW07Ym94LXNoYWRvdzoxcHggMnB4IDNweCAjMDAwfS5jcmVhdGUtdG9kby1mb3Jte2JvcmRlcjoycHggc29saWQgIzAwMDtoZWlnaHQ6MjAlO3Bvc2l0aW9uOmFic29sdXRlO3RvcDo1MCU7bGVmdDo1MCU7YmFja2dyb3VuZC1jb2xvcjpncmF5fSN0b2RvLWNyZWF0ZS1uZXd7aGVpZ2h0OjJyZW07d2lkdGg6MTByZW07Zm9udC1zaXplOjFyZW07Ym9yZGVyOjJweCBzb2xpZCByZ2JhKDE2Niw2OSwwLC45ODQzMTM3MjU1KTtib3JkZXItcmFkaXVzOi41cmVtO2NvbG9yOnJnYmEoMTY2LDY5LDAsLjk4NDMxMzcyNTUpO2JhY2tncm91bmQ6IzMwMzAzMH1cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvbWFpbi5zY3NzXCIsXCJ3ZWJwYWNrOi8vLi9zcmMvc3R5bGVzL2FuaW1hdGlvbnMuc2Nzc1wiLFwid2VicGFjazovLy4vc3JjL3N0eWxlcy9wcm9qZWN0UGFuZWwuc2Nzc1wiLFwid2VicGFjazovLy4vc3JjL3N0eWxlcy9tYWluUGFuZWwuc2Nzc1wiLFwid2VicGFjazovLy4vc3JjL3N0eWxlcy90b2Rvcy5zY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUdBLEVBQ0ksUUFBQSxDQUNBLGtDQUFBLENBQ0EscUJBQUEsQ0FFSixLQUNJLFlBQUEsQ0FDQSxzQkFBQSxDQUNBLGtCQUFBLENBQ0EsWUFBQSxDQUNBLFdBQUEsQ0FDQSxlQUFBLENBQ0EsY0FBQSxDQUNBLHdCQ2JNLENBT04sa0JBQ0ksS0FBQSxT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aUJBQUEsQ0FDSSxNQUFBLENBQ0EsU0FBQSxDQUVSLHlCQUNJLFlBQUEsQ0FDQSxzQkFBQSxDQUNBLGtCQUFBLENBQ0Esc0NBQ0ksZUFBQSxDQUNBLGVBQUEsQ0FDQSxpQkFBQSxDQUNBLFdBQUEsQ0FDQSxhQUFBLENBQ0EsWUFBQSxDQUNBLGFBQUEsQ0FDQSxnQ0gxRUksQ0cyRUosa0NBQUEsQ0FDQSxlQUFBLENBQ0EsZUFBQSxDQUNBLDJCQUFBLENBTVIsa0JBQ0kscUJBQUEsQ0FDSSxVQUFBLENBQ0EsaUJBQUEsQ0FDQSxPQUFBLENBQ0EsUUFBQSxDQUNBLHFCQUFBLENBR1IsaUJBQ0ksV0FBQSxDQUNBLFdBQUEsQ0FDQSxjQUFBLENBQ0EsMkNBQUEsQ0FDQSxtQkFBQSxDQUNBLGdDSG5HUSxDR29HUixrQkFBQVwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJAaW1wb3J0IHVybCgnaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3MyP2ZhbWlseT1Sb2JvdG86d2dodEA3MDAmZGlzcGxheT1zd2FwJyk7XFxuQGltcG9ydCAnLi9zdHlsZXMvYW5pbWF0aW9ucy5zY3NzJztcXG5AaW1wb3J0IHVybCgnaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3MyP2ZhbWlseT1HcnVwcG8mZGlzcGxheT1zd2FwJyk7XFxuKntcXG4gICAgbWFyZ2luOjA7XFxuICAgIGZvbnQtZmFtaWx5OidPcGVuIFNhbnMnLHNhbnMtc2VyaWY7XFxuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxufVxcbmJvZHl7XFxuICAgIGRpc3BsYXk6ZmxleDtcXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICAgIGhlaWdodDoxMDB2aDtcXG4gICAgd2lkdGg6MTAwdnc7XFxuICAgIGZvbnQtd2VpZ2h0OjcwMDtcXG4gICAgZm9udC1zaXplOjE4cHQ7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICRiZ0NvbG9yO1xcbn1cXG5AaW1wb3J0ICcuL3N0eWxlcy9wcm9qZWN0UGFuZWwuc2Nzcyc7XFxuQGltcG9ydCAnLi9zdHlsZXMvbWFpblBhbmVsLnNjc3MnO1xcbkBpbXBvcnQgJy4vc3R5bGVzL3RvZG9zLnNjc3MnO1xcblxcblxcblwiLFwiJHBpbmstaXNoOnJnYmEoMjU1LCAxOTIsIDIwMywgMC41MDUpO1xcbiRnb2xkaXNoOnJnYmEoMjUxLDIzNSwyMTUsMSk7XFxuJHRoZW1lLWZvbnQ6I2E2NDUwMGZiO1xcbiRiZ0NvbG9yOiAjMzAzMDMwO1xcblxcbiAgICBAaW1wb3J0IHVybCgnaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3MyP2ZhbWlseT1HcnVwcG8mZGlzcGxheT1zd2FwJyk7XFxuICAgIEBpbXBvcnQgdXJsKCdodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2NzczI/ZmFtaWx5PU9wZW4rU2FuczppdGFsLHdnaHRAMCwzMDA7MCw0MDA7MCw1MDA7MCw2MDA7MCw3MDA7MCw4MDA7MSw0MDA7MSw1MDA7MSw2MDA7MSw3MDA7MSw4MDAmZGlzcGxheT1zd2FwJyk7XFxuXFxuQG1peGluIGFuaW1hdGlvbnN7XFxuXFxuICAgIEBrZXlmcmFtZXMgZXhwYW5ke1xcbiAgICAgICAgZnJvbXt3aWR0aDowdnc7XFxuICAgICAgICBsZWZ0OiAxMDAlO1xcbiAgICAgICAgfVxcbiAgICAgICAgdG97d2lkdGg6MTAwJTtcXG4gICAgICAgIGxlZnQ6MDt9XFxuICAgIH1cXG4gICAgQGtleWZyYW1lcyBjbG9zZSB7XFxuICAgICAgICBmcm9te3dpZHRoOjEwMCV9XFxuICAgICAgICB0b3t3aWR0aDowdnc7XFxuICAgICAgICB2aXNpYmlsaXR5OmhpZGRlbjtcXG4gICAgfVxcbiAgICB9XFxuICAgIEBrZXlmcmFtZXMgb3BlbkRpc3BsYXl7XFxuICAgICAgICBmcm9te1xcbiAgICAgICAgICAgIHBvc2l0aW9uOnJlbGF0aXZlO1xcbiAgICAgICAgICAgIHdpZHRoOjEwMHZ3O1xcbiAgICAgICAgICAgIGhlaWdodDoxMDAlO1xcbiAgICAgICAgICAgIHJpZ2h0OjAlO1xcbiAgICAgICAgICAgIHotaW5kZXg6IDI7XFxuICAgICAgICB9XFxuICAgICAgICB0b3tcXG4gICAgICAgICAgICBwb3NpdGlvbjpyZWxhdGl2ZTtcXG4gICAgICAgICAgICB3aWR0aDowdnc7XFxuICAgICAgICAgICAgcmlnaHQ6MTAwJTtcXG4gICAgICAgICAgICB2aXNpYmlsaXR5OiBoaWRkZW47XFxuICAgIFxcbiAgICAgICAgfVxcbiAgICB9XFxuICAgIEBrZXlmcmFtZXMgY2xvc2VEaXNwbGF5e1xcbiAgICAgICAgZnJvbXtcXG4gICAgICAgICAgICBwb3NpdGlvbjpyZWxhdGl2ZTtcXG4gICAgICAgICAgICB3aWR0aDowdnc7XFxuICAgICAgICAgICAgcmlnaHQ6MTAwJTtcXG4gICAgICAgIH1cXG4gICAgICAgIHRve1xcbiAgICAgICAgICAgIFxcbiAgICAgICAgICAgIHBvc2l0aW9uOnJlbGF0aXZlO1xcbiAgICAgICAgICAgIHdpZHRoOjEwMHZ3O1xcbiAgICAgICAgICAgIGhlaWdodDoxMDAlO1xcbiAgICAgICAgICAgIHJpZ2h0OjA7XFxuICAgICAgICAgICAgei1pbmRleDogMjtcXG4gICAgICAgIH1cXG4gICAgfVxcblxcbn1cXG5cIixcIkBpbXBvcnQgdXJsKCdodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2NzczI/ZmFtaWx5PVJvYm90bzp3Z2h0QDcwMCZkaXNwbGF5PXN3YXAnKTtcXG5cXG5AaW5jbHVkZSBhbmltYXRpb25zO1xcbkBtZWRpYSAobWF4LXdpZHRoOjUwMHB4KXtcXG4gICAgLnNpZGUtcGFuZWx7XFxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOnJnYigyNTUsIDI1NSwgMjU1KTtcXG4gICAgICAgIHdpZHRoOjEwMCU7XFxuICAgICAgICBoZWlnaHQ6MTAwJTtcXG4gICAgICAgIHBvc2l0aW9uOnJlbGF0aXZlO1xcbiAgICAgICAgei1pbmRleDogMjtcXG4gICAgfVxcbiAgICAuZGlzcGxheS1vcGVue1xcbiAgICAgICAgYW5pbWF0aW9uLWR1cmF0aW9uOiAyMDBtcztcXG4gICAgfVxcbiAgICAuZGlzcGxheS1jbG9zZWR7XFxuICAgICAgICBhbmltYXRpb24tZHVyYXRpb246IDIwMG1zO1xcbiAgICB9XFxuXFxuICAgICNwYW5lbC10aXRsZXtcXG4gICAgICAgIHBhZGRpbmc6MnJlbTtcXG4gICAgICAgIGNvbG9yOiR0aGVtZS1mb250O1xcbiAgICAgICAgZm9udC1zaXplOjNyZW07XFxuICAgICAgICBcXG4gICAgfVxcblxcblxcblxcblxcblxcblxcblxcblxcbn1cXG5cXG5cXG5cXG5cXG5cXG4uc2lkZS1wYW5lbHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjokYmdDb2xvcjtcXG4gICAgaGVpZ2h0OjEwMCU7XFxuICAgIHdpZHRoOjEwMCU7XFxuICAgIHBvc2l0aW9uOnJlbGF0aXZlO1xcbiAgICB6LWluZGV4OiAyO1xcbiAgICBkaXNwbGF5OmZsZXg7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYXJvdW5kO1xcbiAgICBiYWNrZ3JvdW5kOiByZ2IoMzQsIDM0LCAzNCk7XFxuICAgIFxcbiAgICBcXG59XFxuI3BhbmVsLXRpdGxle1xcbiAgICBwYWRkaW5nOjJyZW07XFxuICAgIGNvbG9yOiR0aGVtZS1mb250O1xcbiAgICBmb250LXNpemU6M3JlbTtcXG4gICAgdGV4dC1zaGFkb3c6IDFweCAzcHggNXB4IHJnYmEoMCwwLDAsMC42KTtcXG59XFxuLmRpc3BsYXktb3BlbntcXG4gICAgYW5pbWF0aW9uLW5hbWU6b3BlbkRpc3BsYXk7XFxuICAgIGFuaW1hdGlvbi1kZWxheTowbXM7XFxuICAgIGFuaW1hdGlvbi1kdXJhdGlvbjo1MDBtcztcXG4gICAgYW5pbWF0aW9uLWZpbGwtbW9kZTogZm9yd2FyZHM7XFxufVxcbi5kaXNwbGF5LWNsb3NlZHtcXG4gICAgYW5pbWF0aW9uLW5hbWU6Y2xvc2VEaXNwbGF5O1xcbiAgICBhbmltYXRpb24tZGVsYXk6MG1zO1xcbiAgICBhbmltYXRpb24tZHVyYXRpb246NTAwbXM7XFxuICAgIGFuaW1hdGlvbi1maWxsLW1vZGU6IGZvcndhcmRzO1xcbn1cXG5cXG4ucHJvamVjdC1tYW5hZ2Vye1xcbiAgICBkaXNwbGF5OmZsZXg7XFxuICAgIGhlaWdodDozMCU7XFxuICAgIHdpZHRoOjEwMCU7XFxuICAgIGZsZXgtZGlyZWN0aW9uOmNvbHVtbjtcXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbn1cXG4ucHJvamVjdHtcXG4gICAgdGV4dC1zaGFkb3c6IDFweCAzcHggNXB4IHJnYmEoMCwwLDAsMC42KTtcXG4gICAgYm94LXNoYWRvdzogMXB4IDNweCA1cHggYmxhY2s7XFxuICAgICRwaW5rLWlzaDpyZ2JhKDI1NSwgMTkyLCAyMDMsIDAuNTA1KTtcXG4gICAgJGdvbGRpc2g6cmdiYSgyNTEsMjM1LDIxNSwxKTtcXG4gICAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0O1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICBwYWRkaW5nOiAuNXJlbSAxcmVtIC41cmVtIDFyZW07XFxuICAgIGRpc3BsYXk6ZmxleDtcXG4gICAgd2lkdGg6ODAlO1xcbiAgICBjb2xvcjokdGhlbWUtZm9udDtcXG4gICAgIGJvcmRlcjoycHggc29saWQgJHRoZW1lLWZvbnQ7XFxuICAgICBib3JkZXItcmFkaXVzOiAuNXJlbTtcXG4gICAgLy8gYm94LXNoYWRvdzppbnNldCAxcHggMnB4IDZweCAxcHggcGluaztcXG4gICAgLnByb2plY3QtbmFtZXtcXG4gICAgICAgIGxlZnQ6MXJlbTtcXG4gICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gICAgICAgIGZvbnQtc2l6ZToxLjdyZW07XFxuXFxuICAgIH1cXG4gICAuYnV0dG9uLXBhbmVse1xcbiAgICAgICAgcG9zaXRpb246YWJzb2x1dGU7XFxuICAgICAgICB6LWluZGV4OjM7XFxuICAgICAgICBsZWZ0OjcwJTtcXG4gICAgICAgIGRpc3BsYXk6ZmxleDtcXG4gICAgXFxuICAgfVxcbn1cXG4uZWRpdC1wcm9qZWN0e1xcbiAgICBhcHBlYXJhbmNlOm5vbmU7XFxuICAgIGJhY2tncm91bmQ6bm9uZTtcXG4gICAgYm9yZGVyOjJweCBzb2xpZCAkdGhlbWUtZm9udDtcXG4gICAgYm9yZGVyLXJhZGl1czogLjRyZW07XFxuICAgZGlzcGxheTogZmxleDtcXG4gICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgIGhlaWdodDoxLjZyZW07XFxuICAgd2lkdGg6MS42cmVtO1xcbn1cXG4uZWRpdC1pY29ue1xcbiAgICB3aWR0aDogMXJlbTtcXG4gICAgaGVpZ2h0OiAxcmVtO1xcbiAgICBib3JkZXI6MnB4IHNvbGlkICR0aGVtZS1mb250O1xcbiAgICBtYXNrLXJlcGVhdDogbm8tcmVwZWF0O1xcbiAgICBjb2xvcjokdGhlbWUtZm9udDtcXG4gICAgYmFja2dyb3VuZDogJHRoZW1lLWZvbnQ7XFxuICAgIC13ZWJraXQtbWFzay1pbWFnZTogdXJsKC4vaW1nL3BlbmNpbC5zdmcpO1xcbiAgICBtYXNrLWltYWdlOiB1cmwoLi9pbWcvcGVuY2lsLnN2Zyk7XFxuICAgIC13ZWJraXQtbWFzay1zaXplOiAxcmVtO1xcbiAgICBtYXNrLXNpemU6IDFyZW07XFxuXFxufVxcblxcbi5uZXctcHJvamVjdC1idXR0b257XFxuICAgIGhlaWdodDoycmVtO1xcbiAgICB3aWR0aDoxMHJlbTtcXG4gICAgZm9udC1zaXplOjFyZW07XFxuICAgIGJvcmRlcjoycHggc29saWQgJHRoZW1lLWZvbnQ7XFxuICAgIGJvcmRlci1yYWRpdXM6LjVyZW07XFxuICAgIGNvbG9yOiR0aGVtZS1mb250O1xcbiAgICBiYWNrZ3JvdW5kOiByZ2IoNDgsIDQ4LCA0OCk7XFxuICAgIHBvc2l0aW9uOnJlbGF0aXZlO1xcbiAgICBsZWZ0OjI1JTtcXG5cXG59XFxuI2lucHV0LXBsYWNlaG9sZGVye1xcbiAgICBwb3NpdGlvbjpyZWxhdGl2ZTtcXG4gICAgXFxuICAgIC5wcm9qZWN0LW5hbWV7XFxuICAgICAgICBwb3NpdGlvbjpyZWxhdGl2ZTtcXG4gICAgICAgIHotaW5kZXg6MDtcXG4gICAgICAgXFxuICAgICAgICBcXG4gICAgICAgICNmb3JtLXByb2plY3QtbmFtZXtcXG4gICAgICAgICAgICBwb3NpdGlvbjphYnNvbHV0ZTtcXG4gICAgICAgICAgICBcXG4gICAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICAgICAgICAgICAgbGVmdDowO1xcbiAgICAgICAgICAgIHdpZHRoOjEwMCU7XFxuICAgICAgICAgICAgaGVpZ2h0OjEuNXJlbTtcXG4gICAgICAgICAgICBcXG4gICAgICAgICAgIFxcbiAgICAgICAgfVxcbiAgICAgICAgI2NyZWF0ZS1idXR0b257XFxuICAgICAgICAgICAgcG9zaXRpb246YWJzb2x1dGU7XFxuICAgICAgICAgICAgbGVmdDoxMHJlbTtcXG4gICAgICAgIH1cXG4gICAgfVxcbn1cXG5cXG5cXG5cIixcIkBpbmNsdWRlIGFuaW1hdGlvbnM7XFxuLm1haW4tcGFuZWx7XFxuICAgIGRpc3BsYXk6ZmxleDtcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gICAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0O1xcbiAgICBnYXA6NXJlbTtcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogJGJnQ29sb3I7XFxuICAgIGNvbG9yOiR0aGVtZS1mb250O1xcbiAgICBwb3NpdGlvbjpyZWxhdGl2ZTtcXG4gICAgaGVpZ2h0OjEwMCU7XFxuICAgIHdpZHRoOjA7XFxuICAgIGxlZnQ6MTAwJTtcXG4gICAgei1pbmRleDowO1xcblxcbn1cXG4uZXhwYW5kLXBhbmVse1xcbiAgICBhbmltYXRpb24tbmFtZTpleHBhbmQ7XFxuICAgIGFuaW1hdGlvbi1kdXJhdGlvbjogNTAwbXM7XFxuICAgIGFuaW1hdGlvbi1maWxsLW1vZGU6IGZvcndhcmRzO1xcbn1cXG4uY2xvc2UtcGFuZWx7XFxuICAgIGFuaW1hdGlvbi1uYW1lOmNsb3NlO1xcbiAgICBhbmltYXRpb24tZHVyYXRpb246IDUwMG1zO1xcbiAgICBhbmltYXRpb24tZmlsbC1tb2RlOiBmb3J3YXJkcztcXG59XFxuLnByb2plY3QtZGlzcGxheS1wYW5lbHtcXG4gICAgXFxuICAgIHBhZGRpbmctdG9wOjVyZW07XFxuICAgIHdpZHRoOjEwMCU7XFxuICAgIGRpc3BsYXk6ZmxleDtcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gICAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0O1xcbiAgICBnYXA6NSU7XFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxufVxcblxcbiNuYXYtYmFye1xcbiAgICBwb3NpdGlvbjphYnNvbHV0ZTtcXG4gICAgZGlzcGxheTpmbGV4O1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAgdG9wOjAlO1xcbiAgICBoZWlnaHQ6M3JlbTtcXG4gICAgd2lkdGg6MTAwJTtcXG4gICAgcGFkZGluZzoxcmVtO1xcbiAgIFxcbiAgICBvdmVyZmxvdzogdmlzaWJsZTtcXG4gICAgXFxuICAgIHRleHQtc2hhZG93OiAxcHggM3B4IDVweCByZ2JhKDAsMCwwLDAuNik7XFxuICAgIGJveC1zaGFkb3c6IDFweCAzcHggNXB4IGJsYWNrO1xcbn1cXG5cXG4jZXhwYW5kLWFycm93e1xcbiAgICBmb250LXNpemU6MnJlbTtcXG4gICAgZmxleDoxIDEgYXV0bztcXG59XFxuI25hdi10aXRsZXtcXG4gICAgZmxleCA6NSA1IGF1dG87XFxufVxcblwiLFwiLnRvZG97XFxuICAgIHRleHQtc2hhZG93OiAxcHggM3B4IDVweCByZ2JhKDAsMCwwLDAuNik7XFxuICAgIGJveC1zaGFkb3c6IDFweCAycHggM3B4IGJsYWNrO1xcbiAgICB3aWR0aDo5MCU7XFxuICAgIHBhZGRpbmc6MXJlbTtcXG4gICAgZGlzcGxheTpmbGV4O1xcbiAgICBib3JkZXI6MnB4IHNvbGlkICR0aGVtZS1mb250O1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICAgIGJvcmRlci1yYWRpdXM6LjVyZW07XFxufVxcbi5jaGVja2JveC1jb250YWluZXJ7XFxuICAgIGZsZXg6MSAxIGF1dG87XFxuaGVpZ2h0OjEwMCU7XFxuZGlzcGxheTpmbGV4O1xcbmp1c3RpZnktY29udGVudDogY2VudGVyO1xcbmFsaWduLWl0ZW1zOiBjZW50ZXI7XFxufVxcbi50b2RvLWNoZWNrYm94e1xcbiAgICBcXG4gICAgd2lkdGg6MjBweDtcXG4gICAgaGVpZ2h0OjIwcHg7XFxuICAgIGJvcmRlcjoycHggc29saWQgJHRoZW1lLWZvbnQ7XFxuICAgIGJhY2tncm91bmQ6JGJnQ29sb3I7XFxuICAgIGJvcmRlci1yYWRpdXM6NTAlO1xcbiAgICBhcHBlYXJhbmNlOiBub25lO1xcbiAgXFxufVxcbmlucHV0W3R5cGU9J2NoZWNrYm94J106Y2hlY2tlZHtcXG4gICAgd2lkdGg6MjBweDtcXG4gICAgaGVpZ2h0OjIwcHg7XFxuICAgIGJvcmRlcjoycHggc29saWQgJHRoZW1lLWZvbnQ7XFxuICAgIGJhY2tncm91bmQ6IHJnYigyNTUsMTY3LDQ2KTtcXG4gICAgYmFja2dyb3VuZDogcmFkaWFsLWdyYWRpZW50KGNpcmNsZSwgJHRoZW1lLWZvbnQgMCUsJHRoZW1lLWZvbnQgMzIlLCByZ2JhKDAsMCwwLDEpIDY5JSk7IFxcbiAgICBib3JkZXItcmFkaXVzOjUwJTtcXG4gIFxcbn1cXG4udGl0bGV7XFxuICAgIHBvc2l0aW9uOnJlbGF0aXZlO1xcbiAgICB6LWluZGV4OiAwO1xcbiAgICBmb250LXNpemU6MXJlbTtcXG4gICAgZm9udC13ZWlnaHQ6NzAwO1xcbiAgICBmbGV4OiAzIDMgYXV0bztcXG4gICAgbWF4LXdpZHRoOiA0MCU7XFxufVxcbi50b2RvLW5ldy10aXRsZXtcXG4gICAgcG9zaXRpb246YWJzb2x1dGU7XFxuICAgIHRvcDowO1xcbiAgICBsZWZ0OjA7XFxuICAgIHdpZHRoOjEwMCU7XFxuICAgIGhlaWdodDoxMDAlO1xcbn1cXG4uZHVlLWRhdGV7XFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgICAgICAgei1pbmRleDogMDtcXG4gICAgICAgIGZvbnQtc2l6ZToxcmVtO1xcbiAgICAgICAgZmxleDogMSAxIGF1dG87XFxufVxcbi50b2RvLW5ldy1kYXRle1xcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgICAgICBsZWZ0OiAwO1xcbiAgICAgICAgd2lkdGg6IDg1JTtcXG59XFxuLnJlbW92ZS1idXR0b24tY29udGFpbmVye1xcbiAgICBkaXNwbGF5OmZsZXg7XFxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICAucmVtb3ZlLXRvZG97XFxuICAgICAgICBhcHBlYXJhbmNlOm5vbmU7XFxuICAgICAgICBiYWNrZ3JvdW5kOm5vbmU7XFxuICAgICAgICBib3JkZXItcmFkaXVzOiA1MCU7XFxuICAgICAgICBib3JkZXI6bm9uZTtcXG4gICAgICAgIGhlaWdodDoxLjJyZW07XFxuICAgICAgICB3aWR0aDoxLjJyZW07XFxuICAgICAgICBwYWRkaW5nOi4xcmVtO1xcbiAgICAgICAgY29sb3I6JHRoZW1lLWZvbnQ7XFxuICAgICAgICBmb250LWZhbWlseTonT3BlbiBTYW5zJywgc2Fucy1zZXJpZjtcXG4gICAgICAgIGZvbnQtd2VpZ2h0OjcwMDtcXG4gICAgICAgIGZvbnQtc2l6ZTouOHJlbTtcXG4gICAgICAgIGJveC1zaGFkb3c6MXB4IDJweCAzcHggYmxhY2s7XFxuICAgICAgICBcXG5cXG4gICAgfVxcbn1cXG5cXG4uY3JlYXRlLXRvZG8tZm9ybXtcXG4gICAgYm9yZGVyOiAycHggc29saWQgYmxhY2s7XFxuICAgICAgICBoZWlnaHQ6IDIwJTtcXG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgICAgIHRvcDogNTAlO1xcbiAgICAgICAgbGVmdDogNTAlO1xcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogZ3JheTtcXG59XFxuXFxuI3RvZG8tY3JlYXRlLW5ld3tcXG4gICAgaGVpZ2h0OjJyZW07XFxuICAgIHdpZHRoOjEwcmVtO1xcbiAgICBmb250LXNpemU6MXJlbTtcXG4gICAgYm9yZGVyOjJweCBzb2xpZCAkdGhlbWUtZm9udDtcXG4gICAgYm9yZGVyLXJhZGl1czouNXJlbTtcXG4gICAgY29sb3I6JHRoZW1lLWZvbnQ7XFxuICAgIGJhY2tncm91bmQ6IHJnYig0OCwgNDgsIDQ4KTtcXG59XCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzV2l0aE1hcHBpbmdUb1N0cmluZykge1xuICB2YXIgbGlzdCA9IFtdO1xuXG4gIC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBcIlwiO1xuICAgICAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBpdGVtWzVdICE9PSBcInVuZGVmaW5lZFwiO1xuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKTtcbiAgICAgIH1cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpO1xuICAgICAgfVxuICAgICAgY29udGVudCArPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pO1xuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKFwiXCIpO1xuICB9O1xuXG4gIC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG4gIGxpc3QuaSA9IGZ1bmN0aW9uIGkobW9kdWxlcywgbWVkaWEsIGRlZHVwZSwgc3VwcG9ydHMsIGxheWVyKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCB1bmRlZmluZWRdXTtcbiAgICB9XG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBrID0gMDsgayA8IHRoaXMubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgdmFyIGlkID0gdGhpc1trXVswXTtcbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZm9yICh2YXIgX2sgPSAwOyBfayA8IG1vZHVsZXMubGVuZ3RoOyBfaysrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19rXSk7XG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIGxheWVyICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaXRlbVs1XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKG1lZGlhKSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChzdXBwb3J0cykge1xuICAgICAgICBpZiAoIWl0ZW1bNF0pIHtcbiAgICAgICAgICBpdGVtWzRdID0gXCJcIi5jb25jYXQoc3VwcG9ydHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs0XSA9IHN1cHBvcnRzO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gbGlzdDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHVybCwgb3B0aW9ucykge1xuICBpZiAoIW9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cbiAgaWYgKCF1cmwpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9XG4gIHVybCA9IFN0cmluZyh1cmwuX19lc01vZHVsZSA/IHVybC5kZWZhdWx0IDogdXJsKTtcblxuICAvLyBJZiB1cmwgaXMgYWxyZWFkeSB3cmFwcGVkIGluIHF1b3RlcywgcmVtb3ZlIHRoZW1cbiAgaWYgKC9eWydcIl0uKlsnXCJdJC8udGVzdCh1cmwpKSB7XG4gICAgdXJsID0gdXJsLnNsaWNlKDEsIC0xKTtcbiAgfVxuICBpZiAob3B0aW9ucy5oYXNoKSB7XG4gICAgdXJsICs9IG9wdGlvbnMuaGFzaDtcbiAgfVxuXG4gIC8vIFNob3VsZCB1cmwgYmUgd3JhcHBlZD9cbiAgLy8gU2VlIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3MtdmFsdWVzLTMvI3VybHNcbiAgaWYgKC9bXCInKCkgXFx0XFxuXXwoJTIwKS8udGVzdCh1cmwpIHx8IG9wdGlvbnMubmVlZFF1b3Rlcykge1xuICAgIHJldHVybiBcIlxcXCJcIi5jb25jYXQodXJsLnJlcGxhY2UoL1wiL2csICdcXFxcXCInKS5yZXBsYWNlKC9cXG4vZywgXCJcXFxcblwiKSwgXCJcXFwiXCIpO1xuICB9XG4gIHJldHVybiB1cmw7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVtKSB7XG4gIHZhciBjb250ZW50ID0gaXRlbVsxXTtcbiAgdmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuICBpZiAodHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjc3NNYXBwaW5nKSkpKTtcbiAgICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKFwiXFxuXCIpO1xuICB9XG4gIHJldHVybiBbY29udGVudF0uam9pbihcIlxcblwiKTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBzdHlsZXNJbkRPTSA9IFtdO1xuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5ET00ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5ET01baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleEJ5SWRlbnRpZmllciA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXSxcbiAgICAgIHN1cHBvcnRzOiBpdGVtWzRdLFxuICAgICAgbGF5ZXI6IGl0ZW1bNV1cbiAgICB9O1xuICAgIGlmIChpbmRleEJ5SWRlbnRpZmllciAhPT0gLTEpIHtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS5yZWZlcmVuY2VzKys7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0udXBkYXRlcihvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgdXBkYXRlciA9IGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpO1xuICAgICAgb3B0aW9ucy5ieUluZGV4ID0gaTtcbiAgICAgIHN0eWxlc0luRE9NLnNwbGljZShpLCAwLCB7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IHVwZGF0ZXIsXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xuICB9XG4gIHJldHVybiBpZGVudGlmaWVycztcbn1cbmZ1bmN0aW9uIGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIGFwaSA9IG9wdGlvbnMuZG9tQVBJKG9wdGlvbnMpO1xuICBhcGkudXBkYXRlKG9iaik7XG4gIHZhciB1cGRhdGVyID0gZnVuY3Rpb24gdXBkYXRlcihuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwICYmIG5ld09iai5zdXBwb3J0cyA9PT0gb2JqLnN1cHBvcnRzICYmIG5ld09iai5sYXllciA9PT0gb2JqLmxheWVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGFwaS51cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbW92ZSgpO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIHVwZGF0ZXI7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcbiAgICAgIGlmIChzdHlsZXNJbkRPTVtfaW5kZXhdLnJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgICAgc3R5bGVzSW5ET01bX2luZGV4XS51cGRhdGVyKCk7XG4gICAgICAgIHN0eWxlc0luRE9NLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgbWVtbyA9IHt9O1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGdldFRhcmdldCh0YXJnZXQpIHtcbiAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB2YXIgc3R5bGVUYXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7XG5cbiAgICAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gIH1cbiAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbn1cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRCeVNlbGVjdG9yKGluc2VydCwgc3R5bGUpIHtcbiAgdmFyIHRhcmdldCA9IGdldFRhcmdldChpbnNlcnQpO1xuICBpZiAoIXRhcmdldCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0JyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG4gIH1cbiAgdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0QnlTZWxlY3RvcjsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgb3B0aW9ucy5zZXRBdHRyaWJ1dGVzKGVsZW1lbnQsIG9wdGlvbnMuYXR0cmlidXRlcyk7XG4gIG9wdGlvbnMuaW5zZXJ0KGVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG4gIHJldHVybiBlbGVtZW50O1xufVxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzKHN0eWxlRWxlbWVudCkge1xuICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09IFwidW5kZWZpbmVkXCIgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG4gIGlmIChub25jZSkge1xuICAgIHN0eWxlRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLCBub25jZSk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBcIlwiO1xuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQob2JqLnN1cHBvcnRzLCBcIikge1wiKTtcbiAgfVxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwiQG1lZGlhIFwiLmNvbmNhdChvYmoubWVkaWEsIFwiIHtcIik7XG4gIH1cbiAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBvYmoubGF5ZXIgIT09IFwidW5kZWZpbmVkXCI7XG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJAbGF5ZXJcIi5jb25jYXQob2JqLmxheWVyLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQob2JqLmxheWVyKSA6IFwiXCIsIFwiIHtcIik7XG4gIH1cbiAgY3NzICs9IG9iai5jc3M7XG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuICBpZiAoc291cmNlTWFwICYmIHR5cGVvZiBidG9hICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XG4gIH1cblxuICAvLyBGb3Igb2xkIElFXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cbiAgb3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbn1cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZUVsZW1lbnQucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBzdHlsZUVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQpO1xufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGRvbUFQSShvcHRpb25zKSB7XG4gIGlmICh0eXBlb2YgZG9jdW1lbnQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUoKSB7fSxcbiAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge31cbiAgICB9O1xuICB9XG4gIHZhciBzdHlsZUVsZW1lbnQgPSBvcHRpb25zLmluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgcmV0dXJuIHtcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShvYmopIHtcbiAgICAgIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKTtcbiAgICB9LFxuICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCk7XG4gICAgfVxuICB9O1xufVxubW9kdWxlLmV4cG9ydHMgPSBkb21BUEk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQpIHtcbiAgaWYgKHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlRWxlbWVudC5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCk7XG4gICAgfVxuICAgIHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBzdHlsZVRhZ1RyYW5zZm9ybTsiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdGlkOiBtb2R1bGVJZCxcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuLy8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbl9fd2VicGFja19yZXF1aXJlX18ubSA9IF9fd2VicGFja19tb2R1bGVzX187XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcblx0dHJ5IHtcblx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcblx0fVxufSkoKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwidmFyIHNjcmlwdFVybDtcbmlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLmcuaW1wb3J0U2NyaXB0cykgc2NyaXB0VXJsID0gX193ZWJwYWNrX3JlcXVpcmVfXy5nLmxvY2F0aW9uICsgXCJcIjtcbnZhciBkb2N1bWVudCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5kb2N1bWVudDtcbmlmICghc2NyaXB0VXJsICYmIGRvY3VtZW50KSB7XG5cdGlmIChkb2N1bWVudC5jdXJyZW50U2NyaXB0KVxuXHRcdHNjcmlwdFVybCA9IGRvY3VtZW50LmN1cnJlbnRTY3JpcHQuc3JjO1xuXHRpZiAoIXNjcmlwdFVybCkge1xuXHRcdHZhciBzY3JpcHRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIik7XG5cdFx0aWYoc2NyaXB0cy5sZW5ndGgpIHNjcmlwdFVybCA9IHNjcmlwdHNbc2NyaXB0cy5sZW5ndGggLSAxXS5zcmNcblx0fVxufVxuLy8gV2hlbiBzdXBwb3J0aW5nIGJyb3dzZXJzIHdoZXJlIGFuIGF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgeW91IG11c3Qgc3BlY2lmeSBhbiBvdXRwdXQucHVibGljUGF0aCBtYW51YWxseSB2aWEgY29uZmlndXJhdGlvblxuLy8gb3IgcGFzcyBhbiBlbXB0eSBzdHJpbmcgKFwiXCIpIGFuZCBzZXQgdGhlIF9fd2VicGFja19wdWJsaWNfcGF0aF9fIHZhcmlhYmxlIGZyb20geW91ciBjb2RlIHRvIHVzZSB5b3VyIG93biBsb2dpYy5cbmlmICghc2NyaXB0VXJsKSB0aHJvdyBuZXcgRXJyb3IoXCJBdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIGluIHRoaXMgYnJvd3NlclwiKTtcbnNjcmlwdFVybCA9IHNjcmlwdFVybC5yZXBsYWNlKC8jLiokLywgXCJcIikucmVwbGFjZSgvXFw/LiokLywgXCJcIikucmVwbGFjZSgvXFwvW15cXC9dKyQvLCBcIi9cIik7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBzY3JpcHRVcmw7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5iID0gZG9jdW1lbnQuYmFzZVVSSSB8fCBzZWxmLmxvY2F0aW9uLmhyZWY7XG5cbi8vIG9iamVjdCB0byBzdG9yZSBsb2FkZWQgYW5kIGxvYWRpbmcgY2h1bmtzXG4vLyB1bmRlZmluZWQgPSBjaHVuayBub3QgbG9hZGVkLCBudWxsID0gY2h1bmsgcHJlbG9hZGVkL3ByZWZldGNoZWRcbi8vIFtyZXNvbHZlLCByZWplY3QsIFByb21pc2VdID0gY2h1bmsgbG9hZGluZywgMCA9IGNodW5rIGxvYWRlZFxudmFyIGluc3RhbGxlZENodW5rcyA9IHtcblx0MTc5OiAwXG59O1xuXG4vLyBubyBjaHVuayBvbiBkZW1hbmQgbG9hZGluZ1xuXG4vLyBubyBwcmVmZXRjaGluZ1xuXG4vLyBubyBwcmVsb2FkZWRcblxuLy8gbm8gSE1SXG5cbi8vIG5vIEhNUiBtYW5pZmVzdFxuXG4vLyBubyBvbiBjaHVua3MgbG9hZGVkXG5cbi8vIG5vIGpzb25wIGZ1bmN0aW9uIiwiX193ZWJwYWNrX3JlcXVpcmVfXy5uYyA9IHVuZGVmaW5lZDsiLCJcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVG9kbyB7XG4gIGNvbnN0cnVjdG9yKFRpdGxlLCBEZXNjcmlwdGlvbiwgZHVlRGF0ZSwgcHJpb3JpdHksIGlkKSB7XG4gICAgdGhpcy5fdGl0bGUgPSBUaXRsZTtcbiAgICB0aGlzLl9kZXNjcmlwdGlvbiA9IERlc2NyaXB0aW9uO1xuICAgIHRoaXMuX2R1ZURhdGUgPSBkdWVEYXRlO1xuICAgIHRoaXMuX3ByaW9yaXR5ID0gcHJpb3JpdHk7XG4gICAgdGhpcy5pZCA9IGlkO1xuICB9XG4gIGdldCB0aXRsZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fdGl0bGU7XG4gIH1cbiAgZ2V0IGRlc2NyaXB0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLl9kZXNjcmlwdGlvbjtcbiAgfVxuICBnZXQgZHVlRGF0ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fZHVlRGF0ZTtcbiAgfVxuICBnZXQgcHJpb3JpdHkoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3ByaW9yaXR5O1xuICB9XG4gIGdldCBpZCgpIHtcbiAgICByZXR1cm4gdGhpcy5faWQ7XG4gIH1cbiAgc2V0IHRpdGxlKHRpdGxlKSB7XG4gICAgXG4gICAgdGhpcy5fdGl0bGUgPSB0aXRsZTtcbiAgfVxuICBzZXQgZGVzY3JpcHRpb24oZGVzY3JpcHRpb24pIHtcbiAgICB0aGlzLl9kZXNjcmlwdGlvbiA9IGRlc2NyaXB0aW9uO1xuICB9XG4gIHNldCBkdWVEYXRlKGR1ZURhdGUpIHtcbiAgICB0aGlzLl9kdWVEYXRlID0gZHVlRGF0ZTtcbiAgfVxuICBzZXQgcHJpb3JpdHkocHJpb3JpdHkpIHtcbiAgICB0aGlzLl9wcmlvcml0eSA9IHByaW9yaXR5O1xuICB9XG4gIHNldCBpZChpZCkge1xuICAgIHRoaXMuX2lkID0gaWQ7XG4gIH1cbn1cbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFByb2plY3Qge1xuICB0b2RvcyA9IFtdO1xuICBjb25zdHJ1Y3Rvcih0aXRsZSwgaWQsIGRpdikge1xuICAgIHRoaXMuX3RpdGxlID0gdGl0bGU7XG4gICAgdGhpcy5faWQgPSBpZDtcbiAgICB0aGlzLl9kaXYgPSBkaXY7XG4gIH1cbiAgZ2V0IHRpdGxlKCkge1xuICAgIHJldHVybiB0aGlzLl90aXRsZTtcbiAgfVxuICBzZXQgdGl0bGUodGl0bGUpIHtcbiAgICB0aGlzLl90aXRsZSA9IHRpdGxlO1xuICB9XG4gIGdldCBpZCgpIHtcbiAgICByZXR1cm4gdGhpcy5faWQ7XG4gIH1cbiAgZ2V0IGRpdigpIHtcbiAgICByZXR1cm4gdGhpcy5fZGl2O1xuICB9XG4gIHNldCBkaXYoZGl2KSB7XG4gICAgdGhpcy5fZGl2ID0gZGl2O1xuICB9XG4gIFxuICBhZGRUb2RvKHRvZG8pIHtcbiAgICB0aGlzLnRvZG9zLnB1c2godG9kbyk7XG4gIH1cbiAgZ2V0QWxsKCkge1xuICAgIHJldHVybiB0aGlzLnRvZG9zO1xuICB9XG59XG4iLCJjb25zdCByZW1vdmVFbGVtZW50PShvYmplY3QsIGlkKT0+IHtcbiAgICBsZXQgYXJyYXkgPSBvYmplY3QuZ2V0QWxsKCk7XG4gICAgZm9yIChsZXQgaSBpbiBhcnJheSkge1xuICAgICAgaWYgKGFycmF5W2ldLmlkID09IGlkKSB7XG4gICAgICAgIGFycmF5LnNwbGljZShpLDEpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBleHBvcnQgZGVmYXVsdCByZW1vdmVFbGVtZW50OyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlcXVpcmVkQXJncyhyZXF1aXJlZCwgYXJncykge1xuICBpZiAoYXJncy5sZW5ndGggPCByZXF1aXJlZCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IocmVxdWlyZWQgKyAnIGFyZ3VtZW50JyArIChyZXF1aXJlZCA+IDEgPyAncycgOiAnJykgKyAnIHJlcXVpcmVkLCBidXQgb25seSAnICsgYXJncy5sZW5ndGggKyAnIHByZXNlbnQnKTtcbiAgfVxufSIsImZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgaXNEYXRlXG4gKiBAY2F0ZWdvcnkgQ29tbW9uIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IElzIHRoZSBnaXZlbiB2YWx1ZSBhIGRhdGU/XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIGdpdmVuIHZhbHVlIGlzIGFuIGluc3RhbmNlIG9mIERhdGUuIFRoZSBmdW5jdGlvbiB3b3JrcyBmb3IgZGF0ZXMgdHJhbnNmZXJyZWQgYWNyb3NzIGlmcmFtZXMuXG4gKlxuICogQHBhcmFtIHsqfSB2YWx1ZSAtIHRoZSB2YWx1ZSB0byBjaGVja1xuICogQHJldHVybnMge2Jvb2xlYW59IHRydWUgaWYgdGhlIGdpdmVuIHZhbHVlIGlzIGEgZGF0ZVxuICogQHRocm93cyB7VHlwZUVycm9yfSAxIGFyZ3VtZW50cyByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3IgYSB2YWxpZCBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gaXNEYXRlKG5ldyBEYXRlKCkpXG4gKiAvLz0+IHRydWVcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIGFuIGludmFsaWQgZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IGlzRGF0ZShuZXcgRGF0ZShOYU4pKVxuICogLy89PiB0cnVlXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEZvciBzb21lIHZhbHVlOlxuICogY29uc3QgcmVzdWx0ID0gaXNEYXRlKCcyMDE0LTAyLTMxJylcbiAqIC8vPT4gZmFsc2VcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIGFuIG9iamVjdDpcbiAqIGNvbnN0IHJlc3VsdCA9IGlzRGF0ZSh7fSlcbiAqIC8vPT4gZmFsc2VcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc0RhdGUodmFsdWUpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIERhdGUgfHwgX3R5cGVvZih2YWx1ZSkgPT09ICdvYmplY3QnICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09ICdbb2JqZWN0IERhdGVdJztcbn0iLCJmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG4vKipcbiAqIEBuYW1lIHRvRGF0ZVxuICogQGNhdGVnb3J5IENvbW1vbiBIZWxwZXJzXG4gKiBAc3VtbWFyeSBDb252ZXJ0IHRoZSBnaXZlbiBhcmd1bWVudCB0byBhbiBpbnN0YW5jZSBvZiBEYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQ29udmVydCB0aGUgZ2l2ZW4gYXJndW1lbnQgdG8gYW4gaW5zdGFuY2Ugb2YgRGF0ZS5cbiAqXG4gKiBJZiB0aGUgYXJndW1lbnQgaXMgYW4gaW5zdGFuY2Ugb2YgRGF0ZSwgdGhlIGZ1bmN0aW9uIHJldHVybnMgaXRzIGNsb25lLlxuICpcbiAqIElmIHRoZSBhcmd1bWVudCBpcyBhIG51bWJlciwgaXQgaXMgdHJlYXRlZCBhcyBhIHRpbWVzdGFtcC5cbiAqXG4gKiBJZiB0aGUgYXJndW1lbnQgaXMgbm9uZSBvZiB0aGUgYWJvdmUsIHRoZSBmdW5jdGlvbiByZXR1cm5zIEludmFsaWQgRGF0ZS5cbiAqXG4gKiAqKk5vdGUqKjogKmFsbCogRGF0ZSBhcmd1bWVudHMgcGFzc2VkIHRvIGFueSAqZGF0ZS1mbnMqIGZ1bmN0aW9uIGlzIHByb2Nlc3NlZCBieSBgdG9EYXRlYC5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBhcmd1bWVudCAtIHRoZSB2YWx1ZSB0byBjb252ZXJ0XG4gKiBAcmV0dXJucyB7RGF0ZX0gdGhlIHBhcnNlZCBkYXRlIGluIHRoZSBsb2NhbCB0aW1lIHpvbmVcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMSBhcmd1bWVudCByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBDbG9uZSB0aGUgZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IHRvRGF0ZShuZXcgRGF0ZSgyMDE0LCAxLCAxMSwgMTEsIDMwLCAzMCkpXG4gKiAvLz0+IFR1ZSBGZWIgMTEgMjAxNCAxMTozMDozMFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBDb252ZXJ0IHRoZSB0aW1lc3RhbXAgdG8gZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IHRvRGF0ZSgxMzkyMDk4NDMwMDAwKVxuICogLy89PiBUdWUgRmViIDExIDIwMTQgMTE6MzA6MzBcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0b0RhdGUoYXJndW1lbnQpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBhcmdTdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJndW1lbnQpOyAvLyBDbG9uZSB0aGUgZGF0ZVxuXG4gIGlmIChhcmd1bWVudCBpbnN0YW5jZW9mIERhdGUgfHwgX3R5cGVvZihhcmd1bWVudCkgPT09ICdvYmplY3QnICYmIGFyZ1N0ciA9PT0gJ1tvYmplY3QgRGF0ZV0nKSB7XG4gICAgLy8gUHJldmVudCB0aGUgZGF0ZSB0byBsb3NlIHRoZSBtaWxsaXNlY29uZHMgd2hlbiBwYXNzZWQgdG8gbmV3IERhdGUoKSBpbiBJRTEwXG4gICAgcmV0dXJuIG5ldyBEYXRlKGFyZ3VtZW50LmdldFRpbWUoKSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGFyZ3VtZW50ID09PSAnbnVtYmVyJyB8fCBhcmdTdHIgPT09ICdbb2JqZWN0IE51bWJlcl0nKSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKGFyZ3VtZW50KTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoKHR5cGVvZiBhcmd1bWVudCA9PT0gJ3N0cmluZycgfHwgYXJnU3RyID09PSAnW29iamVjdCBTdHJpbmddJykgJiYgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgY29uc29sZS53YXJuKFwiU3RhcnRpbmcgd2l0aCB2Mi4wLjAtYmV0YS4xIGRhdGUtZm5zIGRvZXNuJ3QgYWNjZXB0IHN0cmluZ3MgYXMgZGF0ZSBhcmd1bWVudHMuIFBsZWFzZSB1c2UgYHBhcnNlSVNPYCB0byBwYXJzZSBzdHJpbmdzLiBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VwZ3JhZGVHdWlkZS5tZCNzdHJpbmctYXJndW1lbnRzXCIpOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuXG4gICAgICBjb25zb2xlLndhcm4obmV3IEVycm9yKCkuc3RhY2spO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgRGF0ZShOYU4pO1xuICB9XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdG9JbnRlZ2VyKGRpcnR5TnVtYmVyKSB7XG4gIGlmIChkaXJ0eU51bWJlciA9PT0gbnVsbCB8fCBkaXJ0eU51bWJlciA9PT0gdHJ1ZSB8fCBkaXJ0eU51bWJlciA9PT0gZmFsc2UpIHtcbiAgICByZXR1cm4gTmFOO1xuICB9XG5cbiAgdmFyIG51bWJlciA9IE51bWJlcihkaXJ0eU51bWJlcik7XG5cbiAgaWYgKGlzTmFOKG51bWJlcikpIHtcbiAgICByZXR1cm4gbnVtYmVyO1xuICB9XG5cbiAgcmV0dXJuIG51bWJlciA8IDAgPyBNYXRoLmNlaWwobnVtYmVyKSA6IE1hdGguZmxvb3IobnVtYmVyKTtcbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi8uLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3RhcnRPZlVUQ0lTT1dlZWsoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgd2Vla1N0YXJ0c09uID0gMTtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIGRheSA9IGRhdGUuZ2V0VVRDRGF5KCk7XG4gIHZhciBkaWZmID0gKGRheSA8IHdlZWtTdGFydHNPbiA/IDcgOiAwKSArIGRheSAtIHdlZWtTdGFydHNPbjtcbiAgZGF0ZS5zZXRVVENEYXRlKGRhdGUuZ2V0VVRDRGF0ZSgpIC0gZGlmZik7XG4gIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHJldHVybiBkYXRlO1xufSIsImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uLy4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG5pbXBvcnQgc3RhcnRPZlVUQ0lTT1dlZWsgZnJvbSBcIi4uL3N0YXJ0T2ZVVENJU09XZWVrL2luZGV4LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRVVENJU09XZWVrWWVhcihkaXJ0eURhdGUpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciB5ZWFyID0gZGF0ZS5nZXRVVENGdWxsWWVhcigpO1xuICB2YXIgZm91cnRoT2ZKYW51YXJ5T2ZOZXh0WWVhciA9IG5ldyBEYXRlKDApO1xuICBmb3VydGhPZkphbnVhcnlPZk5leHRZZWFyLnNldFVUQ0Z1bGxZZWFyKHllYXIgKyAxLCAwLCA0KTtcbiAgZm91cnRoT2ZKYW51YXJ5T2ZOZXh0WWVhci5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgdmFyIHN0YXJ0T2ZOZXh0WWVhciA9IHN0YXJ0T2ZVVENJU09XZWVrKGZvdXJ0aE9mSmFudWFyeU9mTmV4dFllYXIpO1xuICB2YXIgZm91cnRoT2ZKYW51YXJ5T2ZUaGlzWWVhciA9IG5ldyBEYXRlKDApO1xuICBmb3VydGhPZkphbnVhcnlPZlRoaXNZZWFyLnNldFVUQ0Z1bGxZZWFyKHllYXIsIDAsIDQpO1xuICBmb3VydGhPZkphbnVhcnlPZlRoaXNZZWFyLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICB2YXIgc3RhcnRPZlRoaXNZZWFyID0gc3RhcnRPZlVUQ0lTT1dlZWsoZm91cnRoT2ZKYW51YXJ5T2ZUaGlzWWVhcik7XG5cbiAgaWYgKGRhdGUuZ2V0VGltZSgpID49IHN0YXJ0T2ZOZXh0WWVhci5nZXRUaW1lKCkpIHtcbiAgICByZXR1cm4geWVhciArIDE7XG4gIH0gZWxzZSBpZiAoZGF0ZS5nZXRUaW1lKCkgPj0gc3RhcnRPZlRoaXNZZWFyLmdldFRpbWUoKSkge1xuICAgIHJldHVybiB5ZWFyO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB5ZWFyIC0gMTtcbiAgfVxufSIsImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uLy4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHN0YXJ0T2ZVVENJU09XZWVrIGZyb20gXCIuLi9zdGFydE9mVVRDSVNPV2Vlay9pbmRleC5qc1wiO1xuaW1wb3J0IHN0YXJ0T2ZVVENJU09XZWVrWWVhciBmcm9tIFwiLi4vc3RhcnRPZlVUQ0lTT1dlZWtZZWFyL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbnZhciBNSUxMSVNFQ09ORFNfSU5fV0VFSyA9IDYwNDgwMDAwMDtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFVUQ0lTT1dlZWsoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgZGlmZiA9IHN0YXJ0T2ZVVENJU09XZWVrKGRhdGUpLmdldFRpbWUoKSAtIHN0YXJ0T2ZVVENJU09XZWVrWWVhcihkYXRlKS5nZXRUaW1lKCk7IC8vIFJvdW5kIHRoZSBudW1iZXIgb2YgZGF5cyB0byB0aGUgbmVhcmVzdCBpbnRlZ2VyXG4gIC8vIGJlY2F1c2UgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgaW4gYSB3ZWVrIGlzIG5vdCBjb25zdGFudFxuICAvLyAoZS5nLiBpdCdzIGRpZmZlcmVudCBpbiB0aGUgd2VlayBvZiB0aGUgZGF5bGlnaHQgc2F2aW5nIHRpbWUgY2xvY2sgc2hpZnQpXG5cbiAgcmV0dXJuIE1hdGgucm91bmQoZGlmZiAvIE1JTExJU0VDT05EU19JTl9XRUVLKSArIDE7XG59IiwidmFyIGRlZmF1bHRPcHRpb25zID0ge307XG5leHBvcnQgZnVuY3Rpb24gZ2V0RGVmYXVsdE9wdGlvbnMoKSB7XG4gIHJldHVybiBkZWZhdWx0T3B0aW9ucztcbn1cbmV4cG9ydCBmdW5jdGlvbiBzZXREZWZhdWx0T3B0aW9ucyhuZXdPcHRpb25zKSB7XG4gIGRlZmF1bHRPcHRpb25zID0gbmV3T3B0aW9ucztcbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi8uLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuaW1wb3J0IHRvSW50ZWdlciBmcm9tIFwiLi4vdG9JbnRlZ2VyL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBnZXREZWZhdWx0T3B0aW9ucyB9IGZyb20gXCIuLi9kZWZhdWx0T3B0aW9ucy9pbmRleC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3RhcnRPZlVUQ1dlZWsoZGlydHlEYXRlLCBvcHRpb25zKSB7XG4gIHZhciBfcmVmLCBfcmVmMiwgX3JlZjMsIF9vcHRpb25zJHdlZWtTdGFydHNPbiwgX29wdGlvbnMkbG9jYWxlLCBfb3B0aW9ucyRsb2NhbGUkb3B0aW8sIF9kZWZhdWx0T3B0aW9ucyRsb2NhbCwgX2RlZmF1bHRPcHRpb25zJGxvY2FsMjtcblxuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGRlZmF1bHRPcHRpb25zID0gZ2V0RGVmYXVsdE9wdGlvbnMoKTtcbiAgdmFyIHdlZWtTdGFydHNPbiA9IHRvSW50ZWdlcigoX3JlZiA9IChfcmVmMiA9IChfcmVmMyA9IChfb3B0aW9ucyR3ZWVrU3RhcnRzT24gPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMud2Vla1N0YXJ0c09uKSAhPT0gbnVsbCAmJiBfb3B0aW9ucyR3ZWVrU3RhcnRzT24gIT09IHZvaWQgMCA/IF9vcHRpb25zJHdlZWtTdGFydHNPbiA6IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9vcHRpb25zJGxvY2FsZSA9IG9wdGlvbnMubG9jYWxlKSA9PT0gbnVsbCB8fCBfb3B0aW9ucyRsb2NhbGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfb3B0aW9ucyRsb2NhbGUkb3B0aW8gPSBfb3B0aW9ucyRsb2NhbGUub3B0aW9ucykgPT09IG51bGwgfHwgX29wdGlvbnMkbG9jYWxlJG9wdGlvID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfb3B0aW9ucyRsb2NhbGUkb3B0aW8ud2Vla1N0YXJ0c09uKSAhPT0gbnVsbCAmJiBfcmVmMyAhPT0gdm9pZCAwID8gX3JlZjMgOiBkZWZhdWx0T3B0aW9ucy53ZWVrU3RhcnRzT24pICE9PSBudWxsICYmIF9yZWYyICE9PSB2b2lkIDAgPyBfcmVmMiA6IChfZGVmYXVsdE9wdGlvbnMkbG9jYWwgPSBkZWZhdWx0T3B0aW9ucy5sb2NhbGUpID09PSBudWxsIHx8IF9kZWZhdWx0T3B0aW9ucyRsb2NhbCA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9kZWZhdWx0T3B0aW9ucyRsb2NhbDIgPSBfZGVmYXVsdE9wdGlvbnMkbG9jYWwub3B0aW9ucykgPT09IG51bGwgfHwgX2RlZmF1bHRPcHRpb25zJGxvY2FsMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2RlZmF1bHRPcHRpb25zJGxvY2FsMi53ZWVrU3RhcnRzT24pICE9PSBudWxsICYmIF9yZWYgIT09IHZvaWQgMCA/IF9yZWYgOiAwKTsgLy8gVGVzdCBpZiB3ZWVrU3RhcnRzT24gaXMgYmV0d2VlbiAwIGFuZCA2IF9hbmRfIGlzIG5vdCBOYU5cblxuICBpZiAoISh3ZWVrU3RhcnRzT24gPj0gMCAmJiB3ZWVrU3RhcnRzT24gPD0gNikpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignd2Vla1N0YXJ0c09uIG11c3QgYmUgYmV0d2VlbiAwIGFuZCA2IGluY2x1c2l2ZWx5Jyk7XG4gIH1cblxuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgZGF5ID0gZGF0ZS5nZXRVVENEYXkoKTtcbiAgdmFyIGRpZmYgPSAoZGF5IDwgd2Vla1N0YXJ0c09uID8gNyA6IDApICsgZGF5IC0gd2Vla1N0YXJ0c09uO1xuICBkYXRlLnNldFVUQ0RhdGUoZGF0ZS5nZXRVVENEYXRlKCkgLSBkaWZmKTtcbiAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgcmV0dXJuIGRhdGU7XG59IiwiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbmltcG9ydCBzdGFydE9mVVRDV2VlayBmcm9tIFwiLi4vc3RhcnRPZlVUQ1dlZWsvaW5kZXguanNcIjtcbmltcG9ydCB0b0ludGVnZXIgZnJvbSBcIi4uL3RvSW50ZWdlci9pbmRleC5qc1wiO1xuaW1wb3J0IHsgZ2V0RGVmYXVsdE9wdGlvbnMgfSBmcm9tIFwiLi4vZGVmYXVsdE9wdGlvbnMvaW5kZXguanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFVUQ1dlZWtZZWFyKGRpcnR5RGF0ZSwgb3B0aW9ucykge1xuICB2YXIgX3JlZiwgX3JlZjIsIF9yZWYzLCBfb3B0aW9ucyRmaXJzdFdlZWtDb24sIF9vcHRpb25zJGxvY2FsZSwgX29wdGlvbnMkbG9jYWxlJG9wdGlvLCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwsIF9kZWZhdWx0T3B0aW9ucyRsb2NhbDI7XG5cbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciB5ZWFyID0gZGF0ZS5nZXRVVENGdWxsWWVhcigpO1xuICB2YXIgZGVmYXVsdE9wdGlvbnMgPSBnZXREZWZhdWx0T3B0aW9ucygpO1xuICB2YXIgZmlyc3RXZWVrQ29udGFpbnNEYXRlID0gdG9JbnRlZ2VyKChfcmVmID0gKF9yZWYyID0gKF9yZWYzID0gKF9vcHRpb25zJGZpcnN0V2Vla0NvbiA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGUpICE9PSBudWxsICYmIF9vcHRpb25zJGZpcnN0V2Vla0NvbiAhPT0gdm9pZCAwID8gX29wdGlvbnMkZmlyc3RXZWVrQ29uIDogb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX29wdGlvbnMkbG9jYWxlID0gb3B0aW9ucy5sb2NhbGUpID09PSBudWxsIHx8IF9vcHRpb25zJGxvY2FsZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9vcHRpb25zJGxvY2FsZSRvcHRpbyA9IF9vcHRpb25zJGxvY2FsZS5vcHRpb25zKSA9PT0gbnVsbCB8fCBfb3B0aW9ucyRsb2NhbGUkb3B0aW8gPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9vcHRpb25zJGxvY2FsZSRvcHRpby5maXJzdFdlZWtDb250YWluc0RhdGUpICE9PSBudWxsICYmIF9yZWYzICE9PSB2b2lkIDAgPyBfcmVmMyA6IGRlZmF1bHRPcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSkgIT09IG51bGwgJiYgX3JlZjIgIT09IHZvaWQgMCA/IF9yZWYyIDogKF9kZWZhdWx0T3B0aW9ucyRsb2NhbCA9IGRlZmF1bHRPcHRpb25zLmxvY2FsZSkgPT09IG51bGwgfHwgX2RlZmF1bHRPcHRpb25zJGxvY2FsID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX2RlZmF1bHRPcHRpb25zJGxvY2FsMiA9IF9kZWZhdWx0T3B0aW9ucyRsb2NhbC5vcHRpb25zKSA9PT0gbnVsbCB8fCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZGVmYXVsdE9wdGlvbnMkbG9jYWwyLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSkgIT09IG51bGwgJiYgX3JlZiAhPT0gdm9pZCAwID8gX3JlZiA6IDEpOyAvLyBUZXN0IGlmIHdlZWtTdGFydHNPbiBpcyBiZXR3ZWVuIDEgYW5kIDcgX2FuZF8gaXMgbm90IE5hTlxuXG4gIGlmICghKGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA+PSAxICYmIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA8PSA3KSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdmaXJzdFdlZWtDb250YWluc0RhdGUgbXVzdCBiZSBiZXR3ZWVuIDEgYW5kIDcgaW5jbHVzaXZlbHknKTtcbiAgfVxuXG4gIHZhciBmaXJzdFdlZWtPZk5leHRZZWFyID0gbmV3IERhdGUoMCk7XG4gIGZpcnN0V2Vla09mTmV4dFllYXIuc2V0VVRDRnVsbFllYXIoeWVhciArIDEsIDAsIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSk7XG4gIGZpcnN0V2Vla09mTmV4dFllYXIuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHZhciBzdGFydE9mTmV4dFllYXIgPSBzdGFydE9mVVRDV2VlayhmaXJzdFdlZWtPZk5leHRZZWFyLCBvcHRpb25zKTtcbiAgdmFyIGZpcnN0V2Vla09mVGhpc1llYXIgPSBuZXcgRGF0ZSgwKTtcbiAgZmlyc3RXZWVrT2ZUaGlzWWVhci5zZXRVVENGdWxsWWVhcih5ZWFyLCAwLCBmaXJzdFdlZWtDb250YWluc0RhdGUpO1xuICBmaXJzdFdlZWtPZlRoaXNZZWFyLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICB2YXIgc3RhcnRPZlRoaXNZZWFyID0gc3RhcnRPZlVUQ1dlZWsoZmlyc3RXZWVrT2ZUaGlzWWVhciwgb3B0aW9ucyk7XG5cbiAgaWYgKGRhdGUuZ2V0VGltZSgpID49IHN0YXJ0T2ZOZXh0WWVhci5nZXRUaW1lKCkpIHtcbiAgICByZXR1cm4geWVhciArIDE7XG4gIH0gZWxzZSBpZiAoZGF0ZS5nZXRUaW1lKCkgPj0gc3RhcnRPZlRoaXNZZWFyLmdldFRpbWUoKSkge1xuICAgIHJldHVybiB5ZWFyO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB5ZWFyIC0gMTtcbiAgfVxufSIsImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uLy4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHN0YXJ0T2ZVVENXZWVrIGZyb20gXCIuLi9zdGFydE9mVVRDV2Vlay9pbmRleC5qc1wiO1xuaW1wb3J0IHN0YXJ0T2ZVVENXZWVrWWVhciBmcm9tIFwiLi4vc3RhcnRPZlVUQ1dlZWtZZWFyL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbnZhciBNSUxMSVNFQ09ORFNfSU5fV0VFSyA9IDYwNDgwMDAwMDtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFVUQ1dlZWsoZGlydHlEYXRlLCBvcHRpb25zKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgZGlmZiA9IHN0YXJ0T2ZVVENXZWVrKGRhdGUsIG9wdGlvbnMpLmdldFRpbWUoKSAtIHN0YXJ0T2ZVVENXZWVrWWVhcihkYXRlLCBvcHRpb25zKS5nZXRUaW1lKCk7IC8vIFJvdW5kIHRoZSBudW1iZXIgb2YgZGF5cyB0byB0aGUgbmVhcmVzdCBpbnRlZ2VyXG4gIC8vIGJlY2F1c2UgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgaW4gYSB3ZWVrIGlzIG5vdCBjb25zdGFudFxuICAvLyAoZS5nLiBpdCdzIGRpZmZlcmVudCBpbiB0aGUgd2VlayBvZiB0aGUgZGF5bGlnaHQgc2F2aW5nIHRpbWUgY2xvY2sgc2hpZnQpXG5cbiAgcmV0dXJuIE1hdGgucm91bmQoZGlmZiAvIE1JTExJU0VDT05EU19JTl9XRUVLKSArIDE7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWRkTGVhZGluZ1plcm9zKG51bWJlciwgdGFyZ2V0TGVuZ3RoKSB7XG4gIHZhciBzaWduID0gbnVtYmVyIDwgMCA/ICctJyA6ICcnO1xuICB2YXIgb3V0cHV0ID0gTWF0aC5hYnMobnVtYmVyKS50b1N0cmluZygpO1xuXG4gIHdoaWxlIChvdXRwdXQubGVuZ3RoIDwgdGFyZ2V0TGVuZ3RoKSB7XG4gICAgb3V0cHV0ID0gJzAnICsgb3V0cHV0O1xuICB9XG5cbiAgcmV0dXJuIHNpZ24gKyBvdXRwdXQ7XG59IiwiaW1wb3J0IGFkZExlYWRpbmdaZXJvcyBmcm9tIFwiLi4vLi4vYWRkTGVhZGluZ1plcm9zL2luZGV4LmpzXCI7XG4vKlxuICogfCAgICAgfCBVbml0ICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBVbml0ICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfC0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfFxuICogfCAgYSAgfCBBTSwgUE0gICAgICAgICAgICAgICAgICAgICAgICAgfCAgQSogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgZCAgfCBEYXkgb2YgbW9udGggICAgICAgICAgICAgICAgICAgfCAgRCAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgaCAgfCBIb3VyIFsxLTEyXSAgICAgICAgICAgICAgICAgICAgfCAgSCAgfCBIb3VyIFswLTIzXSAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgbSAgfCBNaW51dGUgICAgICAgICAgICAgICAgICAgICAgICAgfCAgTSAgfCBNb250aCAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgcyAgfCBTZWNvbmQgICAgICAgICAgICAgICAgICAgICAgICAgfCAgUyAgfCBGcmFjdGlvbiBvZiBzZWNvbmQgICAgICAgICAgICAgfFxuICogfCAgeSAgfCBZZWFyIChhYnMpICAgICAgICAgICAgICAgICAgICAgfCAgWSAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICpcbiAqIExldHRlcnMgbWFya2VkIGJ5ICogYXJlIG5vdCBpbXBsZW1lbnRlZCBidXQgcmVzZXJ2ZWQgYnkgVW5pY29kZSBzdGFuZGFyZC5cbiAqL1xuXG52YXIgZm9ybWF0dGVycyA9IHtcbiAgLy8gWWVhclxuICB5OiBmdW5jdGlvbiB5KGRhdGUsIHRva2VuKSB7XG4gICAgLy8gRnJvbSBodHRwOi8vd3d3LnVuaWNvZGUub3JnL3JlcG9ydHMvdHIzNS90cjM1LTMxL3RyMzUtZGF0ZXMuaHRtbCNEYXRlX0Zvcm1hdF90b2tlbnNcbiAgICAvLyB8IFllYXIgICAgIHwgICAgIHkgfCB5eSB8ICAgeXl5IHwgIHl5eXkgfCB5eXl5eSB8XG4gICAgLy8gfC0tLS0tLS0tLS18LS0tLS0tLXwtLS0tfC0tLS0tLS18LS0tLS0tLXwtLS0tLS0tfFxuICAgIC8vIHwgQUQgMSAgICAgfCAgICAgMSB8IDAxIHwgICAwMDEgfCAgMDAwMSB8IDAwMDAxIHxcbiAgICAvLyB8IEFEIDEyICAgIHwgICAgMTIgfCAxMiB8ICAgMDEyIHwgIDAwMTIgfCAwMDAxMiB8XG4gICAgLy8gfCBBRCAxMjMgICB8ICAgMTIzIHwgMjMgfCAgIDEyMyB8ICAwMTIzIHwgMDAxMjMgfFxuICAgIC8vIHwgQUQgMTIzNCAgfCAgMTIzNCB8IDM0IHwgIDEyMzQgfCAgMTIzNCB8IDAxMjM0IHxcbiAgICAvLyB8IEFEIDEyMzQ1IHwgMTIzNDUgfCA0NSB8IDEyMzQ1IHwgMTIzNDUgfCAxMjM0NSB8XG4gICAgdmFyIHNpZ25lZFllYXIgPSBkYXRlLmdldFVUQ0Z1bGxZZWFyKCk7IC8vIFJldHVybnMgMSBmb3IgMSBCQyAod2hpY2ggaXMgeWVhciAwIGluIEphdmFTY3JpcHQpXG5cbiAgICB2YXIgeWVhciA9IHNpZ25lZFllYXIgPiAwID8gc2lnbmVkWWVhciA6IDEgLSBzaWduZWRZZWFyO1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3ModG9rZW4gPT09ICd5eScgPyB5ZWFyICUgMTAwIDogeWVhciwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gTW9udGhcbiAgTTogZnVuY3Rpb24gTShkYXRlLCB0b2tlbikge1xuICAgIHZhciBtb250aCA9IGRhdGUuZ2V0VVRDTW9udGgoKTtcbiAgICByZXR1cm4gdG9rZW4gPT09ICdNJyA/IFN0cmluZyhtb250aCArIDEpIDogYWRkTGVhZGluZ1plcm9zKG1vbnRoICsgMSwgMik7XG4gIH0sXG4gIC8vIERheSBvZiB0aGUgbW9udGhcbiAgZDogZnVuY3Rpb24gZChkYXRlLCB0b2tlbikge1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF0ZS5nZXRVVENEYXRlKCksIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIEFNIG9yIFBNXG4gIGE6IGZ1bmN0aW9uIGEoZGF0ZSwgdG9rZW4pIHtcbiAgICB2YXIgZGF5UGVyaW9kRW51bVZhbHVlID0gZGF0ZS5nZXRVVENIb3VycygpIC8gMTIgPj0gMSA/ICdwbScgOiAnYW0nO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgY2FzZSAnYSc6XG4gICAgICBjYXNlICdhYSc6XG4gICAgICAgIHJldHVybiBkYXlQZXJpb2RFbnVtVmFsdWUudG9VcHBlckNhc2UoKTtcblxuICAgICAgY2FzZSAnYWFhJzpcbiAgICAgICAgcmV0dXJuIGRheVBlcmlvZEVudW1WYWx1ZTtcblxuICAgICAgY2FzZSAnYWFhYWEnOlxuICAgICAgICByZXR1cm4gZGF5UGVyaW9kRW51bVZhbHVlWzBdO1xuXG4gICAgICBjYXNlICdhYWFhJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBkYXlQZXJpb2RFbnVtVmFsdWUgPT09ICdhbScgPyAnYS5tLicgOiAncC5tLic7XG4gICAgfVxuICB9LFxuICAvLyBIb3VyIFsxLTEyXVxuICBoOiBmdW5jdGlvbiBoKGRhdGUsIHRva2VuKSB7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhkYXRlLmdldFVUQ0hvdXJzKCkgJSAxMiB8fCAxMiwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gSG91ciBbMC0yM11cbiAgSDogZnVuY3Rpb24gSChkYXRlLCB0b2tlbikge1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF0ZS5nZXRVVENIb3VycygpLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBNaW51dGVcbiAgbTogZnVuY3Rpb24gbShkYXRlLCB0b2tlbikge1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF0ZS5nZXRVVENNaW51dGVzKCksIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIFNlY29uZFxuICBzOiBmdW5jdGlvbiBzKGRhdGUsIHRva2VuKSB7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhkYXRlLmdldFVUQ1NlY29uZHMoKSwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gRnJhY3Rpb24gb2Ygc2Vjb25kXG4gIFM6IGZ1bmN0aW9uIFMoZGF0ZSwgdG9rZW4pIHtcbiAgICB2YXIgbnVtYmVyT2ZEaWdpdHMgPSB0b2tlbi5sZW5ndGg7XG4gICAgdmFyIG1pbGxpc2Vjb25kcyA9IGRhdGUuZ2V0VVRDTWlsbGlzZWNvbmRzKCk7XG4gICAgdmFyIGZyYWN0aW9uYWxTZWNvbmRzID0gTWF0aC5mbG9vcihtaWxsaXNlY29uZHMgKiBNYXRoLnBvdygxMCwgbnVtYmVyT2ZEaWdpdHMgLSAzKSk7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhmcmFjdGlvbmFsU2Vjb25kcywgdG9rZW4ubGVuZ3RoKTtcbiAgfVxufTtcbmV4cG9ydCBkZWZhdWx0IGZvcm1hdHRlcnM7IiwiaW1wb3J0IGdldFVUQ0RheU9mWWVhciBmcm9tIFwiLi4vLi4vLi4vX2xpYi9nZXRVVENEYXlPZlllYXIvaW5kZXguanNcIjtcbmltcG9ydCBnZXRVVENJU09XZWVrIGZyb20gXCIuLi8uLi8uLi9fbGliL2dldFVUQ0lTT1dlZWsvaW5kZXguanNcIjtcbmltcG9ydCBnZXRVVENJU09XZWVrWWVhciBmcm9tIFwiLi4vLi4vLi4vX2xpYi9nZXRVVENJU09XZWVrWWVhci9pbmRleC5qc1wiO1xuaW1wb3J0IGdldFVUQ1dlZWsgZnJvbSBcIi4uLy4uLy4uL19saWIvZ2V0VVRDV2Vlay9pbmRleC5qc1wiO1xuaW1wb3J0IGdldFVUQ1dlZWtZZWFyIGZyb20gXCIuLi8uLi8uLi9fbGliL2dldFVUQ1dlZWtZZWFyL2luZGV4LmpzXCI7XG5pbXBvcnQgYWRkTGVhZGluZ1plcm9zIGZyb20gXCIuLi8uLi9hZGRMZWFkaW5nWmVyb3MvaW5kZXguanNcIjtcbmltcG9ydCBsaWdodEZvcm1hdHRlcnMgZnJvbSBcIi4uL2xpZ2h0Rm9ybWF0dGVycy9pbmRleC5qc1wiO1xudmFyIGRheVBlcmlvZEVudW0gPSB7XG4gIGFtOiAnYW0nLFxuICBwbTogJ3BtJyxcbiAgbWlkbmlnaHQ6ICdtaWRuaWdodCcsXG4gIG5vb246ICdub29uJyxcbiAgbW9ybmluZzogJ21vcm5pbmcnLFxuICBhZnRlcm5vb246ICdhZnRlcm5vb24nLFxuICBldmVuaW5nOiAnZXZlbmluZycsXG4gIG5pZ2h0OiAnbmlnaHQnXG59O1xuXG4vKlxuICogfCAgICAgfCBVbml0ICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBVbml0ICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfC0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfFxuICogfCAgYSAgfCBBTSwgUE0gICAgICAgICAgICAgICAgICAgICAgICAgfCAgQSogfCBNaWxsaXNlY29uZHMgaW4gZGF5ICAgICAgICAgICAgfFxuICogfCAgYiAgfCBBTSwgUE0sIG5vb24sIG1pZG5pZ2h0ICAgICAgICAgfCAgQiAgfCBGbGV4aWJsZSBkYXkgcGVyaW9kICAgICAgICAgICAgfFxuICogfCAgYyAgfCBTdGFuZC1hbG9uZSBsb2NhbCBkYXkgb2Ygd2VlayAgfCAgQyogfCBMb2NhbGl6ZWQgaG91ciB3LyBkYXkgcGVyaW9kICAgfFxuICogfCAgZCAgfCBEYXkgb2YgbW9udGggICAgICAgICAgICAgICAgICAgfCAgRCAgfCBEYXkgb2YgeWVhciAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgZSAgfCBMb2NhbCBkYXkgb2Ygd2VlayAgICAgICAgICAgICAgfCAgRSAgfCBEYXkgb2Ygd2VlayAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgZiAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgRiogfCBEYXkgb2Ygd2VlayBpbiBtb250aCAgICAgICAgICAgfFxuICogfCAgZyogfCBNb2RpZmllZCBKdWxpYW4gZGF5ICAgICAgICAgICAgfCAgRyAgfCBFcmEgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgaCAgfCBIb3VyIFsxLTEyXSAgICAgICAgICAgICAgICAgICAgfCAgSCAgfCBIb3VyIFswLTIzXSAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgaSEgfCBJU08gZGF5IG9mIHdlZWsgICAgICAgICAgICAgICAgfCAgSSEgfCBJU08gd2VlayBvZiB5ZWFyICAgICAgICAgICAgICAgfFxuICogfCAgaiogfCBMb2NhbGl6ZWQgaG91ciB3LyBkYXkgcGVyaW9kICAgfCAgSiogfCBMb2NhbGl6ZWQgaG91ciB3L28gZGF5IHBlcmlvZCAgfFxuICogfCAgayAgfCBIb3VyIFsxLTI0XSAgICAgICAgICAgICAgICAgICAgfCAgSyAgfCBIb3VyIFswLTExXSAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgbCogfCAoZGVwcmVjYXRlZCkgICAgICAgICAgICAgICAgICAgfCAgTCAgfCBTdGFuZC1hbG9uZSBtb250aCAgICAgICAgICAgICAgfFxuICogfCAgbSAgfCBNaW51dGUgICAgICAgICAgICAgICAgICAgICAgICAgfCAgTSAgfCBNb250aCAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgbiAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgTiAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgbyEgfCBPcmRpbmFsIG51bWJlciBtb2RpZmllciAgICAgICAgfCAgTyAgfCBUaW1lem9uZSAoR01UKSAgICAgICAgICAgICAgICAgfFxuICogfCAgcCEgfCBMb25nIGxvY2FsaXplZCB0aW1lICAgICAgICAgICAgfCAgUCEgfCBMb25nIGxvY2FsaXplZCBkYXRlICAgICAgICAgICAgfFxuICogfCAgcSAgfCBTdGFuZC1hbG9uZSBxdWFydGVyICAgICAgICAgICAgfCAgUSAgfCBRdWFydGVyICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgciogfCBSZWxhdGVkIEdyZWdvcmlhbiB5ZWFyICAgICAgICAgfCAgUiEgfCBJU08gd2Vlay1udW1iZXJpbmcgeWVhciAgICAgICAgfFxuICogfCAgcyAgfCBTZWNvbmQgICAgICAgICAgICAgICAgICAgICAgICAgfCAgUyAgfCBGcmFjdGlvbiBvZiBzZWNvbmQgICAgICAgICAgICAgfFxuICogfCAgdCEgfCBTZWNvbmRzIHRpbWVzdGFtcCAgICAgICAgICAgICAgfCAgVCEgfCBNaWxsaXNlY29uZHMgdGltZXN0YW1wICAgICAgICAgfFxuICogfCAgdSAgfCBFeHRlbmRlZCB5ZWFyICAgICAgICAgICAgICAgICAgfCAgVSogfCBDeWNsaWMgeWVhciAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgdiogfCBUaW1lem9uZSAoZ2VuZXJpYyBub24tbG9jYXQuKSAgfCAgViogfCBUaW1lem9uZSAobG9jYXRpb24pICAgICAgICAgICAgfFxuICogfCAgdyAgfCBMb2NhbCB3ZWVrIG9mIHllYXIgICAgICAgICAgICAgfCAgVyogfCBXZWVrIG9mIG1vbnRoICAgICAgICAgICAgICAgICAgfFxuICogfCAgeCAgfCBUaW1lem9uZSAoSVNPLTg2MDEgdy9vIFopICAgICAgfCAgWCAgfCBUaW1lem9uZSAoSVNPLTg2MDEpICAgICAgICAgICAgfFxuICogfCAgeSAgfCBZZWFyIChhYnMpICAgICAgICAgICAgICAgICAgICAgfCAgWSAgfCBMb2NhbCB3ZWVrLW51bWJlcmluZyB5ZWFyICAgICAgfFxuICogfCAgeiAgfCBUaW1lem9uZSAoc3BlY2lmaWMgbm9uLWxvY2F0LikgfCAgWiogfCBUaW1lem9uZSAoYWxpYXNlcykgICAgICAgICAgICAgfFxuICpcbiAqIExldHRlcnMgbWFya2VkIGJ5ICogYXJlIG5vdCBpbXBsZW1lbnRlZCBidXQgcmVzZXJ2ZWQgYnkgVW5pY29kZSBzdGFuZGFyZC5cbiAqXG4gKiBMZXR0ZXJzIG1hcmtlZCBieSAhIGFyZSBub24tc3RhbmRhcmQsIGJ1dCBpbXBsZW1lbnRlZCBieSBkYXRlLWZuczpcbiAqIC0gYG9gIG1vZGlmaWVzIHRoZSBwcmV2aW91cyB0b2tlbiB0byB0dXJuIGl0IGludG8gYW4gb3JkaW5hbCAoc2VlIGBmb3JtYXRgIGRvY3MpXG4gKiAtIGBpYCBpcyBJU08gZGF5IG9mIHdlZWsuIEZvciBgaWAgYW5kIGBpaWAgaXMgcmV0dXJucyBudW1lcmljIElTTyB3ZWVrIGRheXMsXG4gKiAgIGkuZS4gNyBmb3IgU3VuZGF5LCAxIGZvciBNb25kYXksIGV0Yy5cbiAqIC0gYElgIGlzIElTTyB3ZWVrIG9mIHllYXIsIGFzIG9wcG9zZWQgdG8gYHdgIHdoaWNoIGlzIGxvY2FsIHdlZWsgb2YgeWVhci5cbiAqIC0gYFJgIGlzIElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyLCBhcyBvcHBvc2VkIHRvIGBZYCB3aGljaCBpcyBsb2NhbCB3ZWVrLW51bWJlcmluZyB5ZWFyLlxuICogICBgUmAgaXMgc3VwcG9zZWQgdG8gYmUgdXNlZCBpbiBjb25qdW5jdGlvbiB3aXRoIGBJYCBhbmQgYGlgXG4gKiAgIGZvciB1bml2ZXJzYWwgSVNPIHdlZWstbnVtYmVyaW5nIGRhdGUsIHdoZXJlYXNcbiAqICAgYFlgIGlzIHN1cHBvc2VkIHRvIGJlIHVzZWQgaW4gY29uanVuY3Rpb24gd2l0aCBgd2AgYW5kIGBlYFxuICogICBmb3Igd2Vlay1udW1iZXJpbmcgZGF0ZSBzcGVjaWZpYyB0byB0aGUgbG9jYWxlLlxuICogLSBgUGAgaXMgbG9uZyBsb2NhbGl6ZWQgZGF0ZSBmb3JtYXRcbiAqIC0gYHBgIGlzIGxvbmcgbG9jYWxpemVkIHRpbWUgZm9ybWF0XG4gKi9cbnZhciBmb3JtYXR0ZXJzID0ge1xuICAvLyBFcmFcbiAgRzogZnVuY3Rpb24gRyhkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgZXJhID0gZGF0ZS5nZXRVVENGdWxsWWVhcigpID4gMCA/IDEgOiAwO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gQUQsIEJDXG4gICAgICBjYXNlICdHJzpcbiAgICAgIGNhc2UgJ0dHJzpcbiAgICAgIGNhc2UgJ0dHRyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5lcmEoZXJhLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCdcbiAgICAgICAgfSk7XG4gICAgICAvLyBBLCBCXG5cbiAgICAgIGNhc2UgJ0dHR0dHJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmVyYShlcmEsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdydcbiAgICAgICAgfSk7XG4gICAgICAvLyBBbm5vIERvbWluaSwgQmVmb3JlIENocmlzdFxuXG4gICAgICBjYXNlICdHR0dHJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5lcmEoZXJhLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIFllYXJcbiAgeTogZnVuY3Rpb24geShkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICAvLyBPcmRpbmFsIG51bWJlclxuICAgIGlmICh0b2tlbiA9PT0gJ3lvJykge1xuICAgICAgdmFyIHNpZ25lZFllYXIgPSBkYXRlLmdldFVUQ0Z1bGxZZWFyKCk7IC8vIFJldHVybnMgMSBmb3IgMSBCQyAod2hpY2ggaXMgeWVhciAwIGluIEphdmFTY3JpcHQpXG5cbiAgICAgIHZhciB5ZWFyID0gc2lnbmVkWWVhciA+IDAgPyBzaWduZWRZZWFyIDogMSAtIHNpZ25lZFllYXI7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcih5ZWFyLCB7XG4gICAgICAgIHVuaXQ6ICd5ZWFyJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy55KGRhdGUsIHRva2VuKTtcbiAgfSxcbiAgLy8gTG9jYWwgd2Vlay1udW1iZXJpbmcgeWVhclxuICBZOiBmdW5jdGlvbiBZKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBzaWduZWRXZWVrWWVhciA9IGdldFVUQ1dlZWtZZWFyKGRhdGUsIG9wdGlvbnMpOyAvLyBSZXR1cm5zIDEgZm9yIDEgQkMgKHdoaWNoIGlzIHllYXIgMCBpbiBKYXZhU2NyaXB0KVxuXG4gICAgdmFyIHdlZWtZZWFyID0gc2lnbmVkV2Vla1llYXIgPiAwID8gc2lnbmVkV2Vla1llYXIgOiAxIC0gc2lnbmVkV2Vla1llYXI7IC8vIFR3byBkaWdpdCB5ZWFyXG5cbiAgICBpZiAodG9rZW4gPT09ICdZWScpIHtcbiAgICAgIHZhciB0d29EaWdpdFllYXIgPSB3ZWVrWWVhciAlIDEwMDtcbiAgICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3ModHdvRGlnaXRZZWFyLCAyKTtcbiAgICB9IC8vIE9yZGluYWwgbnVtYmVyXG5cblxuICAgIGlmICh0b2tlbiA9PT0gJ1lvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIod2Vla1llYXIsIHtcbiAgICAgICAgdW5pdDogJ3llYXInXG4gICAgICB9KTtcbiAgICB9IC8vIFBhZGRpbmdcblxuXG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyh3ZWVrWWVhciwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gSVNPIHdlZWstbnVtYmVyaW5nIHllYXJcbiAgUjogZnVuY3Rpb24gUihkYXRlLCB0b2tlbikge1xuICAgIHZhciBpc29XZWVrWWVhciA9IGdldFVUQ0lTT1dlZWtZZWFyKGRhdGUpOyAvLyBQYWRkaW5nXG5cbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGlzb1dlZWtZZWFyLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBFeHRlbmRlZCB5ZWFyLiBUaGlzIGlzIGEgc2luZ2xlIG51bWJlciBkZXNpZ25hdGluZyB0aGUgeWVhciBvZiB0aGlzIGNhbGVuZGFyIHN5c3RlbS5cbiAgLy8gVGhlIG1haW4gZGlmZmVyZW5jZSBiZXR3ZWVuIGB5YCBhbmQgYHVgIGxvY2FsaXplcnMgYXJlIEIuQy4geWVhcnM6XG4gIC8vIHwgWWVhciB8IGB5YCB8IGB1YCB8XG4gIC8vIHwtLS0tLS18LS0tLS18LS0tLS18XG4gIC8vIHwgQUMgMSB8ICAgMSB8ICAgMSB8XG4gIC8vIHwgQkMgMSB8ICAgMSB8ICAgMCB8XG4gIC8vIHwgQkMgMiB8ICAgMiB8ICAtMSB8XG4gIC8vIEFsc28gYHl5YCBhbHdheXMgcmV0dXJucyB0aGUgbGFzdCB0d28gZGlnaXRzIG9mIGEgeWVhcixcbiAgLy8gd2hpbGUgYHV1YCBwYWRzIHNpbmdsZSBkaWdpdCB5ZWFycyB0byAyIGNoYXJhY3RlcnMgYW5kIHJldHVybnMgb3RoZXIgeWVhcnMgdW5jaGFuZ2VkLlxuICB1OiBmdW5jdGlvbiB1KGRhdGUsIHRva2VuKSB7XG4gICAgdmFyIHllYXIgPSBkYXRlLmdldFVUQ0Z1bGxZZWFyKCk7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyh5ZWFyLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBRdWFydGVyXG4gIFE6IGZ1bmN0aW9uIFEoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIHF1YXJ0ZXIgPSBNYXRoLmNlaWwoKGRhdGUuZ2V0VVRDTW9udGgoKSArIDEpIC8gMyk7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyAxLCAyLCAzLCA0XG4gICAgICBjYXNlICdRJzpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhxdWFydGVyKTtcbiAgICAgIC8vIDAxLCAwMiwgMDMsIDA0XG5cbiAgICAgIGNhc2UgJ1FRJzpcbiAgICAgICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhxdWFydGVyLCAyKTtcbiAgICAgIC8vIDFzdCwgMm5kLCAzcmQsIDR0aFxuXG4gICAgICBjYXNlICdRbyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKHF1YXJ0ZXIsIHtcbiAgICAgICAgICB1bml0OiAncXVhcnRlcidcbiAgICAgICAgfSk7XG4gICAgICAvLyBRMSwgUTIsIFEzLCBRNFxuXG4gICAgICBjYXNlICdRUVEnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUucXVhcnRlcihxdWFydGVyLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gMSwgMiwgMywgNCAobmFycm93IHF1YXJ0ZXI7IGNvdWxkIGJlIG5vdCBudW1lcmljYWwpXG5cbiAgICAgIGNhc2UgJ1FRUVFRJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLnF1YXJ0ZXIocXVhcnRlciwge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyAxc3QgcXVhcnRlciwgMm5kIHF1YXJ0ZXIsIC4uLlxuXG4gICAgICBjYXNlICdRUVFRJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5xdWFydGVyKHF1YXJ0ZXIsIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIFN0YW5kLWFsb25lIHF1YXJ0ZXJcbiAgcTogZnVuY3Rpb24gcShkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgcXVhcnRlciA9IE1hdGguY2VpbCgoZGF0ZS5nZXRVVENNb250aCgpICsgMSkgLyAzKTtcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIDEsIDIsIDMsIDRcbiAgICAgIGNhc2UgJ3EnOlxuICAgICAgICByZXR1cm4gU3RyaW5nKHF1YXJ0ZXIpO1xuICAgICAgLy8gMDEsIDAyLCAwMywgMDRcblxuICAgICAgY2FzZSAncXEnOlxuICAgICAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHF1YXJ0ZXIsIDIpO1xuICAgICAgLy8gMXN0LCAybmQsIDNyZCwgNHRoXG5cbiAgICAgIGNhc2UgJ3FvJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIocXVhcnRlciwge1xuICAgICAgICAgIHVuaXQ6ICdxdWFydGVyJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFExLCBRMiwgUTMsIFE0XG5cbiAgICAgIGNhc2UgJ3FxcSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5xdWFydGVyKHF1YXJ0ZXIsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgICAvLyAxLCAyLCAzLCA0IChuYXJyb3cgcXVhcnRlcjsgY291bGQgYmUgbm90IG51bWVyaWNhbClcblxuICAgICAgY2FzZSAncXFxcXEnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUucXVhcnRlcihxdWFydGVyLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIDFzdCBxdWFydGVyLCAybmQgcXVhcnRlciwgLi4uXG5cbiAgICAgIGNhc2UgJ3FxcXEnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLnF1YXJ0ZXIocXVhcnRlciwge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gTW9udGhcbiAgTTogZnVuY3Rpb24gTShkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgbW9udGggPSBkYXRlLmdldFVUQ01vbnRoKCk7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICBjYXNlICdNJzpcbiAgICAgIGNhc2UgJ01NJzpcbiAgICAgICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy5NKGRhdGUsIHRva2VuKTtcbiAgICAgIC8vIDFzdCwgMm5kLCAuLi4sIDEydGhcblxuICAgICAgY2FzZSAnTW8nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihtb250aCArIDEsIHtcbiAgICAgICAgICB1bml0OiAnbW9udGgnXG4gICAgICAgIH0pO1xuICAgICAgLy8gSmFuLCBGZWIsIC4uLiwgRGVjXG5cbiAgICAgIGNhc2UgJ01NTSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5tb250aChtb250aCwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIEosIEYsIC4uLiwgRFxuXG4gICAgICBjYXNlICdNTU1NTSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5tb250aChtb250aCwge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBKYW51YXJ5LCBGZWJydWFyeSwgLi4uLCBEZWNlbWJlclxuXG4gICAgICBjYXNlICdNTU1NJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5tb250aChtb250aCwge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gU3RhbmQtYWxvbmUgbW9udGhcbiAgTDogZnVuY3Rpb24gTChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgbW9udGggPSBkYXRlLmdldFVUQ01vbnRoKCk7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyAxLCAyLCAuLi4sIDEyXG4gICAgICBjYXNlICdMJzpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhtb250aCArIDEpO1xuICAgICAgLy8gMDEsIDAyLCAuLi4sIDEyXG5cbiAgICAgIGNhc2UgJ0xMJzpcbiAgICAgICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhtb250aCArIDEsIDIpO1xuICAgICAgLy8gMXN0LCAybmQsIC4uLiwgMTJ0aFxuXG4gICAgICBjYXNlICdMbyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKG1vbnRoICsgMSwge1xuICAgICAgICAgIHVuaXQ6ICdtb250aCdcbiAgICAgICAgfSk7XG4gICAgICAvLyBKYW4sIEZlYiwgLi4uLCBEZWNcblxuICAgICAgY2FzZSAnTExMJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm1vbnRoKG1vbnRoLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgICAgLy8gSiwgRiwgLi4uLCBEXG5cbiAgICAgIGNhc2UgJ0xMTExMJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm1vbnRoKG1vbnRoLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIEphbnVhcnksIEZlYnJ1YXJ5LCAuLi4sIERlY2VtYmVyXG5cbiAgICAgIGNhc2UgJ0xMTEwnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm1vbnRoKG1vbnRoLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBMb2NhbCB3ZWVrIG9mIHllYXJcbiAgdzogZnVuY3Rpb24gdyhkYXRlLCB0b2tlbiwgbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgd2VlayA9IGdldFVUQ1dlZWsoZGF0ZSwgb3B0aW9ucyk7XG5cbiAgICBpZiAodG9rZW4gPT09ICd3bycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKHdlZWssIHtcbiAgICAgICAgdW5pdDogJ3dlZWsnXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHdlZWssIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIElTTyB3ZWVrIG9mIHllYXJcbiAgSTogZnVuY3Rpb24gSShkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgaXNvV2VlayA9IGdldFVUQ0lTT1dlZWsoZGF0ZSk7XG5cbiAgICBpZiAodG9rZW4gPT09ICdJbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGlzb1dlZWssIHtcbiAgICAgICAgdW5pdDogJ3dlZWsnXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGlzb1dlZWssIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIERheSBvZiB0aGUgbW9udGhcbiAgZDogZnVuY3Rpb24gZChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICBpZiAodG9rZW4gPT09ICdkbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGRhdGUuZ2V0VVRDRGF0ZSgpLCB7XG4gICAgICAgIHVuaXQ6ICdkYXRlJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy5kKGRhdGUsIHRva2VuKTtcbiAgfSxcbiAgLy8gRGF5IG9mIHllYXJcbiAgRDogZnVuY3Rpb24gRChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgZGF5T2ZZZWFyID0gZ2V0VVRDRGF5T2ZZZWFyKGRhdGUpO1xuXG4gICAgaWYgKHRva2VuID09PSAnRG8nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihkYXlPZlllYXIsIHtcbiAgICAgICAgdW5pdDogJ2RheU9mWWVhcidcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF5T2ZZZWFyLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBEYXkgb2Ygd2Vla1xuICBFOiBmdW5jdGlvbiBFKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBkYXlPZldlZWsgPSBkYXRlLmdldFVUQ0RheSgpO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gVHVlXG4gICAgICBjYXNlICdFJzpcbiAgICAgIGNhc2UgJ0VFJzpcbiAgICAgIGNhc2UgJ0VFRSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVFxuXG4gICAgICBjYXNlICdFRUVFRSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFR1XG5cbiAgICAgIGNhc2UgJ0VFRUVFRSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICdzaG9ydCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVlc2RheVxuXG4gICAgICBjYXNlICdFRUVFJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBMb2NhbCBkYXkgb2Ygd2Vla1xuICBlOiBmdW5jdGlvbiBlKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBkYXlPZldlZWsgPSBkYXRlLmdldFVUQ0RheSgpO1xuICAgIHZhciBsb2NhbERheU9mV2VlayA9IChkYXlPZldlZWsgLSBvcHRpb25zLndlZWtTdGFydHNPbiArIDgpICUgNyB8fCA3O1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gTnVtZXJpY2FsIHZhbHVlIChOdGggZGF5IG9mIHdlZWsgd2l0aCBjdXJyZW50IGxvY2FsZSBvciB3ZWVrU3RhcnRzT24pXG4gICAgICBjYXNlICdlJzpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhsb2NhbERheU9mV2Vlayk7XG4gICAgICAvLyBQYWRkZWQgbnVtZXJpY2FsIHZhbHVlXG5cbiAgICAgIGNhc2UgJ2VlJzpcbiAgICAgICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhsb2NhbERheU9mV2VlaywgMik7XG4gICAgICAvLyAxc3QsIDJuZCwgLi4uLCA3dGhcblxuICAgICAgY2FzZSAnZW8nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihsb2NhbERheU9mV2Vlaywge1xuICAgICAgICAgIHVuaXQ6ICdkYXknXG4gICAgICAgIH0pO1xuXG4gICAgICBjYXNlICdlZWUnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFRcblxuICAgICAgY2FzZSAnZWVlZWUnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdVxuXG4gICAgICBjYXNlICdlZWVlZWUnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnc2hvcnQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFR1ZXNkYXlcblxuICAgICAgY2FzZSAnZWVlZSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gU3RhbmQtYWxvbmUgbG9jYWwgZGF5IG9mIHdlZWtcbiAgYzogZnVuY3Rpb24gYyhkYXRlLCB0b2tlbiwgbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgZGF5T2ZXZWVrID0gZGF0ZS5nZXRVVENEYXkoKTtcbiAgICB2YXIgbG9jYWxEYXlPZldlZWsgPSAoZGF5T2ZXZWVrIC0gb3B0aW9ucy53ZWVrU3RhcnRzT24gKyA4KSAlIDcgfHwgNztcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIE51bWVyaWNhbCB2YWx1ZSAoc2FtZSBhcyBpbiBgZWApXG4gICAgICBjYXNlICdjJzpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhsb2NhbERheU9mV2Vlayk7XG4gICAgICAvLyBQYWRkZWQgbnVtZXJpY2FsIHZhbHVlXG5cbiAgICAgIGNhc2UgJ2NjJzpcbiAgICAgICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhsb2NhbERheU9mV2VlaywgdG9rZW4ubGVuZ3RoKTtcbiAgICAgIC8vIDFzdCwgMm5kLCAuLi4sIDd0aFxuXG4gICAgICBjYXNlICdjbyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGxvY2FsRGF5T2ZXZWVrLCB7XG4gICAgICAgICAgdW5pdDogJ2RheSdcbiAgICAgICAgfSk7XG5cbiAgICAgIGNhc2UgJ2NjYyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVFxuXG4gICAgICBjYXNlICdjY2NjYyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFR1XG5cbiAgICAgIGNhc2UgJ2NjY2NjYyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICdzaG9ydCcsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVlc2RheVxuXG4gICAgICBjYXNlICdjY2NjJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBJU08gZGF5IG9mIHdlZWtcbiAgaTogZnVuY3Rpb24gaShkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgZGF5T2ZXZWVrID0gZGF0ZS5nZXRVVENEYXkoKTtcbiAgICB2YXIgaXNvRGF5T2ZXZWVrID0gZGF5T2ZXZWVrID09PSAwID8gNyA6IGRheU9mV2VlaztcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIDJcbiAgICAgIGNhc2UgJ2knOlxuICAgICAgICByZXR1cm4gU3RyaW5nKGlzb0RheU9mV2Vlayk7XG4gICAgICAvLyAwMlxuXG4gICAgICBjYXNlICdpaSc6XG4gICAgICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoaXNvRGF5T2ZXZWVrLCB0b2tlbi5sZW5ndGgpO1xuICAgICAgLy8gMm5kXG5cbiAgICAgIGNhc2UgJ2lvJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoaXNvRGF5T2ZXZWVrLCB7XG4gICAgICAgICAgdW5pdDogJ2RheSdcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdWVcblxuICAgICAgY2FzZSAnaWlpJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUXG5cbiAgICAgIGNhc2UgJ2lpaWlpJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVcblxuICAgICAgY2FzZSAnaWlpaWlpJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ3Nob3J0JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdWVzZGF5XG5cbiAgICAgIGNhc2UgJ2lpaWknOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIEFNIG9yIFBNXG4gIGE6IGZ1bmN0aW9uIGEoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGhvdXJzID0gZGF0ZS5nZXRVVENIb3VycygpO1xuICAgIHZhciBkYXlQZXJpb2RFbnVtVmFsdWUgPSBob3VycyAvIDEyID49IDEgPyAncG0nIDogJ2FtJztcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIGNhc2UgJ2EnOlxuICAgICAgY2FzZSAnYWEnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcblxuICAgICAgY2FzZSAnYWFhJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSkudG9Mb3dlckNhc2UoKTtcblxuICAgICAgY2FzZSAnYWFhYWEnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG5cbiAgICAgIGNhc2UgJ2FhYWEnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIEFNLCBQTSwgbWlkbmlnaHQsIG5vb25cbiAgYjogZnVuY3Rpb24gYihkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgaG91cnMgPSBkYXRlLmdldFVUQ0hvdXJzKCk7XG4gICAgdmFyIGRheVBlcmlvZEVudW1WYWx1ZTtcblxuICAgIGlmIChob3VycyA9PT0gMTIpIHtcbiAgICAgIGRheVBlcmlvZEVudW1WYWx1ZSA9IGRheVBlcmlvZEVudW0ubm9vbjtcbiAgICB9IGVsc2UgaWYgKGhvdXJzID09PSAwKSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXlQZXJpb2RFbnVtLm1pZG5pZ2h0O1xuICAgIH0gZWxzZSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBob3VycyAvIDEyID49IDEgPyAncG0nIDogJ2FtJztcbiAgICB9XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICBjYXNlICdiJzpcbiAgICAgIGNhc2UgJ2JiJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG5cbiAgICAgIGNhc2UgJ2JiYic6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pLnRvTG93ZXJDYXNlKCk7XG5cbiAgICAgIGNhc2UgJ2JiYmJiJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuXG4gICAgICBjYXNlICdiYmJiJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBpbiB0aGUgbW9ybmluZywgaW4gdGhlIGFmdGVybm9vbiwgaW4gdGhlIGV2ZW5pbmcsIGF0IG5pZ2h0XG4gIEI6IGZ1bmN0aW9uIEIoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGhvdXJzID0gZGF0ZS5nZXRVVENIb3VycygpO1xuICAgIHZhciBkYXlQZXJpb2RFbnVtVmFsdWU7XG5cbiAgICBpZiAoaG91cnMgPj0gMTcpIHtcbiAgICAgIGRheVBlcmlvZEVudW1WYWx1ZSA9IGRheVBlcmlvZEVudW0uZXZlbmluZztcbiAgICB9IGVsc2UgaWYgKGhvdXJzID49IDEyKSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXlQZXJpb2RFbnVtLmFmdGVybm9vbjtcbiAgICB9IGVsc2UgaWYgKGhvdXJzID49IDQpIHtcbiAgICAgIGRheVBlcmlvZEVudW1WYWx1ZSA9IGRheVBlcmlvZEVudW0ubW9ybmluZztcbiAgICB9IGVsc2Uge1xuICAgICAgZGF5UGVyaW9kRW51bVZhbHVlID0gZGF5UGVyaW9kRW51bS5uaWdodDtcbiAgICB9XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICBjYXNlICdCJzpcbiAgICAgIGNhc2UgJ0JCJzpcbiAgICAgIGNhc2UgJ0JCQic6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuXG4gICAgICBjYXNlICdCQkJCQic6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcblxuICAgICAgY2FzZSAnQkJCQic6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gSG91ciBbMS0xMl1cbiAgaDogZnVuY3Rpb24gaChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICBpZiAodG9rZW4gPT09ICdobycpIHtcbiAgICAgIHZhciBob3VycyA9IGRhdGUuZ2V0VVRDSG91cnMoKSAlIDEyO1xuICAgICAgaWYgKGhvdXJzID09PSAwKSBob3VycyA9IDEyO1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoaG91cnMsIHtcbiAgICAgICAgdW5pdDogJ2hvdXInXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLmgoZGF0ZSwgdG9rZW4pO1xuICB9LFxuICAvLyBIb3VyIFswLTIzXVxuICBIOiBmdW5jdGlvbiBIKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIGlmICh0b2tlbiA9PT0gJ0hvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoZGF0ZS5nZXRVVENIb3VycygpLCB7XG4gICAgICAgIHVuaXQ6ICdob3VyJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy5IKGRhdGUsIHRva2VuKTtcbiAgfSxcbiAgLy8gSG91ciBbMC0xMV1cbiAgSzogZnVuY3Rpb24gSyhkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgaG91cnMgPSBkYXRlLmdldFVUQ0hvdXJzKCkgJSAxMjtcblxuICAgIGlmICh0b2tlbiA9PT0gJ0tvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoaG91cnMsIHtcbiAgICAgICAgdW5pdDogJ2hvdXInXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGhvdXJzLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBIb3VyIFsxLTI0XVxuICBrOiBmdW5jdGlvbiBrKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBob3VycyA9IGRhdGUuZ2V0VVRDSG91cnMoKTtcbiAgICBpZiAoaG91cnMgPT09IDApIGhvdXJzID0gMjQ7XG5cbiAgICBpZiAodG9rZW4gPT09ICdrbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGhvdXJzLCB7XG4gICAgICAgIHVuaXQ6ICdob3VyJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhob3VycywgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gTWludXRlXG4gIG06IGZ1bmN0aW9uIG0oZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgaWYgKHRva2VuID09PSAnbW8nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihkYXRlLmdldFVUQ01pbnV0ZXMoKSwge1xuICAgICAgICB1bml0OiAnbWludXRlJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy5tKGRhdGUsIHRva2VuKTtcbiAgfSxcbiAgLy8gU2Vjb25kXG4gIHM6IGZ1bmN0aW9uIHMoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgaWYgKHRva2VuID09PSAnc28nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihkYXRlLmdldFVUQ1NlY29uZHMoKSwge1xuICAgICAgICB1bml0OiAnc2Vjb25kJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy5zKGRhdGUsIHRva2VuKTtcbiAgfSxcbiAgLy8gRnJhY3Rpb24gb2Ygc2Vjb25kXG4gIFM6IGZ1bmN0aW9uIFMoZGF0ZSwgdG9rZW4pIHtcbiAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLlMoZGF0ZSwgdG9rZW4pO1xuICB9LFxuICAvLyBUaW1lem9uZSAoSVNPLTg2MDEuIElmIG9mZnNldCBpcyAwLCBvdXRwdXQgaXMgYWx3YXlzIGAnWidgKVxuICBYOiBmdW5jdGlvbiBYKGRhdGUsIHRva2VuLCBfbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgb3JpZ2luYWxEYXRlID0gb3B0aW9ucy5fb3JpZ2luYWxEYXRlIHx8IGRhdGU7XG4gICAgdmFyIHRpbWV6b25lT2Zmc2V0ID0gb3JpZ2luYWxEYXRlLmdldFRpbWV6b25lT2Zmc2V0KCk7XG5cbiAgICBpZiAodGltZXpvbmVPZmZzZXQgPT09IDApIHtcbiAgICAgIHJldHVybiAnWic7XG4gICAgfVxuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gSG91cnMgYW5kIG9wdGlvbmFsIG1pbnV0ZXNcbiAgICAgIGNhc2UgJ1gnOlxuICAgICAgICByZXR1cm4gZm9ybWF0VGltZXpvbmVXaXRoT3B0aW9uYWxNaW51dGVzKHRpbWV6b25lT2Zmc2V0KTtcbiAgICAgIC8vIEhvdXJzLCBtaW51dGVzIGFuZCBvcHRpb25hbCBzZWNvbmRzIHdpdGhvdXQgYDpgIGRlbGltaXRlclxuICAgICAgLy8gTm90ZTogbmVpdGhlciBJU08tODYwMSBub3IgSmF2YVNjcmlwdCBzdXBwb3J0cyBzZWNvbmRzIGluIHRpbWV6b25lIG9mZnNldHNcbiAgICAgIC8vIHNvIHRoaXMgdG9rZW4gYWx3YXlzIGhhcyB0aGUgc2FtZSBvdXRwdXQgYXMgYFhYYFxuXG4gICAgICBjYXNlICdYWFhYJzpcbiAgICAgIGNhc2UgJ1hYJzpcbiAgICAgICAgLy8gSG91cnMgYW5kIG1pbnV0ZXMgd2l0aG91dCBgOmAgZGVsaW1pdGVyXG4gICAgICAgIHJldHVybiBmb3JtYXRUaW1lem9uZSh0aW1lem9uZU9mZnNldCk7XG4gICAgICAvLyBIb3VycywgbWludXRlcyBhbmQgb3B0aW9uYWwgc2Vjb25kcyB3aXRoIGA6YCBkZWxpbWl0ZXJcbiAgICAgIC8vIE5vdGU6IG5laXRoZXIgSVNPLTg2MDEgbm9yIEphdmFTY3JpcHQgc3VwcG9ydHMgc2Vjb25kcyBpbiB0aW1lem9uZSBvZmZzZXRzXG4gICAgICAvLyBzbyB0aGlzIHRva2VuIGFsd2F5cyBoYXMgdGhlIHNhbWUgb3V0cHV0IGFzIGBYWFhgXG5cbiAgICAgIGNhc2UgJ1hYWFhYJzpcbiAgICAgIGNhc2UgJ1hYWCc6IC8vIEhvdXJzIGFuZCBtaW51dGVzIHdpdGggYDpgIGRlbGltaXRlclxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gZm9ybWF0VGltZXpvbmUodGltZXpvbmVPZmZzZXQsICc6Jyk7XG4gICAgfVxuICB9LFxuICAvLyBUaW1lem9uZSAoSVNPLTg2MDEuIElmIG9mZnNldCBpcyAwLCBvdXRwdXQgaXMgYCcrMDA6MDAnYCBvciBlcXVpdmFsZW50KVxuICB4OiBmdW5jdGlvbiB4KGRhdGUsIHRva2VuLCBfbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgb3JpZ2luYWxEYXRlID0gb3B0aW9ucy5fb3JpZ2luYWxEYXRlIHx8IGRhdGU7XG4gICAgdmFyIHRpbWV6b25lT2Zmc2V0ID0gb3JpZ2luYWxEYXRlLmdldFRpbWV6b25lT2Zmc2V0KCk7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBIb3VycyBhbmQgb3B0aW9uYWwgbWludXRlc1xuICAgICAgY2FzZSAneCc6XG4gICAgICAgIHJldHVybiBmb3JtYXRUaW1lem9uZVdpdGhPcHRpb25hbE1pbnV0ZXModGltZXpvbmVPZmZzZXQpO1xuICAgICAgLy8gSG91cnMsIG1pbnV0ZXMgYW5kIG9wdGlvbmFsIHNlY29uZHMgd2l0aG91dCBgOmAgZGVsaW1pdGVyXG4gICAgICAvLyBOb3RlOiBuZWl0aGVyIElTTy04NjAxIG5vciBKYXZhU2NyaXB0IHN1cHBvcnRzIHNlY29uZHMgaW4gdGltZXpvbmUgb2Zmc2V0c1xuICAgICAgLy8gc28gdGhpcyB0b2tlbiBhbHdheXMgaGFzIHRoZSBzYW1lIG91dHB1dCBhcyBgeHhgXG5cbiAgICAgIGNhc2UgJ3h4eHgnOlxuICAgICAgY2FzZSAneHgnOlxuICAgICAgICAvLyBIb3VycyBhbmQgbWludXRlcyB3aXRob3V0IGA6YCBkZWxpbWl0ZXJcbiAgICAgICAgcmV0dXJuIGZvcm1hdFRpbWV6b25lKHRpbWV6b25lT2Zmc2V0KTtcbiAgICAgIC8vIEhvdXJzLCBtaW51dGVzIGFuZCBvcHRpb25hbCBzZWNvbmRzIHdpdGggYDpgIGRlbGltaXRlclxuICAgICAgLy8gTm90ZTogbmVpdGhlciBJU08tODYwMSBub3IgSmF2YVNjcmlwdCBzdXBwb3J0cyBzZWNvbmRzIGluIHRpbWV6b25lIG9mZnNldHNcbiAgICAgIC8vIHNvIHRoaXMgdG9rZW4gYWx3YXlzIGhhcyB0aGUgc2FtZSBvdXRwdXQgYXMgYHh4eGBcblxuICAgICAgY2FzZSAneHh4eHgnOlxuICAgICAgY2FzZSAneHh4JzogLy8gSG91cnMgYW5kIG1pbnV0ZXMgd2l0aCBgOmAgZGVsaW1pdGVyXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBmb3JtYXRUaW1lem9uZSh0aW1lem9uZU9mZnNldCwgJzonKTtcbiAgICB9XG4gIH0sXG4gIC8vIFRpbWV6b25lIChHTVQpXG4gIE86IGZ1bmN0aW9uIE8oZGF0ZSwgdG9rZW4sIF9sb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBvcmlnaW5hbERhdGUgPSBvcHRpb25zLl9vcmlnaW5hbERhdGUgfHwgZGF0ZTtcbiAgICB2YXIgdGltZXpvbmVPZmZzZXQgPSBvcmlnaW5hbERhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKTtcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIFNob3J0XG4gICAgICBjYXNlICdPJzpcbiAgICAgIGNhc2UgJ09PJzpcbiAgICAgIGNhc2UgJ09PTyc6XG4gICAgICAgIHJldHVybiAnR01UJyArIGZvcm1hdFRpbWV6b25lU2hvcnQodGltZXpvbmVPZmZzZXQsICc6Jyk7XG4gICAgICAvLyBMb25nXG5cbiAgICAgIGNhc2UgJ09PT08nOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuICdHTVQnICsgZm9ybWF0VGltZXpvbmUodGltZXpvbmVPZmZzZXQsICc6Jyk7XG4gICAgfVxuICB9LFxuICAvLyBUaW1lem9uZSAoc3BlY2lmaWMgbm9uLWxvY2F0aW9uKVxuICB6OiBmdW5jdGlvbiB6KGRhdGUsIHRva2VuLCBfbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgb3JpZ2luYWxEYXRlID0gb3B0aW9ucy5fb3JpZ2luYWxEYXRlIHx8IGRhdGU7XG4gICAgdmFyIHRpbWV6b25lT2Zmc2V0ID0gb3JpZ2luYWxEYXRlLmdldFRpbWV6b25lT2Zmc2V0KCk7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBTaG9ydFxuICAgICAgY2FzZSAneic6XG4gICAgICBjYXNlICd6eic6XG4gICAgICBjYXNlICd6enonOlxuICAgICAgICByZXR1cm4gJ0dNVCcgKyBmb3JtYXRUaW1lem9uZVNob3J0KHRpbWV6b25lT2Zmc2V0LCAnOicpO1xuICAgICAgLy8gTG9uZ1xuXG4gICAgICBjYXNlICd6enp6JzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiAnR01UJyArIGZvcm1hdFRpbWV6b25lKHRpbWV6b25lT2Zmc2V0LCAnOicpO1xuICAgIH1cbiAgfSxcbiAgLy8gU2Vjb25kcyB0aW1lc3RhbXBcbiAgdDogZnVuY3Rpb24gdChkYXRlLCB0b2tlbiwgX2xvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIG9yaWdpbmFsRGF0ZSA9IG9wdGlvbnMuX29yaWdpbmFsRGF0ZSB8fCBkYXRlO1xuICAgIHZhciB0aW1lc3RhbXAgPSBNYXRoLmZsb29yKG9yaWdpbmFsRGF0ZS5nZXRUaW1lKCkgLyAxMDAwKTtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHRpbWVzdGFtcCwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gTWlsbGlzZWNvbmRzIHRpbWVzdGFtcFxuICBUOiBmdW5jdGlvbiBUKGRhdGUsIHRva2VuLCBfbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgb3JpZ2luYWxEYXRlID0gb3B0aW9ucy5fb3JpZ2luYWxEYXRlIHx8IGRhdGU7XG4gICAgdmFyIHRpbWVzdGFtcCA9IG9yaWdpbmFsRGF0ZS5nZXRUaW1lKCk7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyh0aW1lc3RhbXAsIHRva2VuLmxlbmd0aCk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGZvcm1hdFRpbWV6b25lU2hvcnQob2Zmc2V0LCBkaXJ0eURlbGltaXRlcikge1xuICB2YXIgc2lnbiA9IG9mZnNldCA+IDAgPyAnLScgOiAnKyc7XG4gIHZhciBhYnNPZmZzZXQgPSBNYXRoLmFicyhvZmZzZXQpO1xuICB2YXIgaG91cnMgPSBNYXRoLmZsb29yKGFic09mZnNldCAvIDYwKTtcbiAgdmFyIG1pbnV0ZXMgPSBhYnNPZmZzZXQgJSA2MDtcblxuICBpZiAobWludXRlcyA9PT0gMCkge1xuICAgIHJldHVybiBzaWduICsgU3RyaW5nKGhvdXJzKTtcbiAgfVxuXG4gIHZhciBkZWxpbWl0ZXIgPSBkaXJ0eURlbGltaXRlciB8fCAnJztcbiAgcmV0dXJuIHNpZ24gKyBTdHJpbmcoaG91cnMpICsgZGVsaW1pdGVyICsgYWRkTGVhZGluZ1plcm9zKG1pbnV0ZXMsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRUaW1lem9uZVdpdGhPcHRpb25hbE1pbnV0ZXMob2Zmc2V0LCBkaXJ0eURlbGltaXRlcikge1xuICBpZiAob2Zmc2V0ICUgNjAgPT09IDApIHtcbiAgICB2YXIgc2lnbiA9IG9mZnNldCA+IDAgPyAnLScgOiAnKyc7XG4gICAgcmV0dXJuIHNpZ24gKyBhZGRMZWFkaW5nWmVyb3MoTWF0aC5hYnMob2Zmc2V0KSAvIDYwLCAyKTtcbiAgfVxuXG4gIHJldHVybiBmb3JtYXRUaW1lem9uZShvZmZzZXQsIGRpcnR5RGVsaW1pdGVyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VGltZXpvbmUob2Zmc2V0LCBkaXJ0eURlbGltaXRlcikge1xuICB2YXIgZGVsaW1pdGVyID0gZGlydHlEZWxpbWl0ZXIgfHwgJyc7XG4gIHZhciBzaWduID0gb2Zmc2V0ID4gMCA/ICctJyA6ICcrJztcbiAgdmFyIGFic09mZnNldCA9IE1hdGguYWJzKG9mZnNldCk7XG4gIHZhciBob3VycyA9IGFkZExlYWRpbmdaZXJvcyhNYXRoLmZsb29yKGFic09mZnNldCAvIDYwKSwgMik7XG4gIHZhciBtaW51dGVzID0gYWRkTGVhZGluZ1plcm9zKGFic09mZnNldCAlIDYwLCAyKTtcbiAgcmV0dXJuIHNpZ24gKyBob3VycyArIGRlbGltaXRlciArIG1pbnV0ZXM7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZvcm1hdHRlcnM7IiwiaW1wb3J0IGdldFVUQ1dlZWtZZWFyIGZyb20gXCIuLi9nZXRVVENXZWVrWWVhci9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG5pbXBvcnQgc3RhcnRPZlVUQ1dlZWsgZnJvbSBcIi4uL3N0YXJ0T2ZVVENXZWVrL2luZGV4LmpzXCI7XG5pbXBvcnQgdG9JbnRlZ2VyIGZyb20gXCIuLi90b0ludGVnZXIvaW5kZXguanNcIjtcbmltcG9ydCB7IGdldERlZmF1bHRPcHRpb25zIH0gZnJvbSBcIi4uL2RlZmF1bHRPcHRpb25zL2luZGV4LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdGFydE9mVVRDV2Vla1llYXIoZGlydHlEYXRlLCBvcHRpb25zKSB7XG4gIHZhciBfcmVmLCBfcmVmMiwgX3JlZjMsIF9vcHRpb25zJGZpcnN0V2Vla0NvbiwgX29wdGlvbnMkbG9jYWxlLCBfb3B0aW9ucyRsb2NhbGUkb3B0aW8sIF9kZWZhdWx0T3B0aW9ucyRsb2NhbCwgX2RlZmF1bHRPcHRpb25zJGxvY2FsMjtcblxuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGRlZmF1bHRPcHRpb25zID0gZ2V0RGVmYXVsdE9wdGlvbnMoKTtcbiAgdmFyIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9IHRvSW50ZWdlcigoX3JlZiA9IChfcmVmMiA9IChfcmVmMyA9IChfb3B0aW9ucyRmaXJzdFdlZWtDb24gPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlKSAhPT0gbnVsbCAmJiBfb3B0aW9ucyRmaXJzdFdlZWtDb24gIT09IHZvaWQgMCA/IF9vcHRpb25zJGZpcnN0V2Vla0NvbiA6IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9vcHRpb25zJGxvY2FsZSA9IG9wdGlvbnMubG9jYWxlKSA9PT0gbnVsbCB8fCBfb3B0aW9ucyRsb2NhbGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfb3B0aW9ucyRsb2NhbGUkb3B0aW8gPSBfb3B0aW9ucyRsb2NhbGUub3B0aW9ucykgPT09IG51bGwgfHwgX29wdGlvbnMkbG9jYWxlJG9wdGlvID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfb3B0aW9ucyRsb2NhbGUkb3B0aW8uZmlyc3RXZWVrQ29udGFpbnNEYXRlKSAhPT0gbnVsbCAmJiBfcmVmMyAhPT0gdm9pZCAwID8gX3JlZjMgOiBkZWZhdWx0T3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGUpICE9PSBudWxsICYmIF9yZWYyICE9PSB2b2lkIDAgPyBfcmVmMiA6IChfZGVmYXVsdE9wdGlvbnMkbG9jYWwgPSBkZWZhdWx0T3B0aW9ucy5sb2NhbGUpID09PSBudWxsIHx8IF9kZWZhdWx0T3B0aW9ucyRsb2NhbCA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9kZWZhdWx0T3B0aW9ucyRsb2NhbDIgPSBfZGVmYXVsdE9wdGlvbnMkbG9jYWwub3B0aW9ucykgPT09IG51bGwgfHwgX2RlZmF1bHRPcHRpb25zJGxvY2FsMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2RlZmF1bHRPcHRpb25zJGxvY2FsMi5maXJzdFdlZWtDb250YWluc0RhdGUpICE9PSBudWxsICYmIF9yZWYgIT09IHZvaWQgMCA/IF9yZWYgOiAxKTtcbiAgdmFyIHllYXIgPSBnZXRVVENXZWVrWWVhcihkaXJ0eURhdGUsIG9wdGlvbnMpO1xuICB2YXIgZmlyc3RXZWVrID0gbmV3IERhdGUoMCk7XG4gIGZpcnN0V2Vlay5zZXRVVENGdWxsWWVhcih5ZWFyLCAwLCBmaXJzdFdlZWtDb250YWluc0RhdGUpO1xuICBmaXJzdFdlZWsuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHZhciBkYXRlID0gc3RhcnRPZlVUQ1dlZWsoZmlyc3RXZWVrLCBvcHRpb25zKTtcbiAgcmV0dXJuIGRhdGU7XG59IiwiaW1wb3J0IGdldFVUQ0lTT1dlZWtZZWFyIGZyb20gXCIuLi9nZXRVVENJU09XZWVrWWVhci9pbmRleC5qc1wiO1xuaW1wb3J0IHN0YXJ0T2ZVVENJU09XZWVrIGZyb20gXCIuLi9zdGFydE9mVVRDSVNPV2Vlay9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdGFydE9mVVRDSVNPV2Vla1llYXIoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgeWVhciA9IGdldFVUQ0lTT1dlZWtZZWFyKGRpcnR5RGF0ZSk7XG4gIHZhciBmb3VydGhPZkphbnVhcnkgPSBuZXcgRGF0ZSgwKTtcbiAgZm91cnRoT2ZKYW51YXJ5LnNldFVUQ0Z1bGxZZWFyKHllYXIsIDAsIDQpO1xuICBmb3VydGhPZkphbnVhcnkuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHZhciBkYXRlID0gc3RhcnRPZlVUQ0lTT1dlZWsoZm91cnRoT2ZKYW51YXJ5KTtcbiAgcmV0dXJuIGRhdGU7XG59IiwiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbnZhciBNSUxMSVNFQ09ORFNfSU5fREFZID0gODY0MDAwMDA7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRVVENEYXlPZlllYXIoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgdGltZXN0YW1wID0gZGF0ZS5nZXRUaW1lKCk7XG4gIGRhdGUuc2V0VVRDTW9udGgoMCwgMSk7XG4gIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHZhciBzdGFydE9mWWVhclRpbWVzdGFtcCA9IGRhdGUuZ2V0VGltZSgpO1xuICB2YXIgZGlmZmVyZW5jZSA9IHRpbWVzdGFtcCAtIHN0YXJ0T2ZZZWFyVGltZXN0YW1wO1xuICByZXR1cm4gTWF0aC5mbG9vcihkaWZmZXJlbmNlIC8gTUlMTElTRUNPTkRTX0lOX0RBWSkgKyAxO1xufSIsInZhciBkYXRlTG9uZ0Zvcm1hdHRlciA9IGZ1bmN0aW9uIGRhdGVMb25nRm9ybWF0dGVyKHBhdHRlcm4sIGZvcm1hdExvbmcpIHtcbiAgc3dpdGNoIChwYXR0ZXJuKSB7XG4gICAgY2FzZSAnUCc6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy5kYXRlKHtcbiAgICAgICAgd2lkdGg6ICdzaG9ydCdcbiAgICAgIH0pO1xuXG4gICAgY2FzZSAnUFAnOlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcuZGF0ZSh7XG4gICAgICAgIHdpZHRoOiAnbWVkaXVtJ1xuICAgICAgfSk7XG5cbiAgICBjYXNlICdQUFAnOlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcuZGF0ZSh7XG4gICAgICAgIHdpZHRoOiAnbG9uZydcbiAgICAgIH0pO1xuXG4gICAgY2FzZSAnUFBQUCc6XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLmRhdGUoe1xuICAgICAgICB3aWR0aDogJ2Z1bGwnXG4gICAgICB9KTtcbiAgfVxufTtcblxudmFyIHRpbWVMb25nRm9ybWF0dGVyID0gZnVuY3Rpb24gdGltZUxvbmdGb3JtYXR0ZXIocGF0dGVybiwgZm9ybWF0TG9uZykge1xuICBzd2l0Y2ggKHBhdHRlcm4pIHtcbiAgICBjYXNlICdwJzpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLnRpbWUoe1xuICAgICAgICB3aWR0aDogJ3Nob3J0J1xuICAgICAgfSk7XG5cbiAgICBjYXNlICdwcCc6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy50aW1lKHtcbiAgICAgICAgd2lkdGg6ICdtZWRpdW0nXG4gICAgICB9KTtcblxuICAgIGNhc2UgJ3BwcCc6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy50aW1lKHtcbiAgICAgICAgd2lkdGg6ICdsb25nJ1xuICAgICAgfSk7XG5cbiAgICBjYXNlICdwcHBwJzpcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcudGltZSh7XG4gICAgICAgIHdpZHRoOiAnZnVsbCdcbiAgICAgIH0pO1xuICB9XG59O1xuXG52YXIgZGF0ZVRpbWVMb25nRm9ybWF0dGVyID0gZnVuY3Rpb24gZGF0ZVRpbWVMb25nRm9ybWF0dGVyKHBhdHRlcm4sIGZvcm1hdExvbmcpIHtcbiAgdmFyIG1hdGNoUmVzdWx0ID0gcGF0dGVybi5tYXRjaCgvKFArKShwKyk/LykgfHwgW107XG4gIHZhciBkYXRlUGF0dGVybiA9IG1hdGNoUmVzdWx0WzFdO1xuICB2YXIgdGltZVBhdHRlcm4gPSBtYXRjaFJlc3VsdFsyXTtcblxuICBpZiAoIXRpbWVQYXR0ZXJuKSB7XG4gICAgcmV0dXJuIGRhdGVMb25nRm9ybWF0dGVyKHBhdHRlcm4sIGZvcm1hdExvbmcpO1xuICB9XG5cbiAgdmFyIGRhdGVUaW1lRm9ybWF0O1xuXG4gIHN3aXRjaCAoZGF0ZVBhdHRlcm4pIHtcbiAgICBjYXNlICdQJzpcbiAgICAgIGRhdGVUaW1lRm9ybWF0ID0gZm9ybWF0TG9uZy5kYXRlVGltZSh7XG4gICAgICAgIHdpZHRoOiAnc2hvcnQnXG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnUFAnOlxuICAgICAgZGF0ZVRpbWVGb3JtYXQgPSBmb3JtYXRMb25nLmRhdGVUaW1lKHtcbiAgICAgICAgd2lkdGg6ICdtZWRpdW0nXG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnUFBQJzpcbiAgICAgIGRhdGVUaW1lRm9ybWF0ID0gZm9ybWF0TG9uZy5kYXRlVGltZSh7XG4gICAgICAgIHdpZHRoOiAnbG9uZydcbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdQUFBQJzpcbiAgICBkZWZhdWx0OlxuICAgICAgZGF0ZVRpbWVGb3JtYXQgPSBmb3JtYXRMb25nLmRhdGVUaW1lKHtcbiAgICAgICAgd2lkdGg6ICdmdWxsJ1xuICAgICAgfSk7XG4gICAgICBicmVhaztcbiAgfVxuXG4gIHJldHVybiBkYXRlVGltZUZvcm1hdC5yZXBsYWNlKCd7e2RhdGV9fScsIGRhdGVMb25nRm9ybWF0dGVyKGRhdGVQYXR0ZXJuLCBmb3JtYXRMb25nKSkucmVwbGFjZSgne3t0aW1lfX0nLCB0aW1lTG9uZ0Zvcm1hdHRlcih0aW1lUGF0dGVybiwgZm9ybWF0TG9uZykpO1xufTtcblxudmFyIGxvbmdGb3JtYXR0ZXJzID0ge1xuICBwOiB0aW1lTG9uZ0Zvcm1hdHRlcixcbiAgUDogZGF0ZVRpbWVMb25nRm9ybWF0dGVyXG59O1xuZXhwb3J0IGRlZmF1bHQgbG9uZ0Zvcm1hdHRlcnM7IiwidmFyIHByb3RlY3RlZERheU9mWWVhclRva2VucyA9IFsnRCcsICdERCddO1xudmFyIHByb3RlY3RlZFdlZWtZZWFyVG9rZW5zID0gWydZWScsICdZWVlZJ107XG5leHBvcnQgZnVuY3Rpb24gaXNQcm90ZWN0ZWREYXlPZlllYXJUb2tlbih0b2tlbikge1xuICByZXR1cm4gcHJvdGVjdGVkRGF5T2ZZZWFyVG9rZW5zLmluZGV4T2YodG9rZW4pICE9PSAtMTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1Byb3RlY3RlZFdlZWtZZWFyVG9rZW4odG9rZW4pIHtcbiAgcmV0dXJuIHByb3RlY3RlZFdlZWtZZWFyVG9rZW5zLmluZGV4T2YodG9rZW4pICE9PSAtMTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB0aHJvd1Byb3RlY3RlZEVycm9yKHRva2VuLCBmb3JtYXQsIGlucHV0KSB7XG4gIGlmICh0b2tlbiA9PT0gJ1lZWVknKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJVc2UgYHl5eXlgIGluc3RlYWQgb2YgYFlZWVlgIChpbiBgXCIuY29uY2F0KGZvcm1hdCwgXCJgKSBmb3IgZm9ybWF0dGluZyB5ZWFycyB0byB0aGUgaW5wdXQgYFwiKS5jb25jYXQoaW5wdXQsIFwiYDsgc2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kXCIpKTtcbiAgfSBlbHNlIGlmICh0b2tlbiA9PT0gJ1lZJykge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiVXNlIGB5eWAgaW5zdGVhZCBvZiBgWVlgIChpbiBgXCIuY29uY2F0KGZvcm1hdCwgXCJgKSBmb3IgZm9ybWF0dGluZyB5ZWFycyB0byB0aGUgaW5wdXQgYFwiKS5jb25jYXQoaW5wdXQsIFwiYDsgc2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kXCIpKTtcbiAgfSBlbHNlIGlmICh0b2tlbiA9PT0gJ0QnKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJVc2UgYGRgIGluc3RlYWQgb2YgYERgIChpbiBgXCIuY29uY2F0KGZvcm1hdCwgXCJgKSBmb3IgZm9ybWF0dGluZyBkYXlzIG9mIHRoZSBtb250aCB0byB0aGUgaW5wdXQgYFwiKS5jb25jYXQoaW5wdXQsIFwiYDsgc2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kXCIpKTtcbiAgfSBlbHNlIGlmICh0b2tlbiA9PT0gJ0REJykge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiVXNlIGBkZGAgaW5zdGVhZCBvZiBgRERgIChpbiBgXCIuY29uY2F0KGZvcm1hdCwgXCJgKSBmb3IgZm9ybWF0dGluZyBkYXlzIG9mIHRoZSBtb250aCB0byB0aGUgaW5wdXQgYFwiKS5jb25jYXQoaW5wdXQsIFwiYDsgc2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kXCIpKTtcbiAgfVxufSIsInZhciBmb3JtYXREaXN0YW5jZUxvY2FsZSA9IHtcbiAgbGVzc1RoYW5YU2Vjb25kczoge1xuICAgIG9uZTogJ2xlc3MgdGhhbiBhIHNlY29uZCcsXG4gICAgb3RoZXI6ICdsZXNzIHRoYW4ge3tjb3VudH19IHNlY29uZHMnXG4gIH0sXG4gIHhTZWNvbmRzOiB7XG4gICAgb25lOiAnMSBzZWNvbmQnLFxuICAgIG90aGVyOiAne3tjb3VudH19IHNlY29uZHMnXG4gIH0sXG4gIGhhbGZBTWludXRlOiAnaGFsZiBhIG1pbnV0ZScsXG4gIGxlc3NUaGFuWE1pbnV0ZXM6IHtcbiAgICBvbmU6ICdsZXNzIHRoYW4gYSBtaW51dGUnLFxuICAgIG90aGVyOiAnbGVzcyB0aGFuIHt7Y291bnR9fSBtaW51dGVzJ1xuICB9LFxuICB4TWludXRlczoge1xuICAgIG9uZTogJzEgbWludXRlJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBtaW51dGVzJ1xuICB9LFxuICBhYm91dFhIb3Vyczoge1xuICAgIG9uZTogJ2Fib3V0IDEgaG91cicsXG4gICAgb3RoZXI6ICdhYm91dCB7e2NvdW50fX0gaG91cnMnXG4gIH0sXG4gIHhIb3Vyczoge1xuICAgIG9uZTogJzEgaG91cicsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gaG91cnMnXG4gIH0sXG4gIHhEYXlzOiB7XG4gICAgb25lOiAnMSBkYXknLFxuICAgIG90aGVyOiAne3tjb3VudH19IGRheXMnXG4gIH0sXG4gIGFib3V0WFdlZWtzOiB7XG4gICAgb25lOiAnYWJvdXQgMSB3ZWVrJyxcbiAgICBvdGhlcjogJ2Fib3V0IHt7Y291bnR9fSB3ZWVrcydcbiAgfSxcbiAgeFdlZWtzOiB7XG4gICAgb25lOiAnMSB3ZWVrJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSB3ZWVrcydcbiAgfSxcbiAgYWJvdXRYTW9udGhzOiB7XG4gICAgb25lOiAnYWJvdXQgMSBtb250aCcsXG4gICAgb3RoZXI6ICdhYm91dCB7e2NvdW50fX0gbW9udGhzJ1xuICB9LFxuICB4TW9udGhzOiB7XG4gICAgb25lOiAnMSBtb250aCcsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gbW9udGhzJ1xuICB9LFxuICBhYm91dFhZZWFyczoge1xuICAgIG9uZTogJ2Fib3V0IDEgeWVhcicsXG4gICAgb3RoZXI6ICdhYm91dCB7e2NvdW50fX0geWVhcnMnXG4gIH0sXG4gIHhZZWFyczoge1xuICAgIG9uZTogJzEgeWVhcicsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0geWVhcnMnXG4gIH0sXG4gIG92ZXJYWWVhcnM6IHtcbiAgICBvbmU6ICdvdmVyIDEgeWVhcicsXG4gICAgb3RoZXI6ICdvdmVyIHt7Y291bnR9fSB5ZWFycydcbiAgfSxcbiAgYWxtb3N0WFllYXJzOiB7XG4gICAgb25lOiAnYWxtb3N0IDEgeWVhcicsXG4gICAgb3RoZXI6ICdhbG1vc3Qge3tjb3VudH19IHllYXJzJ1xuICB9XG59O1xuXG52YXIgZm9ybWF0RGlzdGFuY2UgPSBmdW5jdGlvbiBmb3JtYXREaXN0YW5jZSh0b2tlbiwgY291bnQsIG9wdGlvbnMpIHtcbiAgdmFyIHJlc3VsdDtcbiAgdmFyIHRva2VuVmFsdWUgPSBmb3JtYXREaXN0YW5jZUxvY2FsZVt0b2tlbl07XG5cbiAgaWYgKHR5cGVvZiB0b2tlblZhbHVlID09PSAnc3RyaW5nJykge1xuICAgIHJlc3VsdCA9IHRva2VuVmFsdWU7XG4gIH0gZWxzZSBpZiAoY291bnQgPT09IDEpIHtcbiAgICByZXN1bHQgPSB0b2tlblZhbHVlLm9uZTtcbiAgfSBlbHNlIHtcbiAgICByZXN1bHQgPSB0b2tlblZhbHVlLm90aGVyLnJlcGxhY2UoJ3t7Y291bnR9fScsIGNvdW50LnRvU3RyaW5nKCkpO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMgIT09IG51bGwgJiYgb3B0aW9ucyAhPT0gdm9pZCAwICYmIG9wdGlvbnMuYWRkU3VmZml4KSB7XG4gICAgaWYgKG9wdGlvbnMuY29tcGFyaXNvbiAmJiBvcHRpb25zLmNvbXBhcmlzb24gPiAwKSB7XG4gICAgICByZXR1cm4gJ2luICcgKyByZXN1bHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiByZXN1bHQgKyAnIGFnbyc7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZvcm1hdERpc3RhbmNlOyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJ1aWxkRm9ybWF0TG9uZ0ZuKGFyZ3MpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgLy8gVE9ETzogUmVtb3ZlIFN0cmluZygpXG4gICAgdmFyIHdpZHRoID0gb3B0aW9ucy53aWR0aCA/IFN0cmluZyhvcHRpb25zLndpZHRoKSA6IGFyZ3MuZGVmYXVsdFdpZHRoO1xuICAgIHZhciBmb3JtYXQgPSBhcmdzLmZvcm1hdHNbd2lkdGhdIHx8IGFyZ3MuZm9ybWF0c1thcmdzLmRlZmF1bHRXaWR0aF07XG4gICAgcmV0dXJuIGZvcm1hdDtcbiAgfTtcbn0iLCJpbXBvcnQgYnVpbGRGb3JtYXRMb25nRm4gZnJvbSBcIi4uLy4uLy4uL19saWIvYnVpbGRGb3JtYXRMb25nRm4vaW5kZXguanNcIjtcbnZhciBkYXRlRm9ybWF0cyA9IHtcbiAgZnVsbDogJ0VFRUUsIE1NTU0gZG8sIHknLFxuICBsb25nOiAnTU1NTSBkbywgeScsXG4gIG1lZGl1bTogJ01NTSBkLCB5JyxcbiAgc2hvcnQ6ICdNTS9kZC95eXl5J1xufTtcbnZhciB0aW1lRm9ybWF0cyA9IHtcbiAgZnVsbDogJ2g6bW06c3MgYSB6enp6JyxcbiAgbG9uZzogJ2g6bW06c3MgYSB6JyxcbiAgbWVkaXVtOiAnaDptbTpzcyBhJyxcbiAgc2hvcnQ6ICdoOm1tIGEnXG59O1xudmFyIGRhdGVUaW1lRm9ybWF0cyA9IHtcbiAgZnVsbDogXCJ7e2RhdGV9fSAnYXQnIHt7dGltZX19XCIsXG4gIGxvbmc6IFwie3tkYXRlfX0gJ2F0JyB7e3RpbWV9fVwiLFxuICBtZWRpdW06ICd7e2RhdGV9fSwge3t0aW1lfX0nLFxuICBzaG9ydDogJ3t7ZGF0ZX19LCB7e3RpbWV9fSdcbn07XG52YXIgZm9ybWF0TG9uZyA9IHtcbiAgZGF0ZTogYnVpbGRGb3JtYXRMb25nRm4oe1xuICAgIGZvcm1hdHM6IGRhdGVGb3JtYXRzLFxuICAgIGRlZmF1bHRXaWR0aDogJ2Z1bGwnXG4gIH0pLFxuICB0aW1lOiBidWlsZEZvcm1hdExvbmdGbih7XG4gICAgZm9ybWF0czogdGltZUZvcm1hdHMsXG4gICAgZGVmYXVsdFdpZHRoOiAnZnVsbCdcbiAgfSksXG4gIGRhdGVUaW1lOiBidWlsZEZvcm1hdExvbmdGbih7XG4gICAgZm9ybWF0czogZGF0ZVRpbWVGb3JtYXRzLFxuICAgIGRlZmF1bHRXaWR0aDogJ2Z1bGwnXG4gIH0pXG59O1xuZXhwb3J0IGRlZmF1bHQgZm9ybWF0TG9uZzsiLCJ2YXIgZm9ybWF0UmVsYXRpdmVMb2NhbGUgPSB7XG4gIGxhc3RXZWVrOiBcIidsYXN0JyBlZWVlICdhdCcgcFwiLFxuICB5ZXN0ZXJkYXk6IFwiJ3llc3RlcmRheSBhdCcgcFwiLFxuICB0b2RheTogXCIndG9kYXkgYXQnIHBcIixcbiAgdG9tb3Jyb3c6IFwiJ3RvbW9ycm93IGF0JyBwXCIsXG4gIG5leHRXZWVrOiBcImVlZWUgJ2F0JyBwXCIsXG4gIG90aGVyOiAnUCdcbn07XG5cbnZhciBmb3JtYXRSZWxhdGl2ZSA9IGZ1bmN0aW9uIGZvcm1hdFJlbGF0aXZlKHRva2VuLCBfZGF0ZSwgX2Jhc2VEYXRlLCBfb3B0aW9ucykge1xuICByZXR1cm4gZm9ybWF0UmVsYXRpdmVMb2NhbGVbdG9rZW5dO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZm9ybWF0UmVsYXRpdmU7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYnVpbGRMb2NhbGl6ZUZuKGFyZ3MpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChkaXJ0eUluZGV4LCBvcHRpb25zKSB7XG4gICAgdmFyIGNvbnRleHQgPSBvcHRpb25zICE9PSBudWxsICYmIG9wdGlvbnMgIT09IHZvaWQgMCAmJiBvcHRpb25zLmNvbnRleHQgPyBTdHJpbmcob3B0aW9ucy5jb250ZXh0KSA6ICdzdGFuZGFsb25lJztcbiAgICB2YXIgdmFsdWVzQXJyYXk7XG5cbiAgICBpZiAoY29udGV4dCA9PT0gJ2Zvcm1hdHRpbmcnICYmIGFyZ3MuZm9ybWF0dGluZ1ZhbHVlcykge1xuICAgICAgdmFyIGRlZmF1bHRXaWR0aCA9IGFyZ3MuZGVmYXVsdEZvcm1hdHRpbmdXaWR0aCB8fCBhcmdzLmRlZmF1bHRXaWR0aDtcbiAgICAgIHZhciB3aWR0aCA9IG9wdGlvbnMgIT09IG51bGwgJiYgb3B0aW9ucyAhPT0gdm9pZCAwICYmIG9wdGlvbnMud2lkdGggPyBTdHJpbmcob3B0aW9ucy53aWR0aCkgOiBkZWZhdWx0V2lkdGg7XG4gICAgICB2YWx1ZXNBcnJheSA9IGFyZ3MuZm9ybWF0dGluZ1ZhbHVlc1t3aWR0aF0gfHwgYXJncy5mb3JtYXR0aW5nVmFsdWVzW2RlZmF1bHRXaWR0aF07XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBfZGVmYXVsdFdpZHRoID0gYXJncy5kZWZhdWx0V2lkdGg7XG5cbiAgICAgIHZhciBfd2lkdGggPSBvcHRpb25zICE9PSBudWxsICYmIG9wdGlvbnMgIT09IHZvaWQgMCAmJiBvcHRpb25zLndpZHRoID8gU3RyaW5nKG9wdGlvbnMud2lkdGgpIDogYXJncy5kZWZhdWx0V2lkdGg7XG5cbiAgICAgIHZhbHVlc0FycmF5ID0gYXJncy52YWx1ZXNbX3dpZHRoXSB8fCBhcmdzLnZhbHVlc1tfZGVmYXVsdFdpZHRoXTtcbiAgICB9XG5cbiAgICB2YXIgaW5kZXggPSBhcmdzLmFyZ3VtZW50Q2FsbGJhY2sgPyBhcmdzLmFyZ3VtZW50Q2FsbGJhY2soZGlydHlJbmRleCkgOiBkaXJ0eUluZGV4OyAvLyBAdHMtaWdub3JlOiBGb3Igc29tZSByZWFzb24gVHlwZVNjcmlwdCBqdXN0IGRvbid0IHdhbnQgdG8gbWF0Y2ggaXQsIG5vIG1hdHRlciBob3cgaGFyZCB3ZSB0cnkuIEkgY2hhbGxlbmdlIHlvdSB0byB0cnkgdG8gcmVtb3ZlIGl0IVxuXG4gICAgcmV0dXJuIHZhbHVlc0FycmF5W2luZGV4XTtcbiAgfTtcbn0iLCJpbXBvcnQgYnVpbGRMb2NhbGl6ZUZuIGZyb20gXCIuLi8uLi8uLi9fbGliL2J1aWxkTG9jYWxpemVGbi9pbmRleC5qc1wiO1xudmFyIGVyYVZhbHVlcyA9IHtcbiAgbmFycm93OiBbJ0InLCAnQSddLFxuICBhYmJyZXZpYXRlZDogWydCQycsICdBRCddLFxuICB3aWRlOiBbJ0JlZm9yZSBDaHJpc3QnLCAnQW5ubyBEb21pbmknXVxufTtcbnZhciBxdWFydGVyVmFsdWVzID0ge1xuICBuYXJyb3c6IFsnMScsICcyJywgJzMnLCAnNCddLFxuICBhYmJyZXZpYXRlZDogWydRMScsICdRMicsICdRMycsICdRNCddLFxuICB3aWRlOiBbJzFzdCBxdWFydGVyJywgJzJuZCBxdWFydGVyJywgJzNyZCBxdWFydGVyJywgJzR0aCBxdWFydGVyJ11cbn07IC8vIE5vdGU6IGluIEVuZ2xpc2gsIHRoZSBuYW1lcyBvZiBkYXlzIG9mIHRoZSB3ZWVrIGFuZCBtb250aHMgYXJlIGNhcGl0YWxpemVkLlxuLy8gSWYgeW91IGFyZSBtYWtpbmcgYSBuZXcgbG9jYWxlIGJhc2VkIG9uIHRoaXMgb25lLCBjaGVjayBpZiB0aGUgc2FtZSBpcyB0cnVlIGZvciB0aGUgbGFuZ3VhZ2UgeW91J3JlIHdvcmtpbmcgb24uXG4vLyBHZW5lcmFsbHksIGZvcm1hdHRlZCBkYXRlcyBzaG91bGQgbG9vayBsaWtlIHRoZXkgYXJlIGluIHRoZSBtaWRkbGUgb2YgYSBzZW50ZW5jZSxcbi8vIGUuZy4gaW4gU3BhbmlzaCBsYW5ndWFnZSB0aGUgd2Vla2RheXMgYW5kIG1vbnRocyBzaG91bGQgYmUgaW4gdGhlIGxvd2VyY2FzZS5cblxudmFyIG1vbnRoVmFsdWVzID0ge1xuICBuYXJyb3c6IFsnSicsICdGJywgJ00nLCAnQScsICdNJywgJ0onLCAnSicsICdBJywgJ1MnLCAnTycsICdOJywgJ0QnXSxcbiAgYWJicmV2aWF0ZWQ6IFsnSmFuJywgJ0ZlYicsICdNYXInLCAnQXByJywgJ01heScsICdKdW4nLCAnSnVsJywgJ0F1ZycsICdTZXAnLCAnT2N0JywgJ05vdicsICdEZWMnXSxcbiAgd2lkZTogWydKYW51YXJ5JywgJ0ZlYnJ1YXJ5JywgJ01hcmNoJywgJ0FwcmlsJywgJ01heScsICdKdW5lJywgJ0p1bHknLCAnQXVndXN0JywgJ1NlcHRlbWJlcicsICdPY3RvYmVyJywgJ05vdmVtYmVyJywgJ0RlY2VtYmVyJ11cbn07XG52YXIgZGF5VmFsdWVzID0ge1xuICBuYXJyb3c6IFsnUycsICdNJywgJ1QnLCAnVycsICdUJywgJ0YnLCAnUyddLFxuICBzaG9ydDogWydTdScsICdNbycsICdUdScsICdXZScsICdUaCcsICdGcicsICdTYSddLFxuICBhYmJyZXZpYXRlZDogWydTdW4nLCAnTW9uJywgJ1R1ZScsICdXZWQnLCAnVGh1JywgJ0ZyaScsICdTYXQnXSxcbiAgd2lkZTogWydTdW5kYXknLCAnTW9uZGF5JywgJ1R1ZXNkYXknLCAnV2VkbmVzZGF5JywgJ1RodXJzZGF5JywgJ0ZyaWRheScsICdTYXR1cmRheSddXG59O1xudmFyIGRheVBlcmlvZFZhbHVlcyA9IHtcbiAgbmFycm93OiB7XG4gICAgYW06ICdhJyxcbiAgICBwbTogJ3AnLFxuICAgIG1pZG5pZ2h0OiAnbWknLFxuICAgIG5vb246ICduJyxcbiAgICBtb3JuaW5nOiAnbW9ybmluZycsXG4gICAgYWZ0ZXJub29uOiAnYWZ0ZXJub29uJyxcbiAgICBldmVuaW5nOiAnZXZlbmluZycsXG4gICAgbmlnaHQ6ICduaWdodCdcbiAgfSxcbiAgYWJicmV2aWF0ZWQ6IHtcbiAgICBhbTogJ0FNJyxcbiAgICBwbTogJ1BNJyxcbiAgICBtaWRuaWdodDogJ21pZG5pZ2h0JyxcbiAgICBub29uOiAnbm9vbicsXG4gICAgbW9ybmluZzogJ21vcm5pbmcnLFxuICAgIGFmdGVybm9vbjogJ2FmdGVybm9vbicsXG4gICAgZXZlbmluZzogJ2V2ZW5pbmcnLFxuICAgIG5pZ2h0OiAnbmlnaHQnXG4gIH0sXG4gIHdpZGU6IHtcbiAgICBhbTogJ2EubS4nLFxuICAgIHBtOiAncC5tLicsXG4gICAgbWlkbmlnaHQ6ICdtaWRuaWdodCcsXG4gICAgbm9vbjogJ25vb24nLFxuICAgIG1vcm5pbmc6ICdtb3JuaW5nJyxcbiAgICBhZnRlcm5vb246ICdhZnRlcm5vb24nLFxuICAgIGV2ZW5pbmc6ICdldmVuaW5nJyxcbiAgICBuaWdodDogJ25pZ2h0J1xuICB9XG59O1xudmFyIGZvcm1hdHRpbmdEYXlQZXJpb2RWYWx1ZXMgPSB7XG4gIG5hcnJvdzoge1xuICAgIGFtOiAnYScsXG4gICAgcG06ICdwJyxcbiAgICBtaWRuaWdodDogJ21pJyxcbiAgICBub29uOiAnbicsXG4gICAgbW9ybmluZzogJ2luIHRoZSBtb3JuaW5nJyxcbiAgICBhZnRlcm5vb246ICdpbiB0aGUgYWZ0ZXJub29uJyxcbiAgICBldmVuaW5nOiAnaW4gdGhlIGV2ZW5pbmcnLFxuICAgIG5pZ2h0OiAnYXQgbmlnaHQnXG4gIH0sXG4gIGFiYnJldmlhdGVkOiB7XG4gICAgYW06ICdBTScsXG4gICAgcG06ICdQTScsXG4gICAgbWlkbmlnaHQ6ICdtaWRuaWdodCcsXG4gICAgbm9vbjogJ25vb24nLFxuICAgIG1vcm5pbmc6ICdpbiB0aGUgbW9ybmluZycsXG4gICAgYWZ0ZXJub29uOiAnaW4gdGhlIGFmdGVybm9vbicsXG4gICAgZXZlbmluZzogJ2luIHRoZSBldmVuaW5nJyxcbiAgICBuaWdodDogJ2F0IG5pZ2h0J1xuICB9LFxuICB3aWRlOiB7XG4gICAgYW06ICdhLm0uJyxcbiAgICBwbTogJ3AubS4nLFxuICAgIG1pZG5pZ2h0OiAnbWlkbmlnaHQnLFxuICAgIG5vb246ICdub29uJyxcbiAgICBtb3JuaW5nOiAnaW4gdGhlIG1vcm5pbmcnLFxuICAgIGFmdGVybm9vbjogJ2luIHRoZSBhZnRlcm5vb24nLFxuICAgIGV2ZW5pbmc6ICdpbiB0aGUgZXZlbmluZycsXG4gICAgbmlnaHQ6ICdhdCBuaWdodCdcbiAgfVxufTtcblxudmFyIG9yZGluYWxOdW1iZXIgPSBmdW5jdGlvbiBvcmRpbmFsTnVtYmVyKGRpcnR5TnVtYmVyLCBfb3B0aW9ucykge1xuICB2YXIgbnVtYmVyID0gTnVtYmVyKGRpcnR5TnVtYmVyKTsgLy8gSWYgb3JkaW5hbCBudW1iZXJzIGRlcGVuZCBvbiBjb250ZXh0LCBmb3IgZXhhbXBsZSxcbiAgLy8gaWYgdGhleSBhcmUgZGlmZmVyZW50IGZvciBkaWZmZXJlbnQgZ3JhbW1hdGljYWwgZ2VuZGVycyxcbiAgLy8gdXNlIGBvcHRpb25zLnVuaXRgLlxuICAvL1xuICAvLyBgdW5pdGAgY2FuIGJlICd5ZWFyJywgJ3F1YXJ0ZXInLCAnbW9udGgnLCAnd2VlaycsICdkYXRlJywgJ2RheU9mWWVhcicsXG4gIC8vICdkYXknLCAnaG91cicsICdtaW51dGUnLCAnc2Vjb25kJy5cblxuICB2YXIgcmVtMTAwID0gbnVtYmVyICUgMTAwO1xuXG4gIGlmIChyZW0xMDAgPiAyMCB8fCByZW0xMDAgPCAxMCkge1xuICAgIHN3aXRjaCAocmVtMTAwICUgMTApIHtcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgcmV0dXJuIG51bWJlciArICdzdCc7XG5cbiAgICAgIGNhc2UgMjpcbiAgICAgICAgcmV0dXJuIG51bWJlciArICduZCc7XG5cbiAgICAgIGNhc2UgMzpcbiAgICAgICAgcmV0dXJuIG51bWJlciArICdyZCc7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bWJlciArICd0aCc7XG59O1xuXG52YXIgbG9jYWxpemUgPSB7XG4gIG9yZGluYWxOdW1iZXI6IG9yZGluYWxOdW1iZXIsXG4gIGVyYTogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IGVyYVZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJ1xuICB9KSxcbiAgcXVhcnRlcjogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IHF1YXJ0ZXJWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZScsXG4gICAgYXJndW1lbnRDYWxsYmFjazogZnVuY3Rpb24gYXJndW1lbnRDYWxsYmFjayhxdWFydGVyKSB7XG4gICAgICByZXR1cm4gcXVhcnRlciAtIDE7XG4gICAgfVxuICB9KSxcbiAgbW9udGg6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBtb250aFZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJ1xuICB9KSxcbiAgZGF5OiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogZGF5VmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnXG4gIH0pLFxuICBkYXlQZXJpb2Q6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBkYXlQZXJpb2RWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZScsXG4gICAgZm9ybWF0dGluZ1ZhbHVlczogZm9ybWF0dGluZ0RheVBlcmlvZFZhbHVlcyxcbiAgICBkZWZhdWx0Rm9ybWF0dGluZ1dpZHRoOiAnd2lkZSdcbiAgfSlcbn07XG5leHBvcnQgZGVmYXVsdCBsb2NhbGl6ZTsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBidWlsZE1hdGNoRm4oYXJncykge1xuICByZXR1cm4gZnVuY3Rpb24gKHN0cmluZykge1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgICB2YXIgd2lkdGggPSBvcHRpb25zLndpZHRoO1xuICAgIHZhciBtYXRjaFBhdHRlcm4gPSB3aWR0aCAmJiBhcmdzLm1hdGNoUGF0dGVybnNbd2lkdGhdIHx8IGFyZ3MubWF0Y2hQYXR0ZXJuc1thcmdzLmRlZmF1bHRNYXRjaFdpZHRoXTtcbiAgICB2YXIgbWF0Y2hSZXN1bHQgPSBzdHJpbmcubWF0Y2gobWF0Y2hQYXR0ZXJuKTtcblxuICAgIGlmICghbWF0Y2hSZXN1bHQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHZhciBtYXRjaGVkU3RyaW5nID0gbWF0Y2hSZXN1bHRbMF07XG4gICAgdmFyIHBhcnNlUGF0dGVybnMgPSB3aWR0aCAmJiBhcmdzLnBhcnNlUGF0dGVybnNbd2lkdGhdIHx8IGFyZ3MucGFyc2VQYXR0ZXJuc1thcmdzLmRlZmF1bHRQYXJzZVdpZHRoXTtcbiAgICB2YXIga2V5ID0gQXJyYXkuaXNBcnJheShwYXJzZVBhdHRlcm5zKSA/IGZpbmRJbmRleChwYXJzZVBhdHRlcm5zLCBmdW5jdGlvbiAocGF0dGVybikge1xuICAgICAgcmV0dXJuIHBhdHRlcm4udGVzdChtYXRjaGVkU3RyaW5nKTtcbiAgICB9KSA6IGZpbmRLZXkocGFyc2VQYXR0ZXJucywgZnVuY3Rpb24gKHBhdHRlcm4pIHtcbiAgICAgIHJldHVybiBwYXR0ZXJuLnRlc3QobWF0Y2hlZFN0cmluZyk7XG4gICAgfSk7XG4gICAgdmFyIHZhbHVlO1xuICAgIHZhbHVlID0gYXJncy52YWx1ZUNhbGxiYWNrID8gYXJncy52YWx1ZUNhbGxiYWNrKGtleSkgOiBrZXk7XG4gICAgdmFsdWUgPSBvcHRpb25zLnZhbHVlQ2FsbGJhY2sgPyBvcHRpb25zLnZhbHVlQ2FsbGJhY2sodmFsdWUpIDogdmFsdWU7XG4gICAgdmFyIHJlc3QgPSBzdHJpbmcuc2xpY2UobWF0Y2hlZFN0cmluZy5sZW5ndGgpO1xuICAgIHJldHVybiB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICByZXN0OiByZXN0XG4gICAgfTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZmluZEtleShvYmplY3QsIHByZWRpY2F0ZSkge1xuICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgaWYgKG9iamVjdC5oYXNPd25Qcm9wZXJ0eShrZXkpICYmIHByZWRpY2F0ZShvYmplY3Rba2V5XSkpIHtcbiAgICAgIHJldHVybiBrZXk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gZmluZEluZGV4KGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgZm9yICh2YXIga2V5ID0gMDsga2V5IDwgYXJyYXkubGVuZ3RoOyBrZXkrKykge1xuICAgIGlmIChwcmVkaWNhdGUoYXJyYXlba2V5XSkpIHtcbiAgICAgIHJldHVybiBrZXk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn0iLCJpbXBvcnQgYnVpbGRNYXRjaEZuIGZyb20gXCIuLi8uLi8uLi9fbGliL2J1aWxkTWF0Y2hGbi9pbmRleC5qc1wiO1xuaW1wb3J0IGJ1aWxkTWF0Y2hQYXR0ZXJuRm4gZnJvbSBcIi4uLy4uLy4uL19saWIvYnVpbGRNYXRjaFBhdHRlcm5Gbi9pbmRleC5qc1wiO1xudmFyIG1hdGNoT3JkaW5hbE51bWJlclBhdHRlcm4gPSAvXihcXGQrKSh0aHxzdHxuZHxyZCk/L2k7XG52YXIgcGFyc2VPcmRpbmFsTnVtYmVyUGF0dGVybiA9IC9cXGQrL2k7XG52YXIgbWF0Y2hFcmFQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXihifGEpL2ksXG4gIGFiYnJldmlhdGVkOiAvXihiXFwuP1xccz9jXFwuP3xiXFwuP1xccz9jXFwuP1xccz9lXFwuP3xhXFwuP1xccz9kXFwuP3xjXFwuP1xccz9lXFwuPykvaSxcbiAgd2lkZTogL14oYmVmb3JlIGNocmlzdHxiZWZvcmUgY29tbW9uIGVyYXxhbm5vIGRvbWluaXxjb21tb24gZXJhKS9pXG59O1xudmFyIHBhcnNlRXJhUGF0dGVybnMgPSB7XG4gIGFueTogWy9eYi9pLCAvXihhfGMpL2ldXG59O1xudmFyIG1hdGNoUXVhcnRlclBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eWzEyMzRdL2ksXG4gIGFiYnJldmlhdGVkOiAvXnFbMTIzNF0vaSxcbiAgd2lkZTogL15bMTIzNF0odGh8c3R8bmR8cmQpPyBxdWFydGVyL2lcbn07XG52YXIgcGFyc2VRdWFydGVyUGF0dGVybnMgPSB7XG4gIGFueTogWy8xL2ksIC8yL2ksIC8zL2ksIC80L2ldXG59O1xudmFyIG1hdGNoTW9udGhQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXltqZm1hc29uZF0vaSxcbiAgYWJicmV2aWF0ZWQ6IC9eKGphbnxmZWJ8bWFyfGFwcnxtYXl8anVufGp1bHxhdWd8c2VwfG9jdHxub3Z8ZGVjKS9pLFxuICB3aWRlOiAvXihqYW51YXJ5fGZlYnJ1YXJ5fG1hcmNofGFwcmlsfG1heXxqdW5lfGp1bHl8YXVndXN0fHNlcHRlbWJlcnxvY3RvYmVyfG5vdmVtYmVyfGRlY2VtYmVyKS9pXG59O1xudmFyIHBhcnNlTW9udGhQYXR0ZXJucyA9IHtcbiAgbmFycm93OiBbL15qL2ksIC9eZi9pLCAvXm0vaSwgL15hL2ksIC9ebS9pLCAvXmovaSwgL15qL2ksIC9eYS9pLCAvXnMvaSwgL15vL2ksIC9ebi9pLCAvXmQvaV0sXG4gIGFueTogWy9eamEvaSwgL15mL2ksIC9ebWFyL2ksIC9eYXAvaSwgL15tYXkvaSwgL15qdW4vaSwgL15qdWwvaSwgL15hdS9pLCAvXnMvaSwgL15vL2ksIC9ebi9pLCAvXmQvaV1cbn07XG52YXIgbWF0Y2hEYXlQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXltzbXR3Zl0vaSxcbiAgc2hvcnQ6IC9eKHN1fG1vfHR1fHdlfHRofGZyfHNhKS9pLFxuICBhYmJyZXZpYXRlZDogL14oc3VufG1vbnx0dWV8d2VkfHRodXxmcml8c2F0KS9pLFxuICB3aWRlOiAvXihzdW5kYXl8bW9uZGF5fHR1ZXNkYXl8d2VkbmVzZGF5fHRodXJzZGF5fGZyaWRheXxzYXR1cmRheSkvaVxufTtcbnZhciBwYXJzZURheVBhdHRlcm5zID0ge1xuICBuYXJyb3c6IFsvXnMvaSwgL15tL2ksIC9edC9pLCAvXncvaSwgL150L2ksIC9eZi9pLCAvXnMvaV0sXG4gIGFueTogWy9ec3UvaSwgL15tL2ksIC9edHUvaSwgL153L2ksIC9edGgvaSwgL15mL2ksIC9ec2EvaV1cbn07XG52YXIgbWF0Y2hEYXlQZXJpb2RQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXihhfHB8bWl8bnwoaW4gdGhlfGF0KSAobW9ybmluZ3xhZnRlcm5vb258ZXZlbmluZ3xuaWdodCkpL2ksXG4gIGFueTogL14oW2FwXVxcLj9cXHM/bVxcLj98bWlkbmlnaHR8bm9vbnwoaW4gdGhlfGF0KSAobW9ybmluZ3xhZnRlcm5vb258ZXZlbmluZ3xuaWdodCkpL2lcbn07XG52YXIgcGFyc2VEYXlQZXJpb2RQYXR0ZXJucyA9IHtcbiAgYW55OiB7XG4gICAgYW06IC9eYS9pLFxuICAgIHBtOiAvXnAvaSxcbiAgICBtaWRuaWdodDogL15taS9pLFxuICAgIG5vb246IC9ebm8vaSxcbiAgICBtb3JuaW5nOiAvbW9ybmluZy9pLFxuICAgIGFmdGVybm9vbjogL2FmdGVybm9vbi9pLFxuICAgIGV2ZW5pbmc6IC9ldmVuaW5nL2ksXG4gICAgbmlnaHQ6IC9uaWdodC9pXG4gIH1cbn07XG52YXIgbWF0Y2ggPSB7XG4gIG9yZGluYWxOdW1iZXI6IGJ1aWxkTWF0Y2hQYXR0ZXJuRm4oe1xuICAgIG1hdGNoUGF0dGVybjogbWF0Y2hPcmRpbmFsTnVtYmVyUGF0dGVybixcbiAgICBwYXJzZVBhdHRlcm46IHBhcnNlT3JkaW5hbE51bWJlclBhdHRlcm4sXG4gICAgdmFsdWVDYWxsYmFjazogZnVuY3Rpb24gdmFsdWVDYWxsYmFjayh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHBhcnNlSW50KHZhbHVlLCAxMCk7XG4gICAgfVxuICB9KSxcbiAgZXJhOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoRXJhUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICd3aWRlJyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZUVyYVBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KSxcbiAgcXVhcnRlcjogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaFF1YXJ0ZXJQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ3dpZGUnLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlUXVhcnRlclBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55JyxcbiAgICB2YWx1ZUNhbGxiYWNrOiBmdW5jdGlvbiB2YWx1ZUNhbGxiYWNrKGluZGV4KSB7XG4gICAgICByZXR1cm4gaW5kZXggKyAxO1xuICAgIH1cbiAgfSksXG4gIG1vbnRoOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoTW9udGhQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ3dpZGUnLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlTW9udGhQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSksXG4gIGRheTogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaERheVBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VEYXlQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSksXG4gIGRheVBlcmlvZDogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaERheVBlcmlvZFBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnYW55JyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZURheVBlcmlvZFBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KVxufTtcbmV4cG9ydCBkZWZhdWx0IG1hdGNoOyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJ1aWxkTWF0Y2hQYXR0ZXJuRm4oYXJncykge1xuICByZXR1cm4gZnVuY3Rpb24gKHN0cmluZykge1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgICB2YXIgbWF0Y2hSZXN1bHQgPSBzdHJpbmcubWF0Y2goYXJncy5tYXRjaFBhdHRlcm4pO1xuICAgIGlmICghbWF0Y2hSZXN1bHQpIHJldHVybiBudWxsO1xuICAgIHZhciBtYXRjaGVkU3RyaW5nID0gbWF0Y2hSZXN1bHRbMF07XG4gICAgdmFyIHBhcnNlUmVzdWx0ID0gc3RyaW5nLm1hdGNoKGFyZ3MucGFyc2VQYXR0ZXJuKTtcbiAgICBpZiAoIXBhcnNlUmVzdWx0KSByZXR1cm4gbnVsbDtcbiAgICB2YXIgdmFsdWUgPSBhcmdzLnZhbHVlQ2FsbGJhY2sgPyBhcmdzLnZhbHVlQ2FsbGJhY2socGFyc2VSZXN1bHRbMF0pIDogcGFyc2VSZXN1bHRbMF07XG4gICAgdmFsdWUgPSBvcHRpb25zLnZhbHVlQ2FsbGJhY2sgPyBvcHRpb25zLnZhbHVlQ2FsbGJhY2sodmFsdWUpIDogdmFsdWU7XG4gICAgdmFyIHJlc3QgPSBzdHJpbmcuc2xpY2UobWF0Y2hlZFN0cmluZy5sZW5ndGgpO1xuICAgIHJldHVybiB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICByZXN0OiByZXN0XG4gICAgfTtcbiAgfTtcbn0iLCJpbXBvcnQgZm9ybWF0RGlzdGFuY2UgZnJvbSBcIi4vX2xpYi9mb3JtYXREaXN0YW5jZS9pbmRleC5qc1wiO1xuaW1wb3J0IGZvcm1hdExvbmcgZnJvbSBcIi4vX2xpYi9mb3JtYXRMb25nL2luZGV4LmpzXCI7XG5pbXBvcnQgZm9ybWF0UmVsYXRpdmUgZnJvbSBcIi4vX2xpYi9mb3JtYXRSZWxhdGl2ZS9pbmRleC5qc1wiO1xuaW1wb3J0IGxvY2FsaXplIGZyb20gXCIuL19saWIvbG9jYWxpemUvaW5kZXguanNcIjtcbmltcG9ydCBtYXRjaCBmcm9tIFwiLi9fbGliL21hdGNoL2luZGV4LmpzXCI7XG5cbi8qKlxuICogQHR5cGUge0xvY2FsZX1cbiAqIEBjYXRlZ29yeSBMb2NhbGVzXG4gKiBAc3VtbWFyeSBFbmdsaXNoIGxvY2FsZSAoVW5pdGVkIFN0YXRlcykuXG4gKiBAbGFuZ3VhZ2UgRW5nbGlzaFxuICogQGlzby02MzktMiBlbmdcbiAqIEBhdXRob3IgU2FzaGEgS29zcyBbQGtvc3Nub2NvcnBde0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9rb3Nzbm9jb3JwfVxuICogQGF1dGhvciBMZXNoYSBLb3NzIFtAbGVzaGFrb3NzXXtAbGluayBodHRwczovL2dpdGh1Yi5jb20vbGVzaGFrb3NzfVxuICovXG52YXIgbG9jYWxlID0ge1xuICBjb2RlOiAnZW4tVVMnLFxuICBmb3JtYXREaXN0YW5jZTogZm9ybWF0RGlzdGFuY2UsXG4gIGZvcm1hdExvbmc6IGZvcm1hdExvbmcsXG4gIGZvcm1hdFJlbGF0aXZlOiBmb3JtYXRSZWxhdGl2ZSxcbiAgbG9jYWxpemU6IGxvY2FsaXplLFxuICBtYXRjaDogbWF0Y2gsXG4gIG9wdGlvbnM6IHtcbiAgICB3ZWVrU3RhcnRzT246IDBcbiAgICAvKiBTdW5kYXkgKi9cbiAgICAsXG4gICAgZmlyc3RXZWVrQ29udGFpbnNEYXRlOiAxXG4gIH1cbn07XG5leHBvcnQgZGVmYXVsdCBsb2NhbGU7IiwiaW1wb3J0IGRlZmF1bHRMb2NhbGUgZnJvbSBcIi4uLy4uL2xvY2FsZS9lbi1VUy9pbmRleC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZGVmYXVsdExvY2FsZTsiLCJpbXBvcnQgaXNWYWxpZCBmcm9tIFwiLi4vaXNWYWxpZC9pbmRleC5qc1wiO1xuaW1wb3J0IHN1Yk1pbGxpc2Vjb25kcyBmcm9tIFwiLi4vc3ViTWlsbGlzZWNvbmRzL2luZGV4LmpzXCI7XG5pbXBvcnQgdG9EYXRlIGZyb20gXCIuLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCBmb3JtYXR0ZXJzIGZyb20gXCIuLi9fbGliL2Zvcm1hdC9mb3JtYXR0ZXJzL2luZGV4LmpzXCI7XG5pbXBvcnQgbG9uZ0Zvcm1hdHRlcnMgZnJvbSBcIi4uL19saWIvZm9ybWF0L2xvbmdGb3JtYXR0ZXJzL2luZGV4LmpzXCI7XG5pbXBvcnQgZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcyBmcm9tIFwiLi4vX2xpYi9nZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBpc1Byb3RlY3RlZERheU9mWWVhclRva2VuLCBpc1Byb3RlY3RlZFdlZWtZZWFyVG9rZW4sIHRocm93UHJvdGVjdGVkRXJyb3IgfSBmcm9tIFwiLi4vX2xpYi9wcm90ZWN0ZWRUb2tlbnMvaW5kZXguanNcIjtcbmltcG9ydCB0b0ludGVnZXIgZnJvbSBcIi4uL19saWIvdG9JbnRlZ2VyL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgZ2V0RGVmYXVsdE9wdGlvbnMgfSBmcm9tIFwiLi4vX2xpYi9kZWZhdWx0T3B0aW9ucy9pbmRleC5qc1wiO1xuaW1wb3J0IGRlZmF1bHRMb2NhbGUgZnJvbSBcIi4uL19saWIvZGVmYXVsdExvY2FsZS9pbmRleC5qc1wiOyAvLyBUaGlzIFJlZ0V4cCBjb25zaXN0cyBvZiB0aHJlZSBwYXJ0cyBzZXBhcmF0ZWQgYnkgYHxgOlxuLy8gLSBbeVlRcU1Md0lkRGVjaWhIS2ttc11vIG1hdGNoZXMgYW55IGF2YWlsYWJsZSBvcmRpbmFsIG51bWJlciB0b2tlblxuLy8gICAob25lIG9mIHRoZSBjZXJ0YWluIGxldHRlcnMgZm9sbG93ZWQgYnkgYG9gKVxuLy8gLSAoXFx3KVxcMSogbWF0Y2hlcyBhbnkgc2VxdWVuY2VzIG9mIHRoZSBzYW1lIGxldHRlclxuLy8gLSAnJyBtYXRjaGVzIHR3byBxdW90ZSBjaGFyYWN0ZXJzIGluIGEgcm93XG4vLyAtICcoJyd8W14nXSkrKCd8JCkgbWF0Y2hlcyBhbnl0aGluZyBzdXJyb3VuZGVkIGJ5IHR3byBxdW90ZSBjaGFyYWN0ZXJzICgnKSxcbi8vICAgZXhjZXB0IGEgc2luZ2xlIHF1b3RlIHN5bWJvbCwgd2hpY2ggZW5kcyB0aGUgc2VxdWVuY2UuXG4vLyAgIFR3byBxdW90ZSBjaGFyYWN0ZXJzIGRvIG5vdCBlbmQgdGhlIHNlcXVlbmNlLlxuLy8gICBJZiB0aGVyZSBpcyBubyBtYXRjaGluZyBzaW5nbGUgcXVvdGVcbi8vICAgdGhlbiB0aGUgc2VxdWVuY2Ugd2lsbCBjb250aW51ZSB1bnRpbCB0aGUgZW5kIG9mIHRoZSBzdHJpbmcuXG4vLyAtIC4gbWF0Y2hlcyBhbnkgc2luZ2xlIGNoYXJhY3RlciB1bm1hdGNoZWQgYnkgcHJldmlvdXMgcGFydHMgb2YgdGhlIFJlZ0V4cHNcblxudmFyIGZvcm1hdHRpbmdUb2tlbnNSZWdFeHAgPSAvW3lZUXFNTHdJZERlY2loSEtrbXNdb3woXFx3KVxcMSp8Jyd8JygnJ3xbXiddKSsoJ3wkKXwuL2c7IC8vIFRoaXMgUmVnRXhwIGNhdGNoZXMgc3ltYm9scyBlc2NhcGVkIGJ5IHF1b3RlcywgYW5kIGFsc29cbi8vIHNlcXVlbmNlcyBvZiBzeW1ib2xzIFAsIHAsIGFuZCB0aGUgY29tYmluYXRpb25zIGxpa2UgYFBQUFBQUFBwcHBwcGBcblxudmFyIGxvbmdGb3JtYXR0aW5nVG9rZW5zUmVnRXhwID0gL1ArcCt8UCt8cCt8Jyd8JygnJ3xbXiddKSsoJ3wkKXwuL2c7XG52YXIgZXNjYXBlZFN0cmluZ1JlZ0V4cCA9IC9eJyhbXl0qPyknPyQvO1xudmFyIGRvdWJsZVF1b3RlUmVnRXhwID0gLycnL2c7XG52YXIgdW5lc2NhcGVkTGF0aW5DaGFyYWN0ZXJSZWdFeHAgPSAvW2EtekEtWl0vO1xuLyoqXG4gKiBAbmFtZSBmb3JtYXRcbiAqIEBjYXRlZ29yeSBDb21tb24gSGVscGVyc1xuICogQHN1bW1hcnkgRm9ybWF0IHRoZSBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJuIHRoZSBmb3JtYXR0ZWQgZGF0ZSBzdHJpbmcgaW4gdGhlIGdpdmVuIGZvcm1hdC4gVGhlIHJlc3VsdCBtYXkgdmFyeSBieSBsb2NhbGUuXG4gKlxuICogPiDimqDvuI8gUGxlYXNlIG5vdGUgdGhhdCB0aGUgYGZvcm1hdGAgdG9rZW5zIGRpZmZlciBmcm9tIE1vbWVudC5qcyBhbmQgb3RoZXIgbGlicmFyaWVzLlxuICogPiBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcbiAqXG4gKiBUaGUgY2hhcmFjdGVycyB3cmFwcGVkIGJldHdlZW4gdHdvIHNpbmdsZSBxdW90ZXMgY2hhcmFjdGVycyAoJykgYXJlIGVzY2FwZWQuXG4gKiBUd28gc2luZ2xlIHF1b3RlcyBpbiBhIHJvdywgd2hldGhlciBpbnNpZGUgb3Igb3V0c2lkZSBhIHF1b3RlZCBzZXF1ZW5jZSwgcmVwcmVzZW50IGEgJ3JlYWwnIHNpbmdsZSBxdW90ZS5cbiAqIChzZWUgdGhlIGxhc3QgZXhhbXBsZSlcbiAqXG4gKiBGb3JtYXQgb2YgdGhlIHN0cmluZyBpcyBiYXNlZCBvbiBVbmljb2RlIFRlY2huaWNhbCBTdGFuZGFyZCAjMzU6XG4gKiBodHRwczovL3d3dy51bmljb2RlLm9yZy9yZXBvcnRzL3RyMzUvdHIzNS1kYXRlcy5odG1sI0RhdGVfRmllbGRfU3ltYm9sX1RhYmxlXG4gKiB3aXRoIGEgZmV3IGFkZGl0aW9ucyAoc2VlIG5vdGUgNyBiZWxvdyB0aGUgdGFibGUpLlxuICpcbiAqIEFjY2VwdGVkIHBhdHRlcm5zOlxuICogfCBVbml0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUGF0dGVybiB8IFJlc3VsdCBleGFtcGxlcyAgICAgICAgICAgICAgICAgICB8IE5vdGVzIHxcbiAqIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS18XG4gKiB8IEVyYSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBHLi5HR0cgIHwgQUQsIEJDICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgR0dHRyAgICB8IEFubm8gRG9taW5pLCBCZWZvcmUgQ2hyaXN0ICAgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEdHR0dHICAgfCBBLCBCICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IENhbGVuZGFyIHllYXIgICAgICAgICAgICAgICAgICAgfCB5ICAgICAgIHwgNDQsIDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeW8gICAgICB8IDQ0dGgsIDFzdCwgMHRoLCAxN3RoICAgICAgICAgICAgICB8IDUsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHl5ICAgICAgfCA0NCwgMDEsIDAwLCAxNyAgICAgICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB5eXkgICAgIHwgMDQ0LCAwMDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeXl5eSAgICB8IDAwNDQsIDAwMDEsIDE5MDAsIDIwMTcgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHl5eXl5ICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzLDUgICB8XG4gKiB8IExvY2FsIHdlZWstbnVtYmVyaW5nIHllYXIgICAgICAgfCBZICAgICAgIHwgNDQsIDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWW8gICAgICB8IDQ0dGgsIDFzdCwgMTkwMHRoLCAyMDE3dGggICAgICAgICB8IDUsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFlZICAgICAgfCA0NCwgMDEsIDAwLCAxNyAgICAgICAgICAgICAgICAgICAgfCA1LDggICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBZWVkgICAgIHwgMDQ0LCAwMDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWVlZWSAgICB8IDAwNDQsIDAwMDEsIDE5MDAsIDIwMTcgICAgICAgICAgICB8IDUsOCAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFlZWVlZICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzLDUgICB8XG4gKiB8IElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyICAgICAgICAgfCBSICAgICAgIHwgLTQzLCAwLCAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgIHwgNSw3ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUlIgICAgICB8IC00MywgMDAsIDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICB8IDUsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFJSUiAgICAgfCAtMDQzLCAwMDAsIDAwMSwgMTkwMCwgMjAxNyAgICAgICAgfCA1LDcgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBSUlJSICAgIHwgLTAwNDMsIDAwMDAsIDAwMDEsIDE5MDAsIDIwMTcgICAgIHwgNSw3ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUlJSUlIgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMsNSw3IHxcbiAqIHwgRXh0ZW5kZWQgeWVhciAgICAgICAgICAgICAgICAgICB8IHUgICAgICAgfCAtNDMsIDAsIDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB1dSAgICAgIHwgLTQzLCAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgdXV1ICAgICB8IC0wNDMsIDAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHV1dXUgICAgfCAtMDA0MywgMDAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB1dXV1dSAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyw1ICAgfFxuICogfCBRdWFydGVyIChmb3JtYXR0aW5nKSAgICAgICAgICAgIHwgUSAgICAgICB8IDEsIDIsIDMsIDQgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFFvICAgICAgfCAxc3QsIDJuZCwgM3JkLCA0dGggICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBRUSAgICAgIHwgMDEsIDAyLCAwMywgMDQgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUVFRICAgICB8IFExLCBRMiwgUTMsIFE0ICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFFRUVEgICAgfCAxc3QgcXVhcnRlciwgMm5kIHF1YXJ0ZXIsIC4uLiAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBRUVFRUSAgIHwgMSwgMiwgMywgNCAgICAgICAgICAgICAgICAgICAgICAgIHwgNCAgICAgfFxuICogfCBRdWFydGVyIChzdGFuZC1hbG9uZSkgICAgICAgICAgIHwgcSAgICAgICB8IDEsIDIsIDMsIDQgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHFvICAgICAgfCAxc3QsIDJuZCwgM3JkLCA0dGggICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBxcSAgICAgIHwgMDEsIDAyLCAwMywgMDQgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcXFxICAgICB8IFExLCBRMiwgUTMsIFE0ICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHFxcXEgICAgfCAxc3QgcXVhcnRlciwgMm5kIHF1YXJ0ZXIsIC4uLiAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBxcXFxcSAgIHwgMSwgMiwgMywgNCAgICAgICAgICAgICAgICAgICAgICAgIHwgNCAgICAgfFxuICogfCBNb250aCAoZm9ybWF0dGluZykgICAgICAgICAgICAgIHwgTSAgICAgICB8IDEsIDIsIC4uLiwgMTIgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE1vICAgICAgfCAxc3QsIDJuZCwgLi4uLCAxMnRoICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBNTSAgICAgIHwgMDEsIDAyLCAuLi4sIDEyICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTU1NICAgICB8IEphbiwgRmViLCAuLi4sIERlYyAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE1NTU0gICAgfCBKYW51YXJ5LCBGZWJydWFyeSwgLi4uLCBEZWNlbWJlciAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBNTU1NTSAgIHwgSiwgRiwgLi4uLCBEICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBNb250aCAoc3RhbmQtYWxvbmUpICAgICAgICAgICAgIHwgTCAgICAgICB8IDEsIDIsIC4uLiwgMTIgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IExvICAgICAgfCAxc3QsIDJuZCwgLi4uLCAxMnRoICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBMTCAgICAgIHwgMDEsIDAyLCAuLi4sIDEyICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTExMICAgICB8IEphbiwgRmViLCAuLi4sIERlYyAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IExMTEwgICAgfCBKYW51YXJ5LCBGZWJydWFyeSwgLi4uLCBEZWNlbWJlciAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBMTExMTCAgIHwgSiwgRiwgLi4uLCBEICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBMb2NhbCB3ZWVrIG9mIHllYXIgICAgICAgICAgICAgIHwgdyAgICAgICB8IDEsIDIsIC4uLiwgNTMgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHdvICAgICAgfCAxc3QsIDJuZCwgLi4uLCA1M3RoICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB3dyAgICAgIHwgMDEsIDAyLCAuLi4sIDUzICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBJU08gd2VlayBvZiB5ZWFyICAgICAgICAgICAgICAgIHwgSSAgICAgICB8IDEsIDIsIC4uLiwgNTMgICAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IElvICAgICAgfCAxc3QsIDJuZCwgLi4uLCA1M3RoICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBJSSAgICAgIHwgMDEsIDAyLCAuLi4sIDUzICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCBEYXkgb2YgbW9udGggICAgICAgICAgICAgICAgICAgIHwgZCAgICAgICB8IDEsIDIsIC4uLiwgMzEgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGRvICAgICAgfCAxc3QsIDJuZCwgLi4uLCAzMXN0ICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBkZCAgICAgIHwgMDEsIDAyLCAuLi4sIDMxICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBEYXkgb2YgeWVhciAgICAgICAgICAgICAgICAgICAgIHwgRCAgICAgICB8IDEsIDIsIC4uLiwgMzY1LCAzNjYgICAgICAgICAgICAgICB8IDkgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IERvICAgICAgfCAxc3QsIDJuZCwgLi4uLCAzNjV0aCwgMzY2dGggICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBERCAgICAgIHwgMDEsIDAyLCAuLi4sIDM2NSwgMzY2ICAgICAgICAgICAgIHwgOSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgREREICAgICB8IDAwMSwgMDAyLCAuLi4sIDM2NSwgMzY2ICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEREREQgICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzICAgICB8XG4gKiB8IERheSBvZiB3ZWVrIChmb3JtYXR0aW5nKSAgICAgICAgfCBFLi5FRUUgIHwgTW9uLCBUdWUsIFdlZCwgLi4uLCBTdW4gICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgRUVFRSAgICB8IE1vbmRheSwgVHVlc2RheSwgLi4uLCBTdW5kYXkgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEVFRUVFICAgfCBNLCBULCBXLCBULCBGLCBTLCBTICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBFRUVFRUUgIHwgTW8sIFR1LCBXZSwgVGgsIEZyLCBTYSwgU3UgICAgICAgIHwgICAgICAgfFxuICogfCBJU08gZGF5IG9mIHdlZWsgKGZvcm1hdHRpbmcpICAgIHwgaSAgICAgICB8IDEsIDIsIDMsIC4uLiwgNyAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGlvICAgICAgfCAxc3QsIDJuZCwgLi4uLCA3dGggICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBpaSAgICAgIHwgMDEsIDAyLCAuLi4sIDA3ICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaWlpICAgICB8IE1vbiwgVHVlLCBXZWQsIC4uLiwgU3VuICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGlpaWkgICAgfCBNb25kYXksIFR1ZXNkYXksIC4uLiwgU3VuZGF5ICAgICAgfCAyLDcgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBpaWlpaSAgIHwgTSwgVCwgVywgVCwgRiwgUywgUyAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaWlpaWlpICB8IE1vLCBUdSwgV2UsIFRoLCBGciwgU2EsIFN1ICAgICAgICB8IDcgICAgIHxcbiAqIHwgTG9jYWwgZGF5IG9mIHdlZWsgKGZvcm1hdHRpbmcpICB8IGUgICAgICAgfCAyLCAzLCA0LCAuLi4sIDEgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBlbyAgICAgIHwgMm5kLCAzcmQsIC4uLiwgMXN0ICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZWUgICAgICB8IDAyLCAwMywgLi4uLCAwMSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGVlZSAgICAgfCBNb24sIFR1ZSwgV2VkLCAuLi4sIFN1biAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBlZWVlICAgIHwgTW9uZGF5LCBUdWVzZGF5LCAuLi4sIFN1bmRheSAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZWVlZWUgICB8IE0sIFQsIFcsIFQsIEYsIFMsIFMgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGVlZWVlZSAgfCBNbywgVHUsIFdlLCBUaCwgRnIsIFNhLCBTdSAgICAgICAgfCAgICAgICB8XG4gKiB8IExvY2FsIGRheSBvZiB3ZWVrIChzdGFuZC1hbG9uZSkgfCBjICAgICAgIHwgMiwgMywgNCwgLi4uLCAxICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY28gICAgICB8IDJuZCwgM3JkLCAuLi4sIDFzdCAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNjICAgICAgfCAwMiwgMDMsIC4uLiwgMDEgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjY2MgICAgIHwgTW9uLCBUdWUsIFdlZCwgLi4uLCBTdW4gICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY2NjYyAgICB8IE1vbmRheSwgVHVlc2RheSwgLi4uLCBTdW5kYXkgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNjY2NjICAgfCBNLCBULCBXLCBULCBGLCBTLCBTICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjY2NjY2MgIHwgTW8sIFR1LCBXZSwgVGgsIEZyLCBTYSwgU3UgICAgICAgIHwgICAgICAgfFxuICogfCBBTSwgUE0gICAgICAgICAgICAgICAgICAgICAgICAgIHwgYS4uYWEgICB8IEFNLCBQTSAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGFhYSAgICAgfCBhbSwgcG0gICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBhYWFhICAgIHwgYS5tLiwgcC5tLiAgICAgICAgICAgICAgICAgICAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYWFhYWEgICB8IGEsIHAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgQU0sIFBNLCBub29uLCBtaWRuaWdodCAgICAgICAgICB8IGIuLmJiICAgfCBBTSwgUE0sIG5vb24sIG1pZG5pZ2h0ICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBiYmIgICAgIHwgYW0sIHBtLCBub29uLCBtaWRuaWdodCAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYmJiYiAgICB8IGEubS4sIHAubS4sIG5vb24sIG1pZG5pZ2h0ICAgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGJiYmJiICAgfCBhLCBwLCBuLCBtaSAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEZsZXhpYmxlIGRheSBwZXJpb2QgICAgICAgICAgICAgfCBCLi5CQkIgIHwgYXQgbmlnaHQsIGluIHRoZSBtb3JuaW5nLCAuLi4gICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgQkJCQiAgICB8IGF0IG5pZ2h0LCBpbiB0aGUgbW9ybmluZywgLi4uICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEJCQkJCICAgfCBhdCBuaWdodCwgaW4gdGhlIG1vcm5pbmcsIC4uLiAgICAgfCAgICAgICB8XG4gKiB8IEhvdXIgWzEtMTJdICAgICAgICAgICAgICAgICAgICAgfCBoICAgICAgIHwgMSwgMiwgLi4uLCAxMSwgMTIgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaG8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDExdGgsIDEydGggICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGhoICAgICAgfCAwMSwgMDIsIC4uLiwgMTEsIDEyICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEhvdXIgWzAtMjNdICAgICAgICAgICAgICAgICAgICAgfCBIICAgICAgIHwgMCwgMSwgMiwgLi4uLCAyMyAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgSG8gICAgICB8IDB0aCwgMXN0LCAybmQsIC4uLiwgMjNyZCAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEhIICAgICAgfCAwMCwgMDEsIDAyLCAuLi4sIDIzICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEhvdXIgWzAtMTFdICAgICAgICAgICAgICAgICAgICAgfCBLICAgICAgIHwgMSwgMiwgLi4uLCAxMSwgMCAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgS28gICAgICB8IDFzdCwgMm5kLCAuLi4sIDExdGgsIDB0aCAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEtLICAgICAgfCAwMSwgMDIsIC4uLiwgMTEsIDAwICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEhvdXIgWzEtMjRdICAgICAgICAgICAgICAgICAgICAgfCBrICAgICAgIHwgMjQsIDEsIDIsIC4uLiwgMjMgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwga28gICAgICB8IDI0dGgsIDFzdCwgMm5kLCAuLi4sIDIzcmQgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGtrICAgICAgfCAyNCwgMDEsIDAyLCAuLi4sIDIzICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IE1pbnV0ZSAgICAgICAgICAgICAgICAgICAgICAgICAgfCBtICAgICAgIHwgMCwgMSwgLi4uLCA1OSAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgbW8gICAgICB8IDB0aCwgMXN0LCAuLi4sIDU5dGggICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IG1tICAgICAgfCAwMCwgMDEsIC4uLiwgNTkgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IFNlY29uZCAgICAgICAgICAgICAgICAgICAgICAgICAgfCBzICAgICAgIHwgMCwgMSwgLi4uLCA1OSAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgc28gICAgICB8IDB0aCwgMXN0LCAuLi4sIDU5dGggICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHNzICAgICAgfCAwMCwgMDEsIC4uLiwgNTkgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEZyYWN0aW9uIG9mIHNlY29uZCAgICAgICAgICAgICAgfCBTICAgICAgIHwgMCwgMSwgLi4uLCA5ICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgU1MgICAgICB8IDAwLCAwMSwgLi4uLCA5OSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFNTUyAgICAgfCAwMDAsIDAwMSwgLi4uLCA5OTkgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBTU1NTICAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyAgICAgfFxuICogfCBUaW1lem9uZSAoSVNPLTg2MDEgdy8gWikgICAgICAgIHwgWCAgICAgICB8IC0wOCwgKzA1MzAsIFogICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFhYICAgICAgfCAtMDgwMCwgKzA1MzAsIFogICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBYWFggICAgIHwgLTA4OjAwLCArMDU6MzAsIFogICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWFhYWCAgICB8IC0wODAwLCArMDUzMCwgWiwgKzEyMzQ1NiAgICAgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFhYWFhYICAgfCAtMDg6MDAsICswNTozMCwgWiwgKzEyOjM0OjU2ICAgICAgfCAgICAgICB8XG4gKiB8IFRpbWV6b25lIChJU08tODYwMSB3L28gWikgICAgICAgfCB4ICAgICAgIHwgLTA4LCArMDUzMCwgKzAwICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeHggICAgICB8IC0wODAwLCArMDUzMCwgKzAwMDAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHh4eCAgICAgfCAtMDg6MDAsICswNTozMCwgKzAwOjAwICAgICAgICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB4eHh4ICAgIHwgLTA4MDAsICswNTMwLCArMDAwMCwgKzEyMzQ1NiAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeHh4eHggICB8IC0wODowMCwgKzA1OjMwLCArMDA6MDAsICsxMjozNDo1NiB8ICAgICAgIHxcbiAqIHwgVGltZXpvbmUgKEdNVCkgICAgICAgICAgICAgICAgICB8IE8uLi5PT08gfCBHTVQtOCwgR01UKzU6MzAsIEdNVCswICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBPT09PICAgIHwgR01ULTA4OjAwLCBHTVQrMDU6MzAsIEdNVCswMDowMCAgIHwgMiAgICAgfFxuICogfCBUaW1lem9uZSAoc3BlY2lmaWMgbm9uLWxvY2F0LikgIHwgei4uLnp6eiB8IEdNVC04LCBHTVQrNTozMCwgR01UKzAgICAgICAgICAgICB8IDYgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHp6enogICAgfCBHTVQtMDg6MDAsIEdNVCswNTozMCwgR01UKzAwOjAwICAgfCAyLDYgICB8XG4gKiB8IFNlY29uZHMgdGltZXN0YW1wICAgICAgICAgICAgICAgfCB0ICAgICAgIHwgNTEyOTY5NTIwICAgICAgICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgdHQgICAgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMsNyAgIHxcbiAqIHwgTWlsbGlzZWNvbmRzIHRpbWVzdGFtcCAgICAgICAgICB8IFQgICAgICAgfCA1MTI5Njk1MjA5MDAgICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBUVCAgICAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyw3ICAgfFxuICogfCBMb25nIGxvY2FsaXplZCBkYXRlICAgICAgICAgICAgIHwgUCAgICAgICB8IDA0LzI5LzE0NTMgICAgICAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFBQICAgICAgfCBBcHIgMjksIDE0NTMgICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBQUFAgICAgIHwgQXByaWwgMjl0aCwgMTQ1MyAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUFBQUCAgICB8IEZyaWRheSwgQXByaWwgMjl0aCwgMTQ1MyAgICAgICAgICB8IDIsNyAgIHxcbiAqIHwgTG9uZyBsb2NhbGl6ZWQgdGltZSAgICAgICAgICAgICB8IHAgICAgICAgfCAxMjowMCBBTSAgICAgICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBwcCAgICAgIHwgMTI6MDA6MDAgQU0gICAgICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcHBwICAgICB8IDEyOjAwOjAwIEFNIEdNVCsyICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHBwcHAgICAgfCAxMjowMDowMCBBTSBHTVQrMDI6MDAgICAgICAgICAgICAgfCAyLDcgICB8XG4gKiB8IENvbWJpbmF0aW9uIG9mIGRhdGUgYW5kIHRpbWUgICAgfCBQcCAgICAgIHwgMDQvMjkvMTQ1MywgMTI6MDAgQU0gICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUFBwcCAgICB8IEFwciAyOSwgMTQ1MywgMTI6MDA6MDAgQU0gICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFBQUHBwcCAgfCBBcHJpbCAyOXRoLCAxNDUzIGF0IC4uLiAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBQUFBQcHBwcHwgRnJpZGF5LCBBcHJpbCAyOXRoLCAxNDUzIGF0IC4uLiAgIHwgMiw3ICAgfFxuICogTm90ZXM6XG4gKiAxLiBcIkZvcm1hdHRpbmdcIiB1bml0cyAoZS5nLiBmb3JtYXR0aW5nIHF1YXJ0ZXIpIGluIHRoZSBkZWZhdWx0IGVuLVVTIGxvY2FsZVxuICogICAgYXJlIHRoZSBzYW1lIGFzIFwic3RhbmQtYWxvbmVcIiB1bml0cywgYnV0IGFyZSBkaWZmZXJlbnQgaW4gc29tZSBsYW5ndWFnZXMuXG4gKiAgICBcIkZvcm1hdHRpbmdcIiB1bml0cyBhcmUgZGVjbGluZWQgYWNjb3JkaW5nIHRvIHRoZSBydWxlcyBvZiB0aGUgbGFuZ3VhZ2VcbiAqICAgIGluIHRoZSBjb250ZXh0IG9mIGEgZGF0ZS4gXCJTdGFuZC1hbG9uZVwiIHVuaXRzIGFyZSBhbHdheXMgbm9taW5hdGl2ZSBzaW5ndWxhcjpcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ2RvIExMTEwnLCB7bG9jYWxlOiBjc30pIC8vPT4gJzYuIGxpc3RvcGFkJ2BcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ2RvIE1NTU0nLCB7bG9jYWxlOiBjc30pIC8vPT4gJzYuIGxpc3RvcGFkdSdgXG4gKlxuICogMi4gQW55IHNlcXVlbmNlIG9mIHRoZSBpZGVudGljYWwgbGV0dGVycyBpcyBhIHBhdHRlcm4sIHVubGVzcyBpdCBpcyBlc2NhcGVkIGJ5XG4gKiAgICB0aGUgc2luZ2xlIHF1b3RlIGNoYXJhY3RlcnMgKHNlZSBiZWxvdykuXG4gKiAgICBJZiB0aGUgc2VxdWVuY2UgaXMgbG9uZ2VyIHRoYW4gbGlzdGVkIGluIHRhYmxlIChlLmcuIGBFRUVFRUVFRUVFRWApXG4gKiAgICB0aGUgb3V0cHV0IHdpbGwgYmUgdGhlIHNhbWUgYXMgZGVmYXVsdCBwYXR0ZXJuIGZvciB0aGlzIHVuaXQsIHVzdWFsbHlcbiAqICAgIHRoZSBsb25nZXN0IG9uZSAoaW4gY2FzZSBvZiBJU08gd2Vla2RheXMsIGBFRUVFYCkuIERlZmF1bHQgcGF0dGVybnMgZm9yIHVuaXRzXG4gKiAgICBhcmUgbWFya2VkIHdpdGggXCIyXCIgaW4gdGhlIGxhc3QgY29sdW1uIG9mIHRoZSB0YWJsZS5cbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ01NTScpIC8vPT4gJ05vdidgXG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICdNTU1NJykgLy89PiAnTm92ZW1iZXInYFxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnTU1NTU0nKSAvLz0+ICdOJ2BcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ01NTU1NTScpIC8vPT4gJ05vdmVtYmVyJ2BcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ01NTU1NTU0nKSAvLz0+ICdOb3ZlbWJlcidgXG4gKlxuICogMy4gU29tZSBwYXR0ZXJucyBjb3VsZCBiZSB1bmxpbWl0ZWQgbGVuZ3RoIChzdWNoIGFzIGB5eXl5eXl5eWApLlxuICogICAgVGhlIG91dHB1dCB3aWxsIGJlIHBhZGRlZCB3aXRoIHplcm9zIHRvIG1hdGNoIHRoZSBsZW5ndGggb2YgdGhlIHBhdHRlcm4uXG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICd5eXl5eXl5eScpIC8vPT4gJzAwMDAyMDE3J2BcbiAqXG4gKiA0LiBgUVFRUVFgIGFuZCBgcXFxcXFgIGNvdWxkIGJlIG5vdCBzdHJpY3RseSBudW1lcmljYWwgaW4gc29tZSBsb2NhbGVzLlxuICogICAgVGhlc2UgdG9rZW5zIHJlcHJlc2VudCB0aGUgc2hvcnRlc3QgZm9ybSBvZiB0aGUgcXVhcnRlci5cbiAqXG4gKiA1LiBUaGUgbWFpbiBkaWZmZXJlbmNlIGJldHdlZW4gYHlgIGFuZCBgdWAgcGF0dGVybnMgYXJlIEIuQy4geWVhcnM6XG4gKlxuICogICAgfCBZZWFyIHwgYHlgIHwgYHVgIHxcbiAqICAgIHwtLS0tLS18LS0tLS18LS0tLS18XG4gKiAgICB8IEFDIDEgfCAgIDEgfCAgIDEgfFxuICogICAgfCBCQyAxIHwgICAxIHwgICAwIHxcbiAqICAgIHwgQkMgMiB8ICAgMiB8ICAtMSB8XG4gKlxuICogICAgQWxzbyBgeXlgIGFsd2F5cyByZXR1cm5zIHRoZSBsYXN0IHR3byBkaWdpdHMgb2YgYSB5ZWFyLFxuICogICAgd2hpbGUgYHV1YCBwYWRzIHNpbmdsZSBkaWdpdCB5ZWFycyB0byAyIGNoYXJhY3RlcnMgYW5kIHJldHVybnMgb3RoZXIgeWVhcnMgdW5jaGFuZ2VkOlxuICpcbiAqICAgIHwgWWVhciB8IGB5eWAgfCBgdXVgIHxcbiAqICAgIHwtLS0tLS18LS0tLS0tfC0tLS0tLXxcbiAqICAgIHwgMSAgICB8ICAgMDEgfCAgIDAxIHxcbiAqICAgIHwgMTQgICB8ICAgMTQgfCAgIDE0IHxcbiAqICAgIHwgMzc2ICB8ICAgNzYgfCAgMzc2IHxcbiAqICAgIHwgMTQ1MyB8ICAgNTMgfCAxNDUzIHxcbiAqXG4gKiAgICBUaGUgc2FtZSBkaWZmZXJlbmNlIGlzIHRydWUgZm9yIGxvY2FsIGFuZCBJU08gd2Vlay1udW1iZXJpbmcgeWVhcnMgKGBZYCBhbmQgYFJgKSxcbiAqICAgIGV4Y2VwdCBsb2NhbCB3ZWVrLW51bWJlcmluZyB5ZWFycyBhcmUgZGVwZW5kZW50IG9uIGBvcHRpb25zLndlZWtTdGFydHNPbmBcbiAqICAgIGFuZCBgb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGVgIChjb21wYXJlIFtnZXRJU09XZWVrWWVhcl17QGxpbmsgaHR0cHM6Ly9kYXRlLWZucy5vcmcvZG9jcy9nZXRJU09XZWVrWWVhcn1cbiAqICAgIGFuZCBbZ2V0V2Vla1llYXJde0BsaW5rIGh0dHBzOi8vZGF0ZS1mbnMub3JnL2RvY3MvZ2V0V2Vla1llYXJ9KS5cbiAqXG4gKiA2LiBTcGVjaWZpYyBub24tbG9jYXRpb24gdGltZXpvbmVzIGFyZSBjdXJyZW50bHkgdW5hdmFpbGFibGUgaW4gYGRhdGUtZm5zYCxcbiAqICAgIHNvIHJpZ2h0IG5vdyB0aGVzZSB0b2tlbnMgZmFsbCBiYWNrIHRvIEdNVCB0aW1lem9uZXMuXG4gKlxuICogNy4gVGhlc2UgcGF0dGVybnMgYXJlIG5vdCBpbiB0aGUgVW5pY29kZSBUZWNobmljYWwgU3RhbmRhcmQgIzM1OlxuICogICAgLSBgaWA6IElTTyBkYXkgb2Ygd2Vla1xuICogICAgLSBgSWA6IElTTyB3ZWVrIG9mIHllYXJcbiAqICAgIC0gYFJgOiBJU08gd2Vlay1udW1iZXJpbmcgeWVhclxuICogICAgLSBgdGA6IHNlY29uZHMgdGltZXN0YW1wXG4gKiAgICAtIGBUYDogbWlsbGlzZWNvbmRzIHRpbWVzdGFtcFxuICogICAgLSBgb2A6IG9yZGluYWwgbnVtYmVyIG1vZGlmaWVyXG4gKiAgICAtIGBQYDogbG9uZyBsb2NhbGl6ZWQgZGF0ZVxuICogICAgLSBgcGA6IGxvbmcgbG9jYWxpemVkIHRpbWVcbiAqXG4gKiA4LiBgWVlgIGFuZCBgWVlZWWAgdG9rZW5zIHJlcHJlc2VudCB3ZWVrLW51bWJlcmluZyB5ZWFycyBidXQgdGhleSBhcmUgb2Z0ZW4gY29uZnVzZWQgd2l0aCB5ZWFycy5cbiAqICAgIFlvdSBzaG91bGQgZW5hYmxlIGBvcHRpb25zLnVzZUFkZGl0aW9uYWxXZWVrWWVhclRva2Vuc2AgdG8gdXNlIHRoZW0uIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdW5pY29kZVRva2Vucy5tZFxuICpcbiAqIDkuIGBEYCBhbmQgYEREYCB0b2tlbnMgcmVwcmVzZW50IGRheXMgb2YgdGhlIHllYXIgYnV0IHRoZXkgYXJlIG9mdGVuIGNvbmZ1c2VkIHdpdGggZGF5cyBvZiB0aGUgbW9udGguXG4gKiAgICBZb3Ugc2hvdWxkIGVuYWJsZSBgb3B0aW9ucy51c2VBZGRpdGlvbmFsRGF5T2ZZZWFyVG9rZW5zYCB0byB1c2UgdGhlbS4gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBvcmlnaW5hbCBkYXRlXG4gKiBAcGFyYW0ge1N0cmluZ30gZm9ybWF0IC0gdGhlIHN0cmluZyBvZiB0b2tlbnNcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gLSBhbiBvYmplY3Qgd2l0aCBvcHRpb25zLlxuICogQHBhcmFtIHtMb2NhbGV9IFtvcHRpb25zLmxvY2FsZT1kZWZhdWx0TG9jYWxlXSAtIHRoZSBsb2NhbGUgb2JqZWN0LiBTZWUgW0xvY2FsZV17QGxpbmsgaHR0cHM6Ly9kYXRlLWZucy5vcmcvZG9jcy9Mb2NhbGV9XG4gKiBAcGFyYW0gezB8MXwyfDN8NHw1fDZ9IFtvcHRpb25zLndlZWtTdGFydHNPbj0wXSAtIHRoZSBpbmRleCBvZiB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrICgwIC0gU3VuZGF5KVxuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZT0xXSAtIHRoZSBkYXkgb2YgSmFudWFyeSwgd2hpY2ggaXNcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMudXNlQWRkaXRpb25hbFdlZWtZZWFyVG9rZW5zPWZhbHNlXSAtIGlmIHRydWUsIGFsbG93cyB1c2FnZSBvZiB0aGUgd2Vlay1udW1iZXJpbmcgeWVhciB0b2tlbnMgYFlZYCBhbmQgYFlZWVlgO1xuICogICBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMudXNlQWRkaXRpb25hbERheU9mWWVhclRva2Vucz1mYWxzZV0gLSBpZiB0cnVlLCBhbGxvd3MgdXNhZ2Ugb2YgdGhlIGRheSBvZiB5ZWFyIHRva2VucyBgRGAgYW5kIGBERGA7XG4gKiAgIHNlZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdW5pY29kZVRva2Vucy5tZFxuICogQHJldHVybnMge1N0cmluZ30gdGhlIGZvcm1hdHRlZCBkYXRlIHN0cmluZ1xuICogQHRocm93cyB7VHlwZUVycm9yfSAyIGFyZ3VtZW50cyByZXF1aXJlZFxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gYGRhdGVgIG11c3Qgbm90IGJlIEludmFsaWQgRGF0ZVxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gYG9wdGlvbnMubG9jYWxlYCBtdXN0IGNvbnRhaW4gYGxvY2FsaXplYCBwcm9wZXJ0eVxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gYG9wdGlvbnMubG9jYWxlYCBtdXN0IGNvbnRhaW4gYGZvcm1hdExvbmdgIHByb3BlcnR5XG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBgb3B0aW9ucy53ZWVrU3RhcnRzT25gIG11c3QgYmUgYmV0d2VlbiAwIGFuZCA2XG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBgb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGVgIG11c3QgYmUgYmV0d2VlbiAxIGFuZCA3XG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSB1c2UgYHl5eXlgIGluc3RlYWQgb2YgYFlZWVlgIGZvciBmb3JtYXR0aW5nIHllYXJzIHVzaW5nIFtmb3JtYXQgcHJvdmlkZWRdIHRvIHRoZSBpbnB1dCBbaW5wdXQgcHJvdmlkZWRdOyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IHVzZSBgeXlgIGluc3RlYWQgb2YgYFlZYCBmb3IgZm9ybWF0dGluZyB5ZWFycyB1c2luZyBbZm9ybWF0IHByb3ZpZGVkXSB0byB0aGUgaW5wdXQgW2lucHV0IHByb3ZpZGVkXTsgc2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSB1c2UgYGRgIGluc3RlYWQgb2YgYERgIGZvciBmb3JtYXR0aW5nIGRheXMgb2YgdGhlIG1vbnRoIHVzaW5nIFtmb3JtYXQgcHJvdmlkZWRdIHRvIHRoZSBpbnB1dCBbaW5wdXQgcHJvdmlkZWRdOyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IHVzZSBgZGRgIGluc3RlYWQgb2YgYEREYCBmb3IgZm9ybWF0dGluZyBkYXlzIG9mIHRoZSBtb250aCB1c2luZyBbZm9ybWF0IHByb3ZpZGVkXSB0byB0aGUgaW5wdXQgW2lucHV0IHByb3ZpZGVkXTsgc2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBmb3JtYXQgc3RyaW5nIGNvbnRhaW5zIGFuIHVuZXNjYXBlZCBsYXRpbiBhbHBoYWJldCBjaGFyYWN0ZXJcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gUmVwcmVzZW50IDExIEZlYnJ1YXJ5IDIwMTQgaW4gbWlkZGxlLWVuZGlhbiBmb3JtYXQ6XG4gKiBjb25zdCByZXN1bHQgPSBmb3JtYXQobmV3IERhdGUoMjAxNCwgMSwgMTEpLCAnTU0vZGQveXl5eScpXG4gKiAvLz0+ICcwMi8xMS8yMDE0J1xuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBSZXByZXNlbnQgMiBKdWx5IDIwMTQgaW4gRXNwZXJhbnRvOlxuICogaW1wb3J0IHsgZW9Mb2NhbGUgfSBmcm9tICdkYXRlLWZucy9sb2NhbGUvZW8nXG4gKiBjb25zdCByZXN1bHQgPSBmb3JtYXQobmV3IERhdGUoMjAxNCwgNiwgMiksIFwiZG8gJ2RlJyBNTU1NIHl5eXlcIiwge1xuICogICBsb2NhbGU6IGVvTG9jYWxlXG4gKiB9KVxuICogLy89PiAnMi1hIGRlIGp1bGlvIDIwMTQnXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEVzY2FwZSBzdHJpbmcgYnkgc2luZ2xlIHF1b3RlIGNoYXJhY3RlcnM6XG4gKiBjb25zdCByZXN1bHQgPSBmb3JtYXQobmV3IERhdGUoMjAxNCwgNiwgMiwgMTUpLCBcImggJ28nJ2Nsb2NrJ1wiKVxuICogLy89PiBcIjMgbydjbG9ja1wiXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZm9ybWF0KGRpcnR5RGF0ZSwgZGlydHlGb3JtYXRTdHIsIG9wdGlvbnMpIHtcbiAgdmFyIF9yZWYsIF9vcHRpb25zJGxvY2FsZSwgX3JlZjIsIF9yZWYzLCBfcmVmNCwgX29wdGlvbnMkZmlyc3RXZWVrQ29uLCBfb3B0aW9ucyRsb2NhbGUyLCBfb3B0aW9ucyRsb2NhbGUyJG9wdGksIF9kZWZhdWx0T3B0aW9ucyRsb2NhbCwgX2RlZmF1bHRPcHRpb25zJGxvY2FsMiwgX3JlZjUsIF9yZWY2LCBfcmVmNywgX29wdGlvbnMkd2Vla1N0YXJ0c09uLCBfb3B0aW9ucyRsb2NhbGUzLCBfb3B0aW9ucyRsb2NhbGUzJG9wdGksIF9kZWZhdWx0T3B0aW9ucyRsb2NhbDMsIF9kZWZhdWx0T3B0aW9ucyRsb2NhbDQ7XG5cbiAgcmVxdWlyZWRBcmdzKDIsIGFyZ3VtZW50cyk7XG4gIHZhciBmb3JtYXRTdHIgPSBTdHJpbmcoZGlydHlGb3JtYXRTdHIpO1xuICB2YXIgZGVmYXVsdE9wdGlvbnMgPSBnZXREZWZhdWx0T3B0aW9ucygpO1xuICB2YXIgbG9jYWxlID0gKF9yZWYgPSAoX29wdGlvbnMkbG9jYWxlID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmxvY2FsZSkgIT09IG51bGwgJiYgX29wdGlvbnMkbG9jYWxlICE9PSB2b2lkIDAgPyBfb3B0aW9ucyRsb2NhbGUgOiBkZWZhdWx0T3B0aW9ucy5sb2NhbGUpICE9PSBudWxsICYmIF9yZWYgIT09IHZvaWQgMCA/IF9yZWYgOiBkZWZhdWx0TG9jYWxlO1xuICB2YXIgZmlyc3RXZWVrQ29udGFpbnNEYXRlID0gdG9JbnRlZ2VyKChfcmVmMiA9IChfcmVmMyA9IChfcmVmNCA9IChfb3B0aW9ucyRmaXJzdFdlZWtDb24gPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlKSAhPT0gbnVsbCAmJiBfb3B0aW9ucyRmaXJzdFdlZWtDb24gIT09IHZvaWQgMCA/IF9vcHRpb25zJGZpcnN0V2Vla0NvbiA6IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9vcHRpb25zJGxvY2FsZTIgPSBvcHRpb25zLmxvY2FsZSkgPT09IG51bGwgfHwgX29wdGlvbnMkbG9jYWxlMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9vcHRpb25zJGxvY2FsZTIkb3B0aSA9IF9vcHRpb25zJGxvY2FsZTIub3B0aW9ucykgPT09IG51bGwgfHwgX29wdGlvbnMkbG9jYWxlMiRvcHRpID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfb3B0aW9ucyRsb2NhbGUyJG9wdGkuZmlyc3RXZWVrQ29udGFpbnNEYXRlKSAhPT0gbnVsbCAmJiBfcmVmNCAhPT0gdm9pZCAwID8gX3JlZjQgOiBkZWZhdWx0T3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGUpICE9PSBudWxsICYmIF9yZWYzICE9PSB2b2lkIDAgPyBfcmVmMyA6IChfZGVmYXVsdE9wdGlvbnMkbG9jYWwgPSBkZWZhdWx0T3B0aW9ucy5sb2NhbGUpID09PSBudWxsIHx8IF9kZWZhdWx0T3B0aW9ucyRsb2NhbCA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9kZWZhdWx0T3B0aW9ucyRsb2NhbDIgPSBfZGVmYXVsdE9wdGlvbnMkbG9jYWwub3B0aW9ucykgPT09IG51bGwgfHwgX2RlZmF1bHRPcHRpb25zJGxvY2FsMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2RlZmF1bHRPcHRpb25zJGxvY2FsMi5maXJzdFdlZWtDb250YWluc0RhdGUpICE9PSBudWxsICYmIF9yZWYyICE9PSB2b2lkIDAgPyBfcmVmMiA6IDEpOyAvLyBUZXN0IGlmIHdlZWtTdGFydHNPbiBpcyBiZXR3ZWVuIDEgYW5kIDcgX2FuZF8gaXMgbm90IE5hTlxuXG4gIGlmICghKGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA+PSAxICYmIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA8PSA3KSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdmaXJzdFdlZWtDb250YWluc0RhdGUgbXVzdCBiZSBiZXR3ZWVuIDEgYW5kIDcgaW5jbHVzaXZlbHknKTtcbiAgfVxuXG4gIHZhciB3ZWVrU3RhcnRzT24gPSB0b0ludGVnZXIoKF9yZWY1ID0gKF9yZWY2ID0gKF9yZWY3ID0gKF9vcHRpb25zJHdlZWtTdGFydHNPbiA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy53ZWVrU3RhcnRzT24pICE9PSBudWxsICYmIF9vcHRpb25zJHdlZWtTdGFydHNPbiAhPT0gdm9pZCAwID8gX29wdGlvbnMkd2Vla1N0YXJ0c09uIDogb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX29wdGlvbnMkbG9jYWxlMyA9IG9wdGlvbnMubG9jYWxlKSA9PT0gbnVsbCB8fCBfb3B0aW9ucyRsb2NhbGUzID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX29wdGlvbnMkbG9jYWxlMyRvcHRpID0gX29wdGlvbnMkbG9jYWxlMy5vcHRpb25zKSA9PT0gbnVsbCB8fCBfb3B0aW9ucyRsb2NhbGUzJG9wdGkgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9vcHRpb25zJGxvY2FsZTMkb3B0aS53ZWVrU3RhcnRzT24pICE9PSBudWxsICYmIF9yZWY3ICE9PSB2b2lkIDAgPyBfcmVmNyA6IGRlZmF1bHRPcHRpb25zLndlZWtTdGFydHNPbikgIT09IG51bGwgJiYgX3JlZjYgIT09IHZvaWQgMCA/IF9yZWY2IDogKF9kZWZhdWx0T3B0aW9ucyRsb2NhbDMgPSBkZWZhdWx0T3B0aW9ucy5sb2NhbGUpID09PSBudWxsIHx8IF9kZWZhdWx0T3B0aW9ucyRsb2NhbDMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfZGVmYXVsdE9wdGlvbnMkbG9jYWw0ID0gX2RlZmF1bHRPcHRpb25zJGxvY2FsMy5vcHRpb25zKSA9PT0gbnVsbCB8fCBfZGVmYXVsdE9wdGlvbnMkbG9jYWw0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZGVmYXVsdE9wdGlvbnMkbG9jYWw0LndlZWtTdGFydHNPbikgIT09IG51bGwgJiYgX3JlZjUgIT09IHZvaWQgMCA/IF9yZWY1IDogMCk7IC8vIFRlc3QgaWYgd2Vla1N0YXJ0c09uIGlzIGJldHdlZW4gMCBhbmQgNiBfYW5kXyBpcyBub3QgTmFOXG5cbiAgaWYgKCEod2Vla1N0YXJ0c09uID49IDAgJiYgd2Vla1N0YXJ0c09uIDw9IDYpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3dlZWtTdGFydHNPbiBtdXN0IGJlIGJldHdlZW4gMCBhbmQgNiBpbmNsdXNpdmVseScpO1xuICB9XG5cbiAgaWYgKCFsb2NhbGUubG9jYWxpemUpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignbG9jYWxlIG11c3QgY29udGFpbiBsb2NhbGl6ZSBwcm9wZXJ0eScpO1xuICB9XG5cbiAgaWYgKCFsb2NhbGUuZm9ybWF0TG9uZykge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdsb2NhbGUgbXVzdCBjb250YWluIGZvcm1hdExvbmcgcHJvcGVydHknKTtcbiAgfVxuXG4gIHZhciBvcmlnaW5hbERhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcblxuICBpZiAoIWlzVmFsaWQob3JpZ2luYWxEYXRlKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbnZhbGlkIHRpbWUgdmFsdWUnKTtcbiAgfSAvLyBDb252ZXJ0IHRoZSBkYXRlIGluIHN5c3RlbSB0aW1lem9uZSB0byB0aGUgc2FtZSBkYXRlIGluIFVUQyswMDowMCB0aW1lem9uZS5cbiAgLy8gVGhpcyBlbnN1cmVzIHRoYXQgd2hlbiBVVEMgZnVuY3Rpb25zIHdpbGwgYmUgaW1wbGVtZW50ZWQsIGxvY2FsZXMgd2lsbCBiZSBjb21wYXRpYmxlIHdpdGggdGhlbS5cbiAgLy8gU2VlIGFuIGlzc3VlIGFib3V0IFVUQyBmdW5jdGlvbnM6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9pc3N1ZXMvMzc2XG5cblxuICB2YXIgdGltZXpvbmVPZmZzZXQgPSBnZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzKG9yaWdpbmFsRGF0ZSk7XG4gIHZhciB1dGNEYXRlID0gc3ViTWlsbGlzZWNvbmRzKG9yaWdpbmFsRGF0ZSwgdGltZXpvbmVPZmZzZXQpO1xuICB2YXIgZm9ybWF0dGVyT3B0aW9ucyA9IHtcbiAgICBmaXJzdFdlZWtDb250YWluc0RhdGU6IGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSxcbiAgICB3ZWVrU3RhcnRzT246IHdlZWtTdGFydHNPbixcbiAgICBsb2NhbGU6IGxvY2FsZSxcbiAgICBfb3JpZ2luYWxEYXRlOiBvcmlnaW5hbERhdGVcbiAgfTtcbiAgdmFyIHJlc3VsdCA9IGZvcm1hdFN0ci5tYXRjaChsb25nRm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cCkubWFwKGZ1bmN0aW9uIChzdWJzdHJpbmcpIHtcbiAgICB2YXIgZmlyc3RDaGFyYWN0ZXIgPSBzdWJzdHJpbmdbMF07XG5cbiAgICBpZiAoZmlyc3RDaGFyYWN0ZXIgPT09ICdwJyB8fCBmaXJzdENoYXJhY3RlciA9PT0gJ1AnKSB7XG4gICAgICB2YXIgbG9uZ0Zvcm1hdHRlciA9IGxvbmdGb3JtYXR0ZXJzW2ZpcnN0Q2hhcmFjdGVyXTtcbiAgICAgIHJldHVybiBsb25nRm9ybWF0dGVyKHN1YnN0cmluZywgbG9jYWxlLmZvcm1hdExvbmcpO1xuICAgIH1cblxuICAgIHJldHVybiBzdWJzdHJpbmc7XG4gIH0pLmpvaW4oJycpLm1hdGNoKGZvcm1hdHRpbmdUb2tlbnNSZWdFeHApLm1hcChmdW5jdGlvbiAoc3Vic3RyaW5nKSB7XG4gICAgLy8gUmVwbGFjZSB0d28gc2luZ2xlIHF1b3RlIGNoYXJhY3RlcnMgd2l0aCBvbmUgc2luZ2xlIHF1b3RlIGNoYXJhY3RlclxuICAgIGlmIChzdWJzdHJpbmcgPT09IFwiJydcIikge1xuICAgICAgcmV0dXJuIFwiJ1wiO1xuICAgIH1cblxuICAgIHZhciBmaXJzdENoYXJhY3RlciA9IHN1YnN0cmluZ1swXTtcblxuICAgIGlmIChmaXJzdENoYXJhY3RlciA9PT0gXCInXCIpIHtcbiAgICAgIHJldHVybiBjbGVhbkVzY2FwZWRTdHJpbmcoc3Vic3RyaW5nKTtcbiAgICB9XG5cbiAgICB2YXIgZm9ybWF0dGVyID0gZm9ybWF0dGVyc1tmaXJzdENoYXJhY3Rlcl07XG5cbiAgICBpZiAoZm9ybWF0dGVyKSB7XG4gICAgICBpZiAoIShvcHRpb25zICE9PSBudWxsICYmIG9wdGlvbnMgIT09IHZvaWQgMCAmJiBvcHRpb25zLnVzZUFkZGl0aW9uYWxXZWVrWWVhclRva2VucykgJiYgaXNQcm90ZWN0ZWRXZWVrWWVhclRva2VuKHN1YnN0cmluZykpIHtcbiAgICAgICAgdGhyb3dQcm90ZWN0ZWRFcnJvcihzdWJzdHJpbmcsIGRpcnR5Rm9ybWF0U3RyLCBTdHJpbmcoZGlydHlEYXRlKSk7XG4gICAgICB9XG5cbiAgICAgIGlmICghKG9wdGlvbnMgIT09IG51bGwgJiYgb3B0aW9ucyAhPT0gdm9pZCAwICYmIG9wdGlvbnMudXNlQWRkaXRpb25hbERheU9mWWVhclRva2VucykgJiYgaXNQcm90ZWN0ZWREYXlPZlllYXJUb2tlbihzdWJzdHJpbmcpKSB7XG4gICAgICAgIHRocm93UHJvdGVjdGVkRXJyb3Ioc3Vic3RyaW5nLCBkaXJ0eUZvcm1hdFN0ciwgU3RyaW5nKGRpcnR5RGF0ZSkpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZm9ybWF0dGVyKHV0Y0RhdGUsIHN1YnN0cmluZywgbG9jYWxlLmxvY2FsaXplLCBmb3JtYXR0ZXJPcHRpb25zKTtcbiAgICB9XG5cbiAgICBpZiAoZmlyc3RDaGFyYWN0ZXIubWF0Y2godW5lc2NhcGVkTGF0aW5DaGFyYWN0ZXJSZWdFeHApKSB7XG4gICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignRm9ybWF0IHN0cmluZyBjb250YWlucyBhbiB1bmVzY2FwZWQgbGF0aW4gYWxwaGFiZXQgY2hhcmFjdGVyIGAnICsgZmlyc3RDaGFyYWN0ZXIgKyAnYCcpO1xuICAgIH1cblxuICAgIHJldHVybiBzdWJzdHJpbmc7XG4gIH0pLmpvaW4oJycpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBjbGVhbkVzY2FwZWRTdHJpbmcoaW5wdXQpIHtcbiAgdmFyIG1hdGNoZWQgPSBpbnB1dC5tYXRjaChlc2NhcGVkU3RyaW5nUmVnRXhwKTtcblxuICBpZiAoIW1hdGNoZWQpIHtcbiAgICByZXR1cm4gaW5wdXQ7XG4gIH1cblxuICByZXR1cm4gbWF0Y2hlZFsxXS5yZXBsYWNlKGRvdWJsZVF1b3RlUmVnRXhwLCBcIidcIik7XG59IiwiaW1wb3J0IGlzRGF0ZSBmcm9tIFwiLi4vaXNEYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgdG9EYXRlIGZyb20gXCIuLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG4vKipcbiAqIEBuYW1lIGlzVmFsaWRcbiAqIEBjYXRlZ29yeSBDb21tb24gSGVscGVyc1xuICogQHN1bW1hcnkgSXMgdGhlIGdpdmVuIGRhdGUgdmFsaWQ/XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBSZXR1cm5zIGZhbHNlIGlmIGFyZ3VtZW50IGlzIEludmFsaWQgRGF0ZSBhbmQgdHJ1ZSBvdGhlcndpc2UuXG4gKiBBcmd1bWVudCBpcyBjb252ZXJ0ZWQgdG8gRGF0ZSB1c2luZyBgdG9EYXRlYC4gU2VlIFt0b0RhdGVde0BsaW5rIGh0dHBzOi8vZGF0ZS1mbnMub3JnL2RvY3MvdG9EYXRlfVxuICogSW52YWxpZCBEYXRlIGlzIGEgRGF0ZSwgd2hvc2UgdGltZSB2YWx1ZSBpcyBOYU4uXG4gKlxuICogVGltZSB2YWx1ZSBvZiBEYXRlOiBodHRwOi8vZXM1LmdpdGh1Yi5pby8jeDE1LjkuMS4xXG4gKlxuICogQHBhcmFtIHsqfSBkYXRlIC0gdGhlIGRhdGUgdG8gY2hlY2tcbiAqIEByZXR1cm5zIHtCb29sZWFufSB0aGUgZGF0ZSBpcyB2YWxpZFxuICogQHRocm93cyB7VHlwZUVycm9yfSAxIGFyZ3VtZW50IHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEZvciB0aGUgdmFsaWQgZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IGlzVmFsaWQobmV3IERhdGUoMjAxNCwgMSwgMzEpKVxuICogLy89PiB0cnVlXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEZvciB0aGUgdmFsdWUsIGNvbnZlcnRhYmxlIGludG8gYSBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gaXNWYWxpZCgxMzkzODA0ODAwMDAwKVxuICogLy89PiB0cnVlXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEZvciB0aGUgaW52YWxpZCBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gaXNWYWxpZChuZXcgRGF0ZSgnJykpXG4gKiAvLz0+IGZhbHNlXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNWYWxpZChkaXJ0eURhdGUpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG5cbiAgaWYgKCFpc0RhdGUoZGlydHlEYXRlKSAmJiB0eXBlb2YgZGlydHlEYXRlICE9PSAnbnVtYmVyJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHJldHVybiAhaXNOYU4oTnVtYmVyKGRhdGUpKTtcbn0iLCIvKipcbiAqIEdvb2dsZSBDaHJvbWUgYXMgb2YgNjcuMC4zMzk2Ljg3IGludHJvZHVjZWQgdGltZXpvbmVzIHdpdGggb2Zmc2V0IHRoYXQgaW5jbHVkZXMgc2Vjb25kcy5cbiAqIFRoZXkgdXN1YWxseSBhcHBlYXIgZm9yIGRhdGVzIHRoYXQgZGVub3RlIHRpbWUgYmVmb3JlIHRoZSB0aW1lem9uZXMgd2VyZSBpbnRyb2R1Y2VkXG4gKiAoZS5nLiBmb3IgJ0V1cm9wZS9QcmFndWUnIHRpbWV6b25lIHRoZSBvZmZzZXQgaXMgR01UKzAwOjU3OjQ0IGJlZm9yZSAxIE9jdG9iZXIgMTg5MVxuICogYW5kIEdNVCswMTowMDowMCBhZnRlciB0aGF0IGRhdGUpXG4gKlxuICogRGF0ZSNnZXRUaW1lem9uZU9mZnNldCByZXR1cm5zIHRoZSBvZmZzZXQgaW4gbWludXRlcyBhbmQgd291bGQgcmV0dXJuIDU3IGZvciB0aGUgZXhhbXBsZSBhYm92ZSxcbiAqIHdoaWNoIHdvdWxkIGxlYWQgdG8gaW5jb3JyZWN0IGNhbGN1bGF0aW9ucy5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIHJldHVybnMgdGhlIHRpbWV6b25lIG9mZnNldCBpbiBtaWxsaXNlY29uZHMgdGhhdCB0YWtlcyBzZWNvbmRzIGluIGFjY291bnQuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMoZGF0ZSkge1xuICB2YXIgdXRjRGF0ZSA9IG5ldyBEYXRlKERhdGUuVVRDKGRhdGUuZ2V0RnVsbFllYXIoKSwgZGF0ZS5nZXRNb250aCgpLCBkYXRlLmdldERhdGUoKSwgZGF0ZS5nZXRIb3VycygpLCBkYXRlLmdldE1pbnV0ZXMoKSwgZGF0ZS5nZXRTZWNvbmRzKCksIGRhdGUuZ2V0TWlsbGlzZWNvbmRzKCkpKTtcbiAgdXRjRGF0ZS5zZXRVVENGdWxsWWVhcihkYXRlLmdldEZ1bGxZZWFyKCkpO1xuICByZXR1cm4gZGF0ZS5nZXRUaW1lKCkgLSB1dGNEYXRlLmdldFRpbWUoKTtcbn0iLCJpbXBvcnQgYWRkTWlsbGlzZWNvbmRzIGZyb20gXCIuLi9hZGRNaWxsaXNlY29uZHMvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG5pbXBvcnQgdG9JbnRlZ2VyIGZyb20gXCIuLi9fbGliL3RvSW50ZWdlci9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSBzdWJNaWxsaXNlY29uZHNcbiAqIEBjYXRlZ29yeSBNaWxsaXNlY29uZCBIZWxwZXJzXG4gKiBAc3VtbWFyeSBTdWJ0cmFjdCB0aGUgc3BlY2lmaWVkIG51bWJlciBvZiBtaWxsaXNlY29uZHMgZnJvbSB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFN1YnRyYWN0IHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBmcm9tIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGUgLSB0aGUgZGF0ZSB0byBiZSBjaGFuZ2VkXG4gKiBAcGFyYW0ge051bWJlcn0gYW1vdW50IC0gdGhlIGFtb3VudCBvZiBtaWxsaXNlY29uZHMgdG8gYmUgc3VidHJhY3RlZC4gUG9zaXRpdmUgZGVjaW1hbHMgd2lsbCBiZSByb3VuZGVkIHVzaW5nIGBNYXRoLmZsb29yYCwgZGVjaW1hbHMgbGVzcyB0aGFuIHplcm8gd2lsbCBiZSByb3VuZGVkIHVzaW5nIGBNYXRoLmNlaWxgLlxuICogQHJldHVybnMge0RhdGV9IHRoZSBuZXcgZGF0ZSB3aXRoIHRoZSBtaWxsaXNlY29uZHMgc3VidHJhY3RlZFxuICogQHRocm93cyB7VHlwZUVycm9yfSAyIGFyZ3VtZW50cyByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBTdWJ0cmFjdCA3NTAgbWlsbGlzZWNvbmRzIGZyb20gMTAgSnVseSAyMDE0IDEyOjQ1OjMwLjAwMDpcbiAqIGNvbnN0IHJlc3VsdCA9IHN1Yk1pbGxpc2Vjb25kcyhuZXcgRGF0ZSgyMDE0LCA2LCAxMCwgMTIsIDQ1LCAzMCwgMCksIDc1MClcbiAqIC8vPT4gVGh1IEp1bCAxMCAyMDE0IDEyOjQ1OjI5LjI1MFxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN1Yk1pbGxpc2Vjb25kcyhkaXJ0eURhdGUsIGRpcnR5QW1vdW50KSB7XG4gIHJlcXVpcmVkQXJncygyLCBhcmd1bWVudHMpO1xuICB2YXIgYW1vdW50ID0gdG9JbnRlZ2VyKGRpcnR5QW1vdW50KTtcbiAgcmV0dXJuIGFkZE1pbGxpc2Vjb25kcyhkaXJ0eURhdGUsIC1hbW91bnQpO1xufSIsImltcG9ydCB0b0ludGVnZXIgZnJvbSBcIi4uL19saWIvdG9JbnRlZ2VyL2luZGV4LmpzXCI7XG5pbXBvcnQgdG9EYXRlIGZyb20gXCIuLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG4vKipcbiAqIEBuYW1lIGFkZE1pbGxpc2Vjb25kc1xuICogQGNhdGVnb3J5IE1pbGxpc2Vjb25kIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IEFkZCB0aGUgc3BlY2lmaWVkIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBBZGQgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGUgLSB0aGUgZGF0ZSB0byBiZSBjaGFuZ2VkXG4gKiBAcGFyYW0ge051bWJlcn0gYW1vdW50IC0gdGhlIGFtb3VudCBvZiBtaWxsaXNlY29uZHMgdG8gYmUgYWRkZWQuIFBvc2l0aXZlIGRlY2ltYWxzIHdpbGwgYmUgcm91bmRlZCB1c2luZyBgTWF0aC5mbG9vcmAsIGRlY2ltYWxzIGxlc3MgdGhhbiB6ZXJvIHdpbGwgYmUgcm91bmRlZCB1c2luZyBgTWF0aC5jZWlsYC5cbiAqIEByZXR1cm5zIHtEYXRlfSB0aGUgbmV3IGRhdGUgd2l0aCB0aGUgbWlsbGlzZWNvbmRzIGFkZGVkXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDIgYXJndW1lbnRzIHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEFkZCA3NTAgbWlsbGlzZWNvbmRzIHRvIDEwIEp1bHkgMjAxNCAxMjo0NTozMC4wMDA6XG4gKiBjb25zdCByZXN1bHQgPSBhZGRNaWxsaXNlY29uZHMobmV3IERhdGUoMjAxNCwgNiwgMTAsIDEyLCA0NSwgMzAsIDApLCA3NTApXG4gKiAvLz0+IFRodSBKdWwgMTAgMjAxNCAxMjo0NTozMC43NTBcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhZGRNaWxsaXNlY29uZHMoZGlydHlEYXRlLCBkaXJ0eUFtb3VudCkge1xuICByZXF1aXJlZEFyZ3MoMiwgYXJndW1lbnRzKTtcbiAgdmFyIHRpbWVzdGFtcCA9IHRvRGF0ZShkaXJ0eURhdGUpLmdldFRpbWUoKTtcbiAgdmFyIGFtb3VudCA9IHRvSW50ZWdlcihkaXJ0eUFtb3VudCk7XG4gIHJldHVybiBuZXcgRGF0ZSh0aW1lc3RhbXAgKyBhbW91bnQpO1xufSIsImltcG9ydCBkcmF3RXhpc3RpbmdUb2RvcyBmcm9tIFwiLi9kcmF3RXhpc3RpbmdUb2Rvc1wiO1xuaW1wb3J0IHJlbW92ZUVsZW1lbnQgZnJvbSBcIi4vcmVtb3ZlRWxlbWVudFwiO1xuaW1wb3J0IHtmb3JtYXR9IGZyb20gXCJkYXRlLWZuc1wiXG5jb25zdCBkcmF3VG9kbyA9ICh0b2RvLCBkaXNwbGF5UGFuZWwsIHByb2plY3QsIHBtKSA9PiB7XG4gIGNvbnN0IGV4cGFuZEFycm93PWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNleHBhbmQtYXJyb3cnKTtcbiAgY29uc3Qgc2lkZVBhbmVsPWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zaWRlLXBhbmVsJyk7XG4gIGV4cGFuZEFycm93Lm9uZHJhZ292ZXI9KCk9PntcbiAgICBkaXNwbGF5UGFuZWwucGFyZW50RWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdleHBhbmQtcGFuZWwnKTtcbiAgICAgIHNpZGVQYW5lbC5jbGFzc0xpc3QucmVtb3ZlKCdkaXNwbGF5LW9wZW4nKTtcbiAgICAgIGRpc3BsYXlQYW5lbC5wYXJlbnRFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2Nsb3NlLXBhbmVsJyk7XG4gICAgICBzaWRlUGFuZWwuY2xhc3NMaXN0LmFkZCgnZGlzcGxheS1jbG9zZWQnKTtcbiAgfTtcbiAgXG4gIGxldCB0b2RvRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgdG9kb0Rpdi5jbGFzc0xpc3QuYWRkKFwidG9kb1wiKTtcbiAgdG9kb0Rpdi5pZCA9IFwidG9kby1cIiArIHRvZG8uaWQ7XG4gIHRvZG9EaXYuc2V0QXR0cmlidXRlKFwiZHJhZ2dhYmxlXCIsIFwidHJ1ZVwiKTtcblxuICBsZXQgdG9kb0NoZWNrYm94ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuICB0b2RvQ2hlY2tib3guc2V0QXR0cmlidXRlKFwidHlwZVwiLCBcImNoZWNrYm94XCIpO1xuICB0b2RvQ2hlY2tib3guY2xhc3NMaXN0LmFkZChcInRvZG8tY2hlY2tib3hcIik7XG4gIGxldCB0b2RvVGl0bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicFwiKTtcbiAgdG9kb1RpdGxlLmNsYXNzTGlzdC5hZGQoXCJ0aXRsZVwiKTtcbiAgdG9kb1RpdGxlLnRleHRDb250ZW50ID0gdG9kby50aXRsZTtcblxuICBsZXQgdG9kb0R1ZURhdGVINCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJwXCIpO1xuICB0b2RvRHVlRGF0ZUg0LmNsYXNzTGlzdC5hZGQoXCJkdWUtZGF0ZVwiKTtcbiAgdG9kb0R1ZURhdGVINC50ZXh0Q29udGVudCA9IHRvZG8uZHVlRGF0ZTtcblxuICBsZXQgbmV3SW5wdXREYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuICBuZXdJbnB1dERhdGUuc2V0QXR0cmlidXRlKFwidHlwZVwiLCBcImRhdGVcIik7XG4gIG5ld0lucHV0RGF0ZS5jbGFzc0xpc3QuYWRkKFwidG9kby1uZXctZGF0ZVwiKTtcbiAgbmV3SW5wdXREYXRlLnZhbHVlID0gdG9kby5kdWVEYXRlO1xuXG4gIGxldCByZW1vdmVCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xuICByZW1vdmVCdXR0b24uY2xhc3NMaXN0LmFkZChcInJlbW92ZS10b2RvXCIpO1xuICByZW1vdmVCdXR0b24udGV4dENvbnRlbnQgPSBcIlhcIjtcbiAgbGV0IHJlbW92ZUJ1dHRvbkNvbnRhaW5lcj0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIHJlbW92ZUJ1dHRvbkNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdyZW1vdmUtYnV0dG9uLWNvbnRhaW5lcicpO1xuICByZW1vdmVCdXR0b25Db250YWluZXIuYXBwZW5kQ2hpbGQocmVtb3ZlQnV0dG9uKTtcbiBsZXQgIGNoZWNrYm94Q29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gY2hlY2tib3hDb250YWluZXIuY2xhc3NMaXN0LmFkZChcImNoZWNrYm94LWNvbnRhaW5lclwiKTtcbiAgY2hlY2tib3hDb250YWluZXIuYXBwZW5kQ2hpbGQodG9kb0NoZWNrYm94KTtcbiAgdG9kb0Rpdi5hcHBlbmRDaGlsZChjaGVja2JveENvbnRhaW5lcik7XG4gIHRvZG9EaXYuYXBwZW5kQ2hpbGQodG9kb1RpdGxlKTtcbiAgdG9kb0Rpdi5hcHBlbmRDaGlsZCh0b2RvRHVlRGF0ZUg0KTtcbiAgdG9kb0Rpdi5hcHBlbmRDaGlsZChyZW1vdmVCdXR0b25Db250YWluZXIpO1xuICBkaXNwbGF5UGFuZWwuYXBwZW5kQ2hpbGQodG9kb0Rpdik7XG5cbiAgXG5cbiAgbGV0IG5ld0lucHV0VGV4dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcbiAgbmV3SW5wdXRUZXh0LmNsYXNzTGlzdC5hZGQoXCJ0b2RvLW5ldy10aXRsZVwiKTtcbiAgbmV3SW5wdXRUZXh0LnZhbHVlID0gdG9kby50aXRsZTtcblxuICByZW1vdmVCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgICByZW1vdmVFbGVtZW50KHByb2plY3QsIHRvZG8uaWQpO1xuICAgIHRvZG9EaXYucmVtb3ZlKCk7XG5cbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcInBhY2thZ2VNYW5hZ2VyXCIsIEpTT04uc3RyaW5naWZ5KHBtKSk7XG4gIH0pO1xuXG4gIHRvZG9UaXRsZS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICAgIHRvZG9UaXRsZS5hcHBlbmRDaGlsZChuZXdJbnB1dFRleHQpO1xuICAgIG5ld0lucHV0VGV4dC5mb2N1cygpO1xuICB9KTtcbiAgbmV3SW5wdXRUZXh0Lm9uYmx1ciA9ICgpID0+IHtcbiAgICB0b2RvLnRpdGxlID0gbmV3SW5wdXRUZXh0LnZhbHVlO1xuICAgIHRvZG9UaXRsZS50ZXh0Q29udGVudCA9IHRvZG8udGl0bGU7XG4gICAgbmV3SW5wdXRUZXh0LnJlbW92ZSgpO1xuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFwicGFja2FnZU1hbmFnZXJcIiwgSlNPTi5zdHJpbmdpZnkocG0pKTtcbiAgfTtcbiAgbmV3SW5wdXRUZXh0LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXl1cFwiLCAoeyBrZXkgfSkgPT4ge1xuICAgIGlmIChrZXkgPT09IFwiRW50ZXJcIikge1xuICAgICAgbmV3SW5wdXRUZXh0LmJsdXIoKTtcbiAgICB9XG4gIH0pO1xuXG4gIHRvZG9EaXYub25kcmFnc3RhcnQgPSAoZXZlbnQpID0+IHtcbiAgICBjb25zdCBvYmogPSB7IHRvZG9PYmo6IHRvZG8sIHByb2plY3RPYmo6IHByb2plY3QgfTtcbiAgICBldmVudC5kYXRhVHJhbnNmZXIuc2V0RGF0YShcInRleHRcIiwgSlNPTi5zdHJpbmdpZnkob2JqKSk7XG4gIH07XG5cbiAgdG9kb0Rpdi5vbmRyYWdlbmQgPSAoZXZlbnQpID0+IHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGRyYXdFeGlzdGluZ1RvZG9zKHBtLCBwcm9qZWN0LCBkaXNwbGF5UGFuZWwpO1xuICAgIFxuICB9O1xuICB0b2RvRHVlRGF0ZUg0LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgdG9kb0R1ZURhdGVINC5hcHBlbmRDaGlsZChuZXdJbnB1dERhdGUpO1xuICAgIG5ld0lucHV0RGF0ZS5mb2N1cygpO1xuICB9KTtcbiAgbmV3SW5wdXREYXRlLm9uYmx1ciA9ICgpID0+IHtcbiAgICBpZiAobmV3SW5wdXREYXRlLnZhbHVlICE9PSBcIlwiKSB7XG4gICAgICBsZXQgZGF0ZT1mb3JtYXQobmV3IERhdGUoYCR7bmV3SW5wdXREYXRlLnZhbHVlfVQwMDowMGApLCdNTS9kZC95eXl5Jyk7XG4gICAgICB0b2RvLmR1ZURhdGUgPSBkYXRlO1xuICAgICAgdG9kb0R1ZURhdGVINC52YWx1ZUFzRGF0ZSA9IGRhdGU7XG4gICAgICB0b2RvRHVlRGF0ZUg0LnRleHRDb250ZW50ID0gdG9kby5kdWVEYXRlO1xuICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJwYWNrYWdlTWFuYWdlclwiLCBKU09OLnN0cmluZ2lmeShwbSkpO1xuICAgIH1cbiAgICBuZXdJbnB1dERhdGUucmVtb3ZlKCk7XG4gIH07XG4gIG5ld0lucHV0RGF0ZS5hZGRFdmVudExpc3RlbmVyKFwia2V5dXBcIiwgKHsga2V5IH0pID0+IHtcbiAgICBpZiAoa2V5ID09PSBcIkVudGVyXCIpIG5ld0lucHV0RGF0ZS5ibHVyKCk7XG4gIH0pO1xuICByZXR1cm4gdG9kb0Rpdjtcbn07XG5leHBvcnQgZGVmYXVsdCBkcmF3VG9kbztcbiIsImltcG9ydCBkcmF3VG9kbyBmcm9tIFwiLi9kcmF3VG9kb1wiO1xuaW1wb3J0IHtmb3JtYXQsY29tcGFyZUFzY30gZnJvbSAnZGF0ZS1mbnMnO1xuY29uc3QgZHJhd0FsbFRvZG9zPShwbSxkaXNwbGF5UGFuZWwpPT57XG4gICAgbGV0IGFsbFByb2plY3RzID0gcG0uZ2V0QWxsKCk7XG4gICAgYWxsUHJvamVjdHMuZm9yRWFjaCgocHJvamVjdCk9PntcbiAgICAgICAgbGV0IHRlbXBUb2RvQXJyPXByb2plY3QuZ2V0QWxsKCk7XG4gICAgICAgIHRlbXBUb2RvQXJyLmZvckVhY2goKHRvZG8pPT57XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGRyYXdUb2RvKHRvZG8sZGlzcGxheVBhbmVsLHByb2plY3QscG0pO1xuICAgICAgICAgICAgXG4gICAgICAgIH0pXG4gICAgICAgIFxuICAgICAgICBcbiAgICB9KTtcbiAgICBcbiAgICBsZXQgYWxsVG9kb3M9ZGlzcGxheVBhbmVsLmNoaWxkcmVuO1xuICAgIGFsbFRvZG9zPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFsbFRvZG9zKTtcbiAgICBcbiAgICAgICAgYWxsVG9kb3Muc29ydCgoYSxiKT0+e1xuICAgICAgICAgICAgbGV0IGRhdGVBPW5ldyBEYXRlKGEuY2hpbGROb2Rlc1syXS5pbm5lckhUTUwpO1xuICAgICAgICAgICAgbGV0IGRhdGVCPW5ldyBEYXRlKGIuY2hpbGROb2Rlc1syXS5pbm5lckhUTUwpO1xuICAgICAgICAgICAgcmV0dXJuIGRhdGVBLWRhdGVCO1xuICAgICAgICAgICAgXG4gICAgICAgIH0pO1xuXG4gICAgIGxldCBwYXJlbnRDb250YWluZXI9ZGlzcGxheVBhbmVsO1xuICAgICBwYXJlbnRDb250YWluZXIuaW5uZXJIVE1MPVwiXCI7XG4gICAgIFxuICAgICBmb3IobGV0IGk9MDtpPGFsbFRvZG9zLmxlbmd0aDtpKyspe1xuICAgICAgICBpZihhbGxUb2Rvc1tpXS5jaGlsZE5vZGVzWzJdIT09J1NldCBEYXRlJylcbiAgICAgICAgcGFyZW50Q29udGFpbmVyLmFwcGVuZENoaWxkKGFsbFRvZG9zW2ldKTtcblxuICAgICAgICBlbHNle1xuICAgICAgICAgICAgcGFyZW50Q29udGFpbmVyLmluc2VydEJlZm9yZShhbGxUb2Rvc1tpXSxwYXJlbnRDb250YWluZXIuZmlyc3RDaGlsZCk7XG4gICAgICAgIH1cbiAgICAgfVxuXG4gICAgXG4gICAgXG5cbn0gICAgIFxuXG5leHBvcnQgZGVmYXVsdCBkcmF3QWxsVG9kb3M7IiwiaW1wb3J0IGRyYXdBbGxUb2RvcyBmcm9tIFwiLi9kcmF3QWxsVG9kb3NcIjtcbmltcG9ydCBkcmF3VG9kbyBmcm9tIFwiLi9kcmF3VG9kb1wiO1xuXG5jb25zdCBkcmF3RXhpc3RpbmdUb2RvcyA9IChwbSwgcHJvamVjdCwgZGlzcGxheVBhbmVsKSA9PiB7XG4gIGRpc3BsYXlQYW5lbC5pbm5lckhUTUwgPSBcIlwiO1xuICBpZihwcm9qZWN0LnRpdGxlPT09XCJBbGxcIil7XG4gICAgZHJhd0FsbFRvZG9zKHBtLGRpc3BsYXlQYW5lbCk7XG4gIH1cbiAgZWxzZXtcbiAgICBjb25zdCB0b2RvQXJyYXkgPSBwcm9qZWN0LmdldEFsbCgpO1xuICAgIHRvZG9BcnJheS5mb3JFYWNoKCh0b2RvKSA9PiB7XG4gICAgICBjb25zdCB0ZW1wVG9kb0RpdiA9IGRyYXdUb2RvKHRvZG8sIGRpc3BsYXlQYW5lbCwgcHJvamVjdCwgcG0pO1xuICAgIH0pO1xuXG4gIH1cbn07XG5leHBvcnQgZGVmYXVsdCBkcmF3RXhpc3RpbmdUb2RvcztcbiIsImltcG9ydCBjcmVhdGVOZXdUb2RvRm9ybSBmcm9tIFwiLi9uZXdUb2RvRm9ybVwiO1xuXG5jb25zdCBjcmVhdGVOZXdUb2RvQnV0dG9uID0gKHBtLHByb2plY3QsIGRpc3BsYXlQYW5lbCkgPT4ge1xuICBjb25zdCBtcCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubWFpbi1wYW5lbFwiKTtcbiAgbGV0IGNyZWF0ZVRvZG9Gb3JtQnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcbiAgY3JlYXRlVG9kb0Zvcm1CdXR0b24uY2xhc3NMaXN0LmFkZChcImNyZWF0ZS10b2RvLWZvcm0tYnV0dG9uXCIpO1xuICBjcmVhdGVUb2RvRm9ybUJ1dHRvbi5pZCA9IFwidG9kby1jcmVhdGUtbmV3XCI7XG4gIGNyZWF0ZVRvZG9Gb3JtQnV0dG9uLnRleHRDb250ZW50ID0gXCJDcmVhdGUgbmV3IFRvZG9cIjtcbiAgY3JlYXRlVG9kb0Zvcm1CdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgICBjcmVhdGVOZXdUb2RvRm9ybShwbSxwcm9qZWN0LCBkaXNwbGF5UGFuZWwpO1xuICB9KTtcbiAgbGV0IGJ1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidG9kby1jcmVhdGUtbmV3XCIpO1xuICBpZiAoZG9jdW1lbnQuYm9keS5jb250YWlucyhidXR0b24pKSB7XG4gICAgYnV0dG9uLnJlbW92ZSgpO1xuICB9XG4gIG1wLmFwcGVuZENoaWxkKGNyZWF0ZVRvZG9Gb3JtQnV0dG9uKTtcbiAgcmV0dXJuIGNyZWF0ZVRvZG9Gb3JtQnV0dG9uO1xufTtcbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZU5ld1RvZG9CdXR0b247XG4iLCJpbXBvcnQgZHJhd0V4aXN0aW5nVG9kb3MgZnJvbSBcIi4vZHJhd0V4aXN0aW5nVG9kb3NcIjtcbmltcG9ydCB7Zm9ybWF0fSBmcm9tIFwiZGF0ZS1mbnNcIjtcbmltcG9ydCBUb2RvIGZyb20gXCIuL1RvZG9cIjtcbmNvbnN0IGNyZWF0ZU5ld1RvZG9Gb3JtID0gKHBtLHByb2plY3QsIGRpc3BsYXlQYW5lbCkgPT4ge1xuICBsZXQgdG90YWxUb2RvcyA9ICgpPT4ge1xuICAgIGxldCBzdW09MDtcbiAgICBwbS5nZXRBbGwoKS5mb3JFYWNoKChwKT0+e1xuICAgICAgcC5nZXRBbGwoKS5mb3JFYWNoKCh0KT0+IHN1bSs9MSk7XG4gICAgfSlcbiAgICByZXR1cm4gc3VtO1xuICB9XG4gIGxldCBuZXdUb2RvRm9ybURpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gIG5ld1RvZG9Gb3JtRGl2LmNsYXNzTGlzdC5hZGQoXCJjcmVhdGUtdG9kby1mb3JtXCIpO1xuICBsZXQgbmV3VG9kb0Zvcm0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZm9ybVwiKTtcbiAgbGV0IHRpdGxlTGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGFiZWxcIik7XG4gIHRpdGxlTGFiZWwuc2V0QXR0cmlidXRlKFwiZm9yXCIsIFwiZm9ybS10b2RvLXRpdGxlXCIpO1xuICB0aXRsZUxhYmVsLnRleHRDb250ZW50ID0gXCJUaXRsZVwiO1xuICBsZXQgdGl0bGVJbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcbiAgdGl0bGVJbnB1dC5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsIFwidGV4dFwiKTtcbiAgdGl0bGVJbnB1dC5pZCA9IFwiZm9ybS1Ub2RvLXRpdGxlXCI7XG4gIGxldCBkdWVEYXRlTGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGFiZWxcIik7XG4gIGR1ZURhdGVMYWJlbC5zZXRBdHRyaWJ1dGUoXCJmb3JcIiwgXCJmb3JtLXRvZG8tZHVlRGF0ZVwiKTtcbiAgZHVlRGF0ZUxhYmVsLnRleHRDb250ZW50ID0gXCJEdWUgRGF0ZVwiO1xuICBsZXQgZHVlRGF0ZUlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuICBkdWVEYXRlSW5wdXQuc2V0QXR0cmlidXRlKFwidHlwZVwiLCBcImRhdGVcIik7XG4gIGR1ZURhdGVJbnB1dC5pZCA9IFwiZm9ybS10b2RvLWR1ZURhdGVcIjtcbiAgbGV0IHByaW9yaXR5TGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGFiZWxcIik7XG4gIHByaW9yaXR5TGFiZWwuc2V0QXR0cmlidXRlKFwiZm9yXCIsIFwiZm9ybS10b2RvLXByaW9yaXR5XCIpO1xuICBwcmlvcml0eUxhYmVsLnRleHRDb250ZW50ID0gXCJQcmlvcml0eVwiO1xuICBsZXQgcHJpb3JpdHlJbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcbiAgcHJpb3JpdHlJbnB1dC5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsIFwidGV4dFwiKTtcbiAgcHJpb3JpdHlJbnB1dC5pZCA9IFwiZm9ybS10b2RvLXByaW9yaXR5XCI7XG4gIGxldCBjcmVhdGVCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xuICBjcmVhdGVCdXR0b24udGV4dENvbnRlbnQgPSBcIkNyZWF0ZVwiO1xuICBjcmVhdGVCdXR0b24uY2xhc3NMaXN0LmFkZChcImZvcm0tYnV0dG9uLXRvZG9cIik7XG4gIG5ld1RvZG9Gb3JtLmFwcGVuZENoaWxkKHRpdGxlTGFiZWwpO1xuICBuZXdUb2RvRm9ybS5hcHBlbmRDaGlsZCh0aXRsZUlucHV0KTtcbiAgbmV3VG9kb0Zvcm0uYXBwZW5kQ2hpbGQoZHVlRGF0ZUxhYmVsKTtcbiAgbmV3VG9kb0Zvcm0uYXBwZW5kQ2hpbGQoZHVlRGF0ZUlucHV0KTtcbiAgbmV3VG9kb0Zvcm1EaXYuYXBwZW5kQ2hpbGQobmV3VG9kb0Zvcm0pO1xuICBuZXdUb2RvRm9ybURpdi5hcHBlbmRDaGlsZChjcmVhdGVCdXR0b24pO1xuICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKG5ld1RvZG9Gb3JtRGl2KTtcbiAgXG4gIHRpdGxlSW5wdXQuZm9jdXMoKTtcbiAgdGl0bGVJbnB1dC5vbmJsdXI9KCk9PntcbiAgLy8gICBpZih0aXRsZUlucHV0LnZhbHVlIT09JycpXG4gIC8vICAgYWRkVG9ET00oKTtcbiAgLy8gICBlbHNlXG4gIC8vICAgbmV3VG9kb0Zvcm1EaXYucmVtb3ZlKCk7XG4gIH1cbiAgbmV3VG9kb0Zvcm0uYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywoZXZlbnQpPT57XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICBhZGRUb0RPTSgpO1xuICB9KVxuICBjcmVhdGVCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgICBhZGRUb0RPTSgpO1xuICB9KTtcblxuICBjb25zdCBhZGRUb0RPTT0oKT0+e1xuICAgIGxldCBkYXRlO1xuICAgIGlmKGR1ZURhdGVJbnB1dC52YWx1ZSE9PScnKVxuICAgIGRhdGU9Zm9ybWF0KG5ldyBEYXRlKGAke2R1ZURhdGVJbnB1dC52YWx1ZX1UMDA6MDBgKSwnTU0vZGQveXl5eScpO1xuICAgIFxuICAgIGVsc2VcbiAgICBkYXRlPSdTZXQgRGF0ZSc7XG5cbiAgICBpZih0aXRsZUlucHV0LnZhbHVlIT09Jycpe1xuXG4gICAgICBsZXQgdGVtcFRvZG9OYW1lID0gbmV3IFRvZG8oXG4gICAgICAgIHRpdGxlSW5wdXQudmFsdWUsXG4gICAgICAgIFwiIFwiLFxuICAgICAgICBkYXRlLFxuICAgICAgICBwcmlvcml0eUlucHV0LnZhbHVlLFxuICAgICAgICB0b3RhbFRvZG9zKCkpO1xuICAgIFxuICAgIHByb2plY3QuYWRkVG9kbyh0ZW1wVG9kb05hbWUpO1xuICAgIG5ld1RvZG9Gb3JtRGl2LnJlbW92ZSgpO1xuICAgIGRyYXdFeGlzdGluZ1RvZG9zKHBtLHByb2plY3QsIGRpc3BsYXlQYW5lbCk7XG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJwYWNrYWdlTWFuYWdlclwiLCBKU09OLnN0cmluZ2lmeShwbSkpO1xuICAgICAgfVxuICB9XG59O1xuZXhwb3J0IGRlZmF1bHQgY3JlYXRlTmV3VG9kb0Zvcm07XG4iLCJpbXBvcnQgZHJhd1Byb2plY3RzVG9MaXN0IGZyb20gXCIuL2RyYXdQcm9qZWN0c1RvTGlzdFwiO1xuY29uc3QgbG9hZFByb2plY3RzID0gKFxuICBwcm9qZWN0TWFuYWdlck9iamVjdCxcbiAgcHJvamVjdE1hbmFnZXJEaXYsXG4gIGRpc3BsYXlQYW5lbFxuKSA9PiB7XG4gIHByb2plY3RNYW5hZ2VyRGl2LmlubmVySFRNTCA9IFwiXCI7XG4gIGNvbnN0IHByb2pBcnJheSA9IHByb2plY3RNYW5hZ2VyT2JqZWN0LnByb2plY3RzO1xuICBwcm9qQXJyYXkuZm9yRWFjaCgocHJvamVjdCkgPT4ge1xuICAgIGNvbnN0IHRlbXBEaXYgPSBkcmF3UHJvamVjdHNUb0xpc3QoXG4gICAgICBwcm9qZWN0TWFuYWdlck9iamVjdCxcbiAgICAgIHByb2plY3QsXG4gICAgICBwcm9qZWN0LnRpdGxlLFxuICAgICAgcHJvamVjdC5pZCxcbiAgICAgIHByb2plY3RNYW5hZ2VyRGl2LFxuICAgICAgZGlzcGxheVBhbmVsXG4gICAgKTtcbiAgICBwcm9qZWN0LmRpdiA9IHRlbXBEaXY7XG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3BhY2thZ2VNYW5hZ2VyJyxKU09OLnN0cmluZ2lmeShwcm9qZWN0TWFuYWdlck9iamVjdCkpO1xuICB9KTtcbn07XG5leHBvcnQgZGVmYXVsdCBsb2FkUHJvamVjdHM7XG4iLCJpbXBvcnQgY3JlYXRlTmV3VG9kb0J1dHRvbiBmcm9tIFwiLi9uZXdUb2RvQnV0dG9uXCI7XG5pbXBvcnQgZHJhd0V4aXN0aW5nVG9kb3MgZnJvbSBcIi4vZHJhd0V4aXN0aW5nVG9kb3NcIjtcbmltcG9ydCByZW1vdmVFbGVtZW50IGZyb20gXCIuL3JlbW92ZUVsZW1lbnRcIjtcbmltcG9ydCBUb2RvIGZyb20gXCIuL1RvZG9cIjtcbmltcG9ydCBkcmF3QWxsVG9kb3MgZnJvbSBcIi4vZHJhd0FsbFRvZG9zXCI7XG5cbmNvbnN0IGRyYXdQcm9qZWN0c1RvTGlzdCA9IChcbiAgcG0sXG4gIHByb2plY3QsXG4gIHRpdGxlLFxuICBpZCxcbiAgcHJvak1hbkRpdixcbiAgZGlzcGxheVBhbmVsXG4pID0+IHtcbiAgY29uc3QgbmF2VGl0bGU9ZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI25hdi10aXRsZScpO1xuICBjb25zdCBzaWRlUGFuZWwgPSBwcm9qTWFuRGl2LnBhcmVudEVsZW1lbnQ7XG4gIGNvbnN0IGV4cGFuZEFycm93PWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNleHBhbmQtYXJyb3cnKTtcbiAgZXhwYW5kQXJyb3cub25jbGljayA9ICgpPT57XG4gICAgICBkaXNwbGF5UGFuZWwucGFyZW50RWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdleHBhbmQtcGFuZWwnKTtcbiAgICAgIHNpZGVQYW5lbC5jbGFzc0xpc3QucmVtb3ZlKCdkaXNwbGF5LW9wZW4nKTtcbiAgICAgIGRpc3BsYXlQYW5lbC5wYXJlbnRFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2Nsb3NlLXBhbmVsJyk7XG4gICAgICBzaWRlUGFuZWwuY2xhc3NMaXN0LmFkZCgnZGlzcGxheS1jbG9zZWQnKTtcbiAgfVxuICBpZihwcm9qZWN0LnRpdGxlIT09XCJBbGxcIilcbiAge1xuXG4gICAgbGV0IHByb2plY3REaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIGxldCBlZGl0QnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcbiAgICBcblxuICAgIGVkaXRCdXR0b24uY2xhc3NMaXN0LmFkZChcImVkaXQtcHJvamVjdFwiKTtcbiAgICBcbiAgICBsZXQgZWRpdEljb249ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW1nJyk7XG4gICAgZWRpdEljb24uY2xhc3NMaXN0LmFkZCgnZWRpdC1pY29uJyk7XG4gICAgZWRpdEJ1dHRvbi5hcHBlbmRDaGlsZChlZGl0SWNvbik7XG4gICAgcHJvamVjdERpdi5jbGFzc0xpc3QuYWRkKFwicHJvamVjdFwiKTtcbiAgICBwcm9qZWN0RGl2LmlkID0gXCJwcm9qZWN0LVwiICsgaWQ7XG4gICAgbGV0IHByb2plY3RUaXRsZUgxID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInBcIik7XG4gICAgcHJvamVjdFRpdGxlSDEuY2xhc3NMaXN0LmFkZChcInByb2plY3QtbmFtZVwiKTtcbiAgICBwcm9qZWN0VGl0bGVIMS50ZXh0Q29udGVudCA9IHByb2plY3QudGl0bGU7XG4gICAgbGV0IG5ld05hbWVJbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcbiAgICBuZXdOYW1lSW5wdXQuaWQgPSBcIm5ldy1uYW1lLWlucHV0XCI7XG4gICAgbmV3TmFtZUlucHV0LnZhbHVlID0gcHJvamVjdC50aXRsZTtcbiAgICBsZXQgcmVtb3ZlQnV0dG9uPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgIHJlbW92ZUJ1dHRvbi5jbGFzc0xpc3QuYWRkKCcucHJvamVjdC1yZW1vdmUtYnV0dG9uJyk7XG4gICAgcmVtb3ZlQnV0dG9uLnRleHRDb250ZW50PSdYJztcbiAgXG4gICAgcHJvamVjdERpdi5hcHBlbmRDaGlsZChwcm9qZWN0VGl0bGVIMSk7XG4gICAgbGV0IGJ1dHRvblBhbmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgYnV0dG9uUGFuZWwuY2xhc3NMaXN0LmFkZCgnYnV0dG9uLXBhbmVsJyk7XG4gICAgYnV0dG9uUGFuZWwuYXBwZW5kQ2hpbGQoZWRpdEJ1dHRvbik7XG4gICAgYnV0dG9uUGFuZWwuYXBwZW5kQ2hpbGQocmVtb3ZlQnV0dG9uKTtcbiAgICBwcm9qZWN0RGl2LmFwcGVuZENoaWxkKGJ1dHRvblBhbmVsKTtcbiAgICBcbiAgICBcbiAgICBwcm9qTWFuRGl2LmFwcGVuZENoaWxkKHByb2plY3REaXYpO1xuICBcbiAgICBcbiAgICBcbiAgICAgIHByb2plY3REaXYuYWRkRXZlbnRMaXN0ZW5lcignZHJvcCcsKGV2ZW50KT0+bW92ZVRvZG8oZXZlbnQscHJvamVjdCxwbSkpO1xuICAgICAgcmVtb3ZlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgIHJlbW92ZUVsZW1lbnQocG0sIHByb2plY3QuaWQpO1xuICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcInBhY2thZ2VNYW5hZ2VyXCIsIEpTT04uc3RyaW5naWZ5KHBtKSk7XG4gIFxuICAgICBwcm9qZWN0RGl2LnJlbW92ZSgpO1xuICAgfSk7XG4gIFxuICAgZWRpdEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICAgICBwcm9qZWN0VGl0bGVIMS5yZW1vdmUoKTtcbiAgICAgcHJvamVjdERpdi5hcHBlbmRDaGlsZChuZXdOYW1lSW5wdXQpO1xuICAgfSk7XG4gIFxuICAgbmV3TmFtZUlucHV0Lm9uYmx1ciA9ICgpID0+IHtcbiAgICAgcHJvamVjdFRpdGxlSDEudGV4dENvbnRlbnQgPSBuZXdOYW1lSW5wdXQudmFsdWU7XG4gICAgIHByb2plY3QudGl0bGUgPSBuZXdOYW1lSW5wdXQudmFsdWU7XG4gICAgIG5ld05hbWVJbnB1dC5yZW1vdmUoKTtcbiAgICAgcHJvamVjdERpdi5pbnNlcnRCZWZvcmUocHJvamVjdFRpdGxlSDEsIGJ1dHRvblBhbmVsKTtcbiAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJwYWNrYWdlTWFuYWdlclwiLCBKU09OLnN0cmluZ2lmeShwbSkpO1xuICAgfTtcbiAgIG5ld05hbWVJbnB1dC5hZGRFdmVudExpc3RlbmVyKFwia2V5dXBcIiwgKHsga2V5IH0pID0+IHtcbiAgICAgaWYgKGtleSA9PT0gXCJFbnRlclwiKSBuZXdOYW1lSW5wdXQuYmx1cigpO1xuICAgfSk7XG4gIFxuICAgcHJvamVjdFRpdGxlSDEuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uICgpIHtcbiAgICBpZihkaXNwbGF5UGFuZWwucGFyZW50RWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoJ2Nsb3NlLXBhbmVsJykpe1xuICAgICAgZGlzcGxheVBhbmVsLnBhcmVudEVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnY2xvc2UtcGFuZWwnKTtcbiAgICAgIHNpZGVQYW5lbC5jbGFzc0xpc3QucmVtb3ZlKCdkaXNwbGF5LWNsb3NlZCcpO1xuICAgIH1cbiAgICBkaXNwbGF5UGFuZWwucGFyZW50RWxlbWVudC5jbGFzc0xpc3QuYWRkKCdleHBhbmQtcGFuZWwnKTtcbiAgICBzaWRlUGFuZWwuY2xhc3NMaXN0LmFkZCgnZGlzcGxheS1vcGVuJyk7XG4gICAgIGRpc3BsYXlQYW5lbC5pbm5lckhUTUwgPSBcIlwiO1xuICAgICAxO1xuICAgICBcbiAgICAgbmF2VGl0bGUudGV4dENvbnRlbnQ9cHJvamVjdC50aXRsZTtcbiAgICAgZHJhd0V4aXN0aW5nVG9kb3MocG0sIHByb2plY3QsIGRpc3BsYXlQYW5lbCk7XG4gICAgIGxldCBuZXdGb3JtQnV0dG9uID0gY3JlYXRlTmV3VG9kb0J1dHRvbihwbSwgcHJvamVjdCwgZGlzcGxheVBhbmVsKTtcbiAgIH0pO1xuICAgcHJvamVjdERpdi5hZGRFdmVudExpc3RlbmVyKFwiZHJhZ292ZXJcIiwgKGV2ZW50KSA9PiB7XG4gICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICB9KTtcbiAgfVxuXG5lbHNlXG57XG4gIGxldCBwcm9qZWN0RGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgcHJvamVjdERpdi5jbGFzc0xpc3QuYWRkKFwicHJvamVjdFwiKTtcbiAgcHJvamVjdERpdi5pZCA9ICdhbGwtcHJvamVjdHMtY29udGFpbmVyJztcbiAgbGV0IHByb2plY3RUaXRsZUgxID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInBcIik7XG4gIHByb2plY3RUaXRsZUgxLmNsYXNzTGlzdC5hZGQoXCJwcm9qZWN0LW5hbWVcIik7XG4gIHByb2plY3RUaXRsZUgxLnRleHRDb250ZW50ID0gcHJvamVjdC50aXRsZTtcbiAgcHJvamVjdERpdi5hcHBlbmRDaGlsZChwcm9qZWN0VGl0bGVIMSk7XG4gIHByb2pNYW5EaXYuYXBwZW5kQ2hpbGQocHJvamVjdERpdik7XG4gIHByb2plY3RUaXRsZUgxLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgaWYoZGlzcGxheVBhbmVsLnBhcmVudEVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKCdjbG9zZS1wYW5lbCcpKXtcbiAgICAgIGRpc3BsYXlQYW5lbC5wYXJlbnRFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2Nsb3NlLXBhbmVsJyk7XG4gICAgICBzaWRlUGFuZWwuY2xhc3NMaXN0LnJlbW92ZSgnZGlzcGxheS1jbG9zZWQnKTtcbiAgICB9XG4gICAgZGlzcGxheVBhbmVsLnBhcmVudEVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnZXhwYW5kLXBhbmVsJyk7XG4gICAgc2lkZVBhbmVsLmNsYXNzTGlzdC5hZGQoJ2Rpc3BsYXktb3BlbicpO1xuICAgIGRpc3BsYXlQYW5lbC5pbm5lckhUTUwgPSBcIlwiO1xuICAgIG5hdlRpdGxlLnRleHRDb250ZW50PXByb2plY3QudGl0bGU7XG4gICAgZHJhd0FsbFRvZG9zKHBtLGRpc3BsYXlQYW5lbCk7XG4gICAgbGV0IG5ld0Zvcm1CdXR0b24gPSBjcmVhdGVOZXdUb2RvQnV0dG9uKHBtLCBwcm9qZWN0LCBkaXNwbGF5UGFuZWwpO1xuICB9KTtcbiAgXG59O1xuXG5jb25zdCBtb3ZlVG9kbz0oZXZlbnQscHJvamVjdCxwbSk9PntcbiAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICBjb25zdCB0b2RvVG9BZGQgPSBKU09OLnBhcnNlKGV2ZW50LmRhdGFUcmFuc2Zlci5nZXREYXRhKFwidGV4dFwiKSkudG9kb09iajtcbiAgIGNvbnN0IHNvdXJjZVByb2plY3QgPSBKU09OLnBhcnNlKFxuICAgICBldmVudC5kYXRhVHJhbnNmZXIuZ2V0RGF0YShcInRleHRcIilcbiAgICkucHJvamVjdE9iajtcbiAgIGNvbnN0IHRvZG8gPSBuZXcgVG9kbyhcbiAgICAgdG9kb1RvQWRkLl90aXRsZSxcbiAgICAgdG9kb1RvQWRkLl9kZXNjcmlwdGlvbixcbiAgICAgdG9kb1RvQWRkLl9kdWVEYXRlLFxuICAgICBcIiBcIixcbiAgICAgdG9kb1RvQWRkLl9pZFxuICAgKTtcbiAgIHByb2plY3QuYWRkVG9kbyh0b2RvKTtcbiAgIGxldCBhcnIgPSBwbS5nZXRBbGwoKTtcbiAgIGZvciAobGV0IHAgaW4gYXJyKSB7XG4gICAgIGlmIChhcnJbcF0uaWQgPT0gc291cmNlUHJvamVjdC5faWQpIHtcbiAgICAgICBsZXQgcHJvalJlZiA9IGFycltwXTtcbiAgICAgICByZW1vdmVFbGVtZW50KHByb2pSZWYsIHRvZG8uaWQpO1xuICAgICB9XG4gICB9XG4gICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcInBhY2thZ2VNYW5hZ2VyXCIsIEpTT04uc3RyaW5naWZ5KHBtKSk7XG5cbn1cbn1cbmV4cG9ydCBkZWZhdWx0IGRyYXdQcm9qZWN0c1RvTGlzdDtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vbWFpbi5zY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vbWFpbi5zY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IFByb2plY3RNYW5hZ2VyIGZyb20gXCIuL21vZHVsZXMvUHJvamVjdE1hbmFnZXJcIjtcbmltcG9ydCBUb2RvIGZyb20gXCIuL21vZHVsZXMvVG9kb1wiO1xuaW1wb3J0IFByb2plY3QgZnJvbSBcIi4vbW9kdWxlcy9Qcm9qZWN0XCI7XG5pbXBvcnQge1xuICBkcmF3UHJvamVjdE1hbmFnZXIsXG4gIGRyYXdQcm9qZWN0RGlzcGxheVBhbmVsLFxufSBmcm9tIFwiLi9tb2R1bGVzL2xvYWRNYWluXCI7XG5pbXBvcnQgZHJhd1Byb2plY3RzT25Mb2FkIGZyb20gXCIuL21vZHVsZXMvbG9hZFByb2plY3RzXCI7XG5pbXBvcnQgXCIuL21haW4uc2Nzc1wiO1xuaW1wb3J0IGxvYWRQcm9qZWN0cyBmcm9tIFwiLi9tb2R1bGVzL2xvYWRQcm9qZWN0c1wiO1xubGV0IHNhdmVkUHJvamVjdHM7XG5sZXQgcG0gPSBuZXcgUHJvamVjdE1hbmFnZXIoKTtcbmlmKGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwicGFja2FnZU1hbmFnZXJcIikhPW51bGwpe1xuXG4gICAgc2F2ZWRQcm9qZWN0cyA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJwYWNrYWdlTWFuYWdlclwiKSkucHJvamVjdHM7XG4gICAgc2F2ZWRQcm9qZWN0cy5mb3JFYWNoKChpdGVtLGluZGV4KT0+e1xuICAgICAgICBsZXQgcHJvaj1uZXcgUHJvamVjdChpdGVtLl90aXRsZSxpdGVtLl9pZCxpdGVtLl9kaXYpO1xuICAgICAgICBwbS5hZGRQcm9qKHByb2opO1xuICAgICAgICBsZXQgdG9kb3M9aXRlbS50b2RvcztcbiAgICAgICAgdG9kb3MuZm9yRWFjaCgodG9kbyk9PntcbiAgICAgICAgICAgIGxldCB0ZW1wVG9kbz1uZXcgVG9kbyh0b2RvLl90aXRsZSx0b2RvLl9kZXNjcmlwdGlvbix0b2RvLl9kdWVEYXRlLCcnLHRvZG8uX2lkKTtcbiAgICAgICAgICAgIHByb2ouYWRkVG9kbyh0ZW1wVG9kbyk7XG4gICAgICAgIH0pXG4gICAgICAgIFxuICAgIH0pXG4gICAgaWYocG0uZ2V0QWxsKCkubGVuZ3RoPDEpXG4gICAge1xuICAgICAgICBsZXQgZGVmYXVsdFByb2plY3Q9bmV3IFByb2plY3QoJ0FsbCcsMCk7XG4gICAgcG0uYWRkUHJvaihkZWZhdWx0UHJvamVjdCk7XG4gICAgfVxufVxuZWxzZXtcbiAgICBsZXQgcHJvaj1uZXcgUHJvamVjdCgnUHJvamVjdCcsMCk7XG4gICAgcG0uYWRkUHJvaihwcm9qKTtcbn1cblxuXG5cblxuY29uc3QgZGlzcGxheVBhbmVsID0gZHJhd1Byb2plY3REaXNwbGF5UGFuZWwoKTtcbmNvbnN0IHByb2plY3RNYW5hZ2VyRGl2ID0gZHJhd1Byb2plY3RNYW5hZ2VyKHBtLCBkaXNwbGF5UGFuZWwpO1xuXG4vL0RldmVsb3BtZW50IHNldCB1cCBzdHVmZlxuXG5cbmxvYWRQcm9qZWN0cyhwbSwgcHJvamVjdE1hbmFnZXJEaXYsIGRpc3BsYXlQYW5lbCk7XG5sb2NhbFN0b3JhZ2Uuc2V0SXRlbShcInBhY2thZ2VNYW5hZ2VyXCIsSlNPTi5zdHJpbmdpZnkocG0pKTtcblxuXG5cbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFByb2plY3RNYW5hZ2VyIHtcbiAgcHJvamVjdHMgPSBbXTtcbiAgYWRkUHJvaihwcm9qZWN0KSB7XG4gICAgdGhpcy5wcm9qZWN0cy5wdXNoKHByb2plY3QpO1xuICB9XG4gIGdldEFsbCgpIHtcbiAgICByZXR1cm4gdGhpcy5wcm9qZWN0cztcbiAgfVxufVxuIiwiaW1wb3J0IGNyZWF0ZU5ld1Byb2plY3RGb3JtIGZyb20gXCIuL25ld1Byb2plY3RGb3JtXCI7XG5cbmNvbnN0IGRyYXdQcm9qZWN0TWFuYWdlciA9IChwbSwgZGlzcGxheVBhbmVsKSA9PiB7XG4gXG4gIFxuXG4gIGxldCBzaWRlUGFuZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICBzaWRlUGFuZWwuY2xhc3NMaXN0LmFkZChcInNpZGUtcGFuZWxcIik7XG4gIGxldCBwcm9qZWN0UGFuZWxUaXRsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBwcm9qZWN0UGFuZWxUaXRsZS5pbm5lckhUTUw9XCI8aDIgaWQgPSBwYW5lbC10aXRsZT5Qcm9qZWN0czwvaDI+XCJcbiAgbGV0IHByb2plY3RNYW5hZ2VyRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgcHJvamVjdE1hbmFnZXJEaXYuY2xhc3NMaXN0LmFkZChcInByb2plY3QtbWFuYWdlclwiKTtcbiAgbGV0IGNyZWF0ZUZvcm1OZXdQcm9qZWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcbiAgY3JlYXRlRm9ybU5ld1Byb2plY3QuY2xhc3NMaXN0LmFkZChcIm5ldy1wcm9qZWN0LWJ1dHRvblwiKTtcbiAgY3JlYXRlRm9ybU5ld1Byb2plY3QudGV4dENvbnRlbnQgPSBcIisgQWRkIFByb2plY3RcIjtcbiAgLy8gZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChwcm9qZWN0TWFuYWdlckRpdik7XG4gIGxldCBtYWluUGFuZWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm1haW4tcGFuZWxcIik7XG4gIGNvbnN0IHBhcmVudE5vZGUgPSBkb2N1bWVudC5ib2R5O1xuICBzaWRlUGFuZWwuYXBwZW5kQ2hpbGQocHJvamVjdFBhbmVsVGl0bGUpO1xuICBzaWRlUGFuZWwuYXBwZW5kQ2hpbGQocHJvamVjdE1hbmFnZXJEaXYpO1xuICBzaWRlUGFuZWwuYXBwZW5kQ2hpbGQoY3JlYXRlRm9ybU5ld1Byb2plY3QpO1xuICBwYXJlbnROb2RlLmluc2VydEJlZm9yZShzaWRlUGFuZWwsIG1haW5QYW5lbCk7XG4gIGNyZWF0ZUZvcm1OZXdQcm9qZWN0LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgY3JlYXRlTmV3UHJvamVjdEZvcm0ocHJvamVjdE1hbmFnZXJEaXYsIHBtLCBkaXNwbGF5UGFuZWwpOyAvLy9ERVBFTkRcbiAgfSk7XG5cbiAgcmV0dXJuIHByb2plY3RNYW5hZ2VyRGl2O1xufTtcblxuY29uc3QgZHJhd1Byb2plY3REaXNwbGF5UGFuZWwgPSAoKSA9PiB7XG4gIGxldCBtYWluUGFuZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICBtYWluUGFuZWwuY2xhc3NMaXN0LmFkZChcIm1haW4tcGFuZWxcIik7XG4gIGxldCBuYXZCYXI9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIG5hdkJhci5pZD0nbmF2LWJhcic7XG4gIGxldCBleHBhbmRBcnJvdz1kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgZXhwYW5kQXJyb3cuaWQ9J2V4cGFuZC1hcnJvdyc7XG4gIGV4cGFuZEFycm93LnRleHRDb250ZW50PSc8JztcbiAgbGV0IGRpc3BsYXlQYW5lbERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gIGRpc3BsYXlQYW5lbERpdi5jbGFzc0xpc3QuYWRkKFwicHJvamVjdC1kaXNwbGF5LXBhbmVsXCIpO1xuICBsZXQgcHJvamVjdFRpdGxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuICBwcm9qZWN0VGl0bGUudGV4dENvbnRlbnQ9J1Byb2plY3QgVGl0bGUnO1xuICBwcm9qZWN0VGl0bGUuaWQ9J25hdi10aXRsZSc7XG4gIG5hdkJhci5hcHBlbmRDaGlsZChleHBhbmRBcnJvdyk7XG4gIG5hdkJhci5hcHBlbmRDaGlsZChwcm9qZWN0VGl0bGUpO1xuICBtYWluUGFuZWwuYXBwZW5kQ2hpbGQobmF2QmFyKTtcbiAgbWFpblBhbmVsLmFwcGVuZENoaWxkKGRpc3BsYXlQYW5lbERpdik7XG4gIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQobWFpblBhbmVsKTtcblxuICByZXR1cm4gZGlzcGxheVBhbmVsRGl2O1xufTtcbmV4cG9ydCB7IGRyYXdQcm9qZWN0TWFuYWdlciwgZHJhd1Byb2plY3REaXNwbGF5UGFuZWwgfTtcbiIsImltcG9ydCBsb2FkUHJvamVjdHMgZnJvbSBcIi4vbG9hZFByb2plY3RzXCI7XG5pbXBvcnQgUHJvamVjdCBmcm9tIFwiLi9Qcm9qZWN0XCI7XG5jb25zdCBjcmVhdGVOZXdQcm9qZWN0Rm9ybSA9IChwcm9qTWFuRGl2LCBwbSwgZGlzcGxheVBhbmVsKSA9PiB7XG4gXG4gIFxuICBcbiBcbiAgbGV0IG5hbWVJbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcbiAgbmFtZUlucHV0LnNldEF0dHJpYnV0ZShcInR5cGVcIiwgXCJ0ZXh0XCIpO1xuICBuYW1lSW5wdXQuaWQgPSBcImZvcm0tcHJvamVjdC1uYW1lXCI7XG4gIGxldCBjcmVhdGVCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xuICBjcmVhdGVCdXR0b24udGV4dENvbnRlbnQgPSBcIkNyZWF0ZVwiO1xuICBjcmVhdGVCdXR0b24uaWQ9XCJjcmVhdGUtYnV0dG9uXCI7XG4gIFxuICAvL2NyZWF0ZSBhIGZhbHNlIHByb2plY3QgZGl2IHRvIGFwcGVuZCB0by5cbiAgXG4gIGxldCBmYWxzZVByb2plY3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgZmFsc2VQcm9qZWN0LmlkPSdpbnB1dC1wbGFjZWhvbGRlcic7XG4gIGZhbHNlUHJvamVjdC5pbm5lckhUTUw9JzxwIGNsYXNzID0gXCJwcm9qZWN0LW5hbWVcIiA+bmV3IHByb2plY3Q8L3A+JztcbiAgZmFsc2VQcm9qZWN0LmNsYXNzTGlzdC5hZGQoJ3Byb2plY3QnKTtcbiAgZmFsc2VQcm9qZWN0LmNoaWxkcmVuWzBdLmFwcGVuZENoaWxkKG5hbWVJbnB1dCk7XG4gIGZhbHNlUHJvamVjdC5jaGlsZHJlblswXS5hcHBlbmRDaGlsZChjcmVhdGVCdXR0b24pO1xuICBwcm9qTWFuRGl2LmFwcGVuZENoaWxkKGZhbHNlUHJvamVjdCk7XG4gXG4gIG5hbWVJbnB1dC5mb2N1cygpO1xuICBcbiBcbiAgICBuYW1lSW5wdXQuYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCh7a2V5fSk9PntcbiAgICAgIGlmKGtleT09PVwiRW50ZXJcIil7XG4gICAgICAgIG5hbWVJbnB1dC5ibHVyKCk7XG4gICAgICB9XG4gICAgfSlcbiAgICBcbiAgICBjcmVhdGVCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgICAgIGlmKG5hbWVJbnB1dC52YWx1ZSE9PScnKVxuICAgICAgYWRkVG9ET00oKTtcbiAgICAgICBlbHNlXG4gICAgICAgICBuZXdQcm9qZWN0Rm9ybURpdi5yZW1vdmUoKTtcbiAgICB9KTtcbiAgICBuYW1lSW5wdXQub25ibHVyPSgpPT57XG4gICAgICBpZihuYW1lSW5wdXQudmFsdWUhPT0nJylcbiAgICAgIGFkZFRvRE9NKCk7XG4gICAgICAgZWxzZVxuICAgICAgICAgbmV3UHJvamVjdEZvcm1EaXYucmVtb3ZlKCk7XG4gICAgfVxuICAgIFxuICBcbiAgXG4gIFxuICBjb25zdCBhZGRUb0RPTSA9ICgpID0+IHtcbiAgICBcbiAgICBsZXQgdGVtcFByb2pOYW1lID0gbmV3IFByb2plY3QobmFtZUlucHV0LnZhbHVlLCBwbS5nZXRBbGwoKS5sZW5ndGgpO1xuICAgIHBtLmFkZFByb2oodGVtcFByb2pOYW1lKTtcbiAgICBsb2FkUHJvamVjdHMocG0sIHByb2pNYW5EaXYsIGRpc3BsYXlQYW5lbCk7XG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJwYWNrYWdlTWFuYWdlclwiLCBKU09OLnN0cmluZ2lmeShwbSkpO1xuICAgIFxuICB9XG59O1xuXG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZU5ld1Byb2plY3RGb3JtO1xuIl0sIm5hbWVzIjpbIl9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8wX19fIiwiVVJMIiwiX19fQ1NTX0xPQURFUl9FWFBPUlRfX18iLCJwdXNoIiwibW9kdWxlIiwiaWQiLCJfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8wX19fIiwiZXhwb3J0cyIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJsaXN0IiwidG9TdHJpbmciLCJ0aGlzIiwibWFwIiwiaXRlbSIsImNvbnRlbnQiLCJuZWVkTGF5ZXIiLCJjb25jYXQiLCJsZW5ndGgiLCJqb2luIiwiaSIsIm1vZHVsZXMiLCJtZWRpYSIsImRlZHVwZSIsInN1cHBvcnRzIiwibGF5ZXIiLCJ1bmRlZmluZWQiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiayIsIl9rIiwidXJsIiwib3B0aW9ucyIsIlN0cmluZyIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwidGVzdCIsInNsaWNlIiwiaGFzaCIsIm5lZWRRdW90ZXMiLCJyZXBsYWNlIiwiY3NzTWFwcGluZyIsImJ0b2EiLCJiYXNlNjQiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJkYXRhIiwic291cmNlTWFwcGluZyIsInN0eWxlc0luRE9NIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwicmVzdWx0IiwibW9kdWxlc1RvRG9tIiwiaWRDb3VudE1hcCIsImlkZW50aWZpZXJzIiwiYmFzZSIsImNvdW50IiwiaW5kZXhCeUlkZW50aWZpZXIiLCJvYmoiLCJjc3MiLCJzb3VyY2VNYXAiLCJyZWZlcmVuY2VzIiwidXBkYXRlciIsImFkZEVsZW1lbnRTdHlsZSIsImJ5SW5kZXgiLCJzcGxpY2UiLCJhcGkiLCJkb21BUEkiLCJ1cGRhdGUiLCJuZXdPYmoiLCJyZW1vdmUiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwiaW5kZXgiLCJuZXdMYXN0SWRlbnRpZmllcnMiLCJfaSIsIl9pbmRleCIsIm1lbW8iLCJpbnNlcnQiLCJzdHlsZSIsInRhcmdldCIsInN0eWxlVGFyZ2V0IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwid2luZG93IiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJoZWFkIiwiZSIsImdldFRhcmdldCIsIkVycm9yIiwiYXBwZW5kQ2hpbGQiLCJlbGVtZW50IiwiY3JlYXRlRWxlbWVudCIsInNldEF0dHJpYnV0ZXMiLCJhdHRyaWJ1dGVzIiwic3R5bGVFbGVtZW50Iiwibm9uY2UiLCJzZXRBdHRyaWJ1dGUiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJzdHlsZVRhZ1RyYW5zZm9ybSIsImFwcGx5IiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwicmVtb3ZlU3R5bGVFbGVtZW50Iiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJmaXJzdENoaWxkIiwiY3JlYXRlVGV4dE5vZGUiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwibSIsIm4iLCJnZXR0ZXIiLCJkIiwiYSIsImRlZmluaXRpb24iLCJrZXkiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiZyIsImdsb2JhbFRoaXMiLCJGdW5jdGlvbiIsInByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJzY3JpcHRVcmwiLCJpbXBvcnRTY3JpcHRzIiwibG9jYXRpb24iLCJjdXJyZW50U2NyaXB0Iiwic3JjIiwic2NyaXB0cyIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwicCIsImIiLCJiYXNlVVJJIiwic2VsZiIsImhyZWYiLCJuYyIsIlRvZG8iLCJjb25zdHJ1Y3RvciIsIlRpdGxlIiwiRGVzY3JpcHRpb24iLCJkdWVEYXRlIiwicHJpb3JpdHkiLCJfdGl0bGUiLCJfZGVzY3JpcHRpb24iLCJfZHVlRGF0ZSIsIl9wcmlvcml0eSIsInRpdGxlIiwiZGVzY3JpcHRpb24iLCJfaWQiLCJQcm9qZWN0IiwidG9kb3MiLCJkaXYiLCJfZGl2IiwiYWRkVG9kbyIsInRvZG8iLCJnZXRBbGwiLCJvYmplY3QiLCJhcnJheSIsInJlcXVpcmVkQXJncyIsInJlcXVpcmVkIiwiYXJncyIsIlR5cGVFcnJvciIsIl90eXBlb2YiLCJTeW1ib2wiLCJpdGVyYXRvciIsInRvRGF0ZSIsImFyZ3VtZW50IiwiYXJndW1lbnRzIiwiYXJnU3RyIiwiRGF0ZSIsImdldFRpbWUiLCJjb25zb2xlIiwid2FybiIsInN0YWNrIiwiTmFOIiwidG9JbnRlZ2VyIiwiZGlydHlOdW1iZXIiLCJudW1iZXIiLCJOdW1iZXIiLCJpc05hTiIsIk1hdGgiLCJjZWlsIiwiZmxvb3IiLCJzdGFydE9mVVRDSVNPV2VlayIsImRpcnR5RGF0ZSIsImRhdGUiLCJkYXkiLCJnZXRVVENEYXkiLCJkaWZmIiwic2V0VVRDRGF0ZSIsImdldFVUQ0RhdGUiLCJzZXRVVENIb3VycyIsImdldFVUQ0lTT1dlZWtZZWFyIiwieWVhciIsImdldFVUQ0Z1bGxZZWFyIiwiZm91cnRoT2ZKYW51YXJ5T2ZOZXh0WWVhciIsInNldFVUQ0Z1bGxZZWFyIiwic3RhcnRPZk5leHRZZWFyIiwiZm91cnRoT2ZKYW51YXJ5T2ZUaGlzWWVhciIsInN0YXJ0T2ZUaGlzWWVhciIsIk1JTExJU0VDT05EU19JTl9XRUVLIiwiZGVmYXVsdE9wdGlvbnMiLCJnZXREZWZhdWx0T3B0aW9ucyIsInN0YXJ0T2ZVVENXZWVrIiwiX3JlZiIsIl9yZWYyIiwiX3JlZjMiLCJfb3B0aW9ucyR3ZWVrU3RhcnRzT24iLCJfb3B0aW9ucyRsb2NhbGUiLCJfb3B0aW9ucyRsb2NhbGUkb3B0aW8iLCJfZGVmYXVsdE9wdGlvbnMkbG9jYWwiLCJfZGVmYXVsdE9wdGlvbnMkbG9jYWwyIiwid2Vla1N0YXJ0c09uIiwibG9jYWxlIiwiUmFuZ2VFcnJvciIsImdldFVUQ1dlZWtZZWFyIiwiX29wdGlvbnMkZmlyc3RXZWVrQ29uIiwiZmlyc3RXZWVrQ29udGFpbnNEYXRlIiwiZmlyc3RXZWVrT2ZOZXh0WWVhciIsImZpcnN0V2Vla09mVGhpc1llYXIiLCJhZGRMZWFkaW5nWmVyb3MiLCJ0YXJnZXRMZW5ndGgiLCJzaWduIiwib3V0cHV0IiwiYWJzIiwidG9rZW4iLCJzaWduZWRZZWFyIiwibW9udGgiLCJnZXRVVENNb250aCIsImdldFVUQ0hvdXJzIiwiZ2V0VVRDTWludXRlcyIsImdldFVUQ1NlY29uZHMiLCJudW1iZXJPZkRpZ2l0cyIsIm1pbGxpc2Vjb25kcyIsImdldFVUQ01pbGxpc2Vjb25kcyIsInBvdyIsIkciLCJsb2NhbGl6ZSIsImVyYSIsIndpZHRoIiwieSIsIm9yZGluYWxOdW1iZXIiLCJ1bml0IiwibGlnaHRGb3JtYXR0ZXJzIiwiWSIsInNpZ25lZFdlZWtZZWFyIiwid2Vla1llYXIiLCJSIiwidSIsIlEiLCJxdWFydGVyIiwiY29udGV4dCIsInEiLCJNIiwiTCIsInciLCJ3ZWVrIiwiZmlyc3RXZWVrIiwic3RhcnRPZlVUQ1dlZWtZZWFyIiwicm91bmQiLCJnZXRVVENXZWVrIiwiSSIsImlzb1dlZWsiLCJmb3VydGhPZkphbnVhcnkiLCJzdGFydE9mVVRDSVNPV2Vla1llYXIiLCJnZXRVVENJU09XZWVrIiwiRCIsImRheU9mWWVhciIsInRpbWVzdGFtcCIsInNldFVUQ01vbnRoIiwiZGlmZmVyZW5jZSIsImdldFVUQ0RheU9mWWVhciIsIkUiLCJkYXlPZldlZWsiLCJsb2NhbERheU9mV2VlayIsImMiLCJpc29EYXlPZldlZWsiLCJkYXlQZXJpb2RFbnVtVmFsdWUiLCJkYXlQZXJpb2QiLCJ0b0xvd2VyQ2FzZSIsImhvdXJzIiwiQiIsImgiLCJIIiwiSyIsInMiLCJTIiwiWCIsIl9sb2NhbGl6ZSIsInRpbWV6b25lT2Zmc2V0IiwiX29yaWdpbmFsRGF0ZSIsImdldFRpbWV6b25lT2Zmc2V0IiwiZm9ybWF0VGltZXpvbmVXaXRoT3B0aW9uYWxNaW51dGVzIiwiZm9ybWF0VGltZXpvbmUiLCJ4IiwiTyIsImZvcm1hdFRpbWV6b25lU2hvcnQiLCJ6IiwidCIsIm9yaWdpbmFsRGF0ZSIsIlQiLCJvZmZzZXQiLCJkaXJ0eURlbGltaXRlciIsImFic09mZnNldCIsIm1pbnV0ZXMiLCJkZWxpbWl0ZXIiLCJkYXRlTG9uZ0Zvcm1hdHRlciIsInBhdHRlcm4iLCJmb3JtYXRMb25nIiwidGltZUxvbmdGb3JtYXR0ZXIiLCJ0aW1lIiwiUCIsImRhdGVUaW1lRm9ybWF0IiwibWF0Y2hSZXN1bHQiLCJtYXRjaCIsImRhdGVQYXR0ZXJuIiwidGltZVBhdHRlcm4iLCJkYXRlVGltZSIsInByb3RlY3RlZERheU9mWWVhclRva2VucyIsInByb3RlY3RlZFdlZWtZZWFyVG9rZW5zIiwidGhyb3dQcm90ZWN0ZWRFcnJvciIsImZvcm1hdCIsImlucHV0IiwiZm9ybWF0RGlzdGFuY2VMb2NhbGUiLCJsZXNzVGhhblhTZWNvbmRzIiwib25lIiwib3RoZXIiLCJ4U2Vjb25kcyIsImhhbGZBTWludXRlIiwibGVzc1RoYW5YTWludXRlcyIsInhNaW51dGVzIiwiYWJvdXRYSG91cnMiLCJ4SG91cnMiLCJ4RGF5cyIsImFib3V0WFdlZWtzIiwieFdlZWtzIiwiYWJvdXRYTW9udGhzIiwieE1vbnRocyIsImFib3V0WFllYXJzIiwieFllYXJzIiwib3ZlclhZZWFycyIsImFsbW9zdFhZZWFycyIsImJ1aWxkRm9ybWF0TG9uZ0ZuIiwiZGVmYXVsdFdpZHRoIiwiZm9ybWF0cyIsImZ1bGwiLCJsb25nIiwibWVkaXVtIiwic2hvcnQiLCJmb3JtYXRSZWxhdGl2ZUxvY2FsZSIsImxhc3RXZWVrIiwieWVzdGVyZGF5IiwidG9kYXkiLCJ0b21vcnJvdyIsIm5leHRXZWVrIiwiYnVpbGRMb2NhbGl6ZUZuIiwiZGlydHlJbmRleCIsInZhbHVlc0FycmF5IiwiZm9ybWF0dGluZ1ZhbHVlcyIsImRlZmF1bHRGb3JtYXR0aW5nV2lkdGgiLCJfZGVmYXVsdFdpZHRoIiwiX3dpZHRoIiwidmFsdWVzIiwiYXJndW1lbnRDYWxsYmFjayIsIl9vcHRpb25zIiwicmVtMTAwIiwibmFycm93IiwiYWJicmV2aWF0ZWQiLCJ3aWRlIiwiYW0iLCJwbSIsIm1pZG5pZ2h0Iiwibm9vbiIsIm1vcm5pbmciLCJhZnRlcm5vb24iLCJldmVuaW5nIiwibmlnaHQiLCJidWlsZE1hdGNoRm4iLCJzdHJpbmciLCJtYXRjaFBhdHRlcm4iLCJtYXRjaFBhdHRlcm5zIiwiZGVmYXVsdE1hdGNoV2lkdGgiLCJ2YWx1ZSIsIm1hdGNoZWRTdHJpbmciLCJwYXJzZVBhdHRlcm5zIiwiZGVmYXVsdFBhcnNlV2lkdGgiLCJBcnJheSIsImlzQXJyYXkiLCJwcmVkaWNhdGUiLCJmaW5kSW5kZXgiLCJmaW5kS2V5IiwidmFsdWVDYWxsYmFjayIsInJlc3QiLCJwYXJzZVBhdHRlcm4iLCJwYXJzZUludCIsInBhcnNlUmVzdWx0IiwiYW55IiwiY29kZSIsImZvcm1hdERpc3RhbmNlIiwidG9rZW5WYWx1ZSIsImFkZFN1ZmZpeCIsImNvbXBhcmlzb24iLCJmb3JtYXRSZWxhdGl2ZSIsIl9kYXRlIiwiX2Jhc2VEYXRlIiwiZm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cCIsImxvbmdGb3JtYXR0aW5nVG9rZW5zUmVnRXhwIiwiZXNjYXBlZFN0cmluZ1JlZ0V4cCIsImRvdWJsZVF1b3RlUmVnRXhwIiwidW5lc2NhcGVkTGF0aW5DaGFyYWN0ZXJSZWdFeHAiLCJkaXJ0eUZvcm1hdFN0ciIsIl9yZWY0IiwiX29wdGlvbnMkbG9jYWxlMiIsIl9vcHRpb25zJGxvY2FsZTIkb3B0aSIsIl9yZWY1IiwiX3JlZjYiLCJfcmVmNyIsIl9vcHRpb25zJGxvY2FsZTMiLCJfb3B0aW9ucyRsb2NhbGUzJG9wdGkiLCJfZGVmYXVsdE9wdGlvbnMkbG9jYWwzIiwiX2RlZmF1bHRPcHRpb25zJGxvY2FsNCIsImZvcm1hdFN0ciIsImRlZmF1bHRMb2NhbGUiLCJpc0RhdGUiLCJpc1ZhbGlkIiwidXRjRGF0ZSIsIlVUQyIsImdldEZ1bGxZZWFyIiwiZ2V0TW9udGgiLCJnZXREYXRlIiwiZ2V0SG91cnMiLCJnZXRNaW51dGVzIiwiZ2V0U2Vjb25kcyIsImdldE1pbGxpc2Vjb25kcyIsImdldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMiLCJkaXJ0eUFtb3VudCIsImFtb3VudCIsImFkZE1pbGxpc2Vjb25kcyIsInN1Yk1pbGxpc2Vjb25kcyIsImZvcm1hdHRlck9wdGlvbnMiLCJzdWJzdHJpbmciLCJmaXJzdENoYXJhY3RlciIsImxvbmdGb3JtYXR0ZXIiLCJtYXRjaGVkIiwiZm9ybWF0dGVyIiwidXNlQWRkaXRpb25hbFdlZWtZZWFyVG9rZW5zIiwiaW5kZXhPZiIsInVzZUFkZGl0aW9uYWxEYXlPZlllYXJUb2tlbnMiLCJpc1Byb3RlY3RlZERheU9mWWVhclRva2VuIiwiZGlzcGxheVBhbmVsIiwicHJvamVjdCIsImV4cGFuZEFycm93Iiwic2lkZVBhbmVsIiwib25kcmFnb3ZlciIsInBhcmVudEVsZW1lbnQiLCJjbGFzc0xpc3QiLCJhZGQiLCJ0b2RvRGl2IiwidG9kb0NoZWNrYm94IiwidG9kb1RpdGxlIiwidGV4dENvbnRlbnQiLCJ0b2RvRHVlRGF0ZUg0IiwibmV3SW5wdXREYXRlIiwicmVtb3ZlQnV0dG9uIiwicmVtb3ZlQnV0dG9uQ29udGFpbmVyIiwiY2hlY2tib3hDb250YWluZXIiLCJuZXdJbnB1dFRleHQiLCJhZGRFdmVudExpc3RlbmVyIiwibG9jYWxTdG9yYWdlIiwic2V0SXRlbSIsImZvY3VzIiwib25ibHVyIiwiYmx1ciIsIm9uZHJhZ3N0YXJ0IiwiZXZlbnQiLCJ0b2RvT2JqIiwicHJvamVjdE9iaiIsImRhdGFUcmFuc2ZlciIsInNldERhdGEiLCJvbmRyYWdlbmQiLCJwcmV2ZW50RGVmYXVsdCIsInZhbHVlQXNEYXRlIiwiZm9yRWFjaCIsImFsbFRvZG9zIiwiY2hpbGRyZW4iLCJzb3J0IiwiY2hpbGROb2RlcyIsImlubmVySFRNTCIsInBhcmVudENvbnRhaW5lciIsImluc2VydEJlZm9yZSIsIm1wIiwiY3JlYXRlVG9kb0Zvcm1CdXR0b24iLCJuZXdUb2RvRm9ybURpdiIsIm5ld1RvZG9Gb3JtIiwidGl0bGVMYWJlbCIsInRpdGxlSW5wdXQiLCJkdWVEYXRlTGFiZWwiLCJkdWVEYXRlSW5wdXQiLCJwcmlvcml0eUxhYmVsIiwicHJpb3JpdHlJbnB1dCIsImNyZWF0ZUJ1dHRvbiIsImJvZHkiLCJhZGRUb0RPTSIsInRlbXBUb2RvTmFtZSIsInN1bSIsInRvdGFsVG9kb3MiLCJidXR0b24iLCJnZXRFbGVtZW50QnlJZCIsImNvbnRhaW5zIiwicHJvamVjdE1hbmFnZXJPYmplY3QiLCJwcm9qZWN0TWFuYWdlckRpdiIsInByb2plY3RzIiwidGVtcERpdiIsInByb2pNYW5EaXYiLCJuYXZUaXRsZSIsIm9uY2xpY2siLCJwcm9qZWN0RGl2IiwiZWRpdEJ1dHRvbiIsImVkaXRJY29uIiwicHJvamVjdFRpdGxlSDEiLCJuZXdOYW1lSW5wdXQiLCJidXR0b25QYW5lbCIsIm1vdmVUb2RvIiwidG9kb1RvQWRkIiwicGFyc2UiLCJnZXREYXRhIiwic291cmNlUHJvamVjdCIsImFyciIsInByb2pSZWYiLCJzYXZlZFByb2plY3RzIiwiYWRkUHJvaiIsImdldEl0ZW0iLCJwcm9qIiwidGVtcFRvZG8iLCJkZWZhdWx0UHJvamVjdCIsIm1haW5QYW5lbCIsIm5hdkJhciIsImRpc3BsYXlQYW5lbERpdiIsInByb2plY3RUaXRsZSIsImRyYXdQcm9qZWN0RGlzcGxheVBhbmVsIiwicHJvamVjdFBhbmVsVGl0bGUiLCJjcmVhdGVGb3JtTmV3UHJvamVjdCIsIm5hbWVJbnB1dCIsImZhbHNlUHJvamVjdCIsIm5ld1Byb2plY3RGb3JtRGl2IiwidGVtcFByb2pOYW1lIiwiZHJhd1Byb2plY3RNYW5hZ2VyIl0sInNvdXJjZVJvb3QiOiIifQ==