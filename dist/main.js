(()=>{"use strict";var e={192:(e,t,n)=>{n.d(t,{Z:()=>l});var o=n(537),r=n.n(o),i=n(645),a=n.n(i)()(r());a.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Roboto:wght@700&display=swap);"]),a.push([e.id,'body{display:flex;height:100vh;width:100%;font-family:"Roboto",sans-serif;font-weight:700;font-size:16pt}.side-panel{background-color:#3737ef;flex:1 1 auto;height:100%}.main-panel{flex:3 3 auto;border:2px solid #639;height:100%}.project-display-panel{display:flex;flex-direction:column;justify-content:center;align-items:center}.project{justify-content:center;align-items:center;display:flex}.project button{height:1rem}.todo{width:80%;display:flex;border:2px solid #000;justify-content:space-between}.title{position:relative;z-index:0;font-size:1.5rem;font-weight:700}.todo-new-title{position:absolute;left:0;width:100%;font-size:1.5rem}.create-project-form{border:2px solid #000;height:20%;position:absolute;top:50%;left:50%;background-color:gray}.create-todo-form{border:2px solid #000;height:20%;position:absolute;top:50%;left:50%;background-color:gray}',"",{version:3,sources:["webpack://./src/style.scss"],names:[],mappings:"AAEA,KACI,YAAA,CACA,YAAA,CACA,UAAA,CACA,+BAAA,CACA,eAAA,CACA,cAAA,CAGJ,YACI,wBAAA,CACA,aAAA,CACA,WAAA,CAIJ,YACI,aAAA,CACA,qBAAA,CACA,WAAA,CAGJ,uBACI,YAAA,CACA,qBAAA,CACA,sBAAA,CACA,kBAAA,CAEJ,SACI,sBAAA,CACA,kBAAA,CACA,YAAA,CACD,gBACC,WAAA,CAGJ,MACI,SAAA,CACA,YAAA,CACA,qBAAA,CACA,6BAAA,CAEJ,OACI,iBAAA,CACA,SAAA,CACA,gBAAA,CACA,eAAA,CAEJ,gBACI,iBAAA,CACA,MAAA,CACA,UAAA,CACA,gBAAA,CAEJ,qBACI,qBAAA,CACA,UAAA,CACA,iBAAA,CACA,OAAA,CACA,QAAA,CACA,qBAAA,CAGJ,kBACI,qBAAA,CACI,UAAA,CACA,iBAAA,CACA,OAAA,CACA,QAAA,CACA,qBAAA",sourcesContent:["@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@700&display=swap');\r\n\r\nbody{\r\n    display:flex;\r\n    height:100vh;\r\n    width:100%;\r\n    font-family:'Roboto',sans-serif;\r\n    font-weight:700;\r\n    font-size:16pt;\r\n}\r\n\r\n.side-panel{\r\n    background-color: rgb(55, 55, 239);\r\n    flex: 1 1 auto;\r\n    height:100%;\r\n}\r\n.project-manager{\r\n}\r\n.main-panel{\r\n    flex :3 3 auto;\r\n    border:2px solid rebeccapurple;\r\n    height:100%;\r\n\r\n}\r\n.project-display-panel{\r\n    display:flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n}\r\n.project{\r\n    justify-content: center;\r\n    align-items: center;\r\n    display:flex;\r\n   button{\r\n    height:1rem;\r\n   }\r\n}\r\n.todo{\r\n    width:80%;\r\n    display:flex;\r\n    border:2px solid black;\r\n    justify-content: space-between;\r\n}\r\n.title{\r\n    position:relative;\r\n    z-index: 0;\r\n    font-size:1.5rem;\r\n    font-weight:700;\r\n}\r\n.todo-new-title{\r\n    position:absolute;\r\n    left:0;\r\n    width:100%;\r\n    font-size:1.5rem;\r\n}\r\n.create-project-form{\r\n    border:2px solid black;\r\n    height:20%;\r\n    position:absolute;\r\n    top:50%;\r\n    left:50%;\r\n    background-color: gray;\r\n}\r\n\r\n.create-todo-form{\r\n    border: 2px solid black;\r\n        height: 20%;\r\n        position: absolute;\r\n        top: 50%;\r\n        left: 50%;\r\n        background-color: gray;\r\n}\r\n\r\n"],sourceRoot:""}]);const l=a},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",o=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),o&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),o&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,o,r,i){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(o)for(var l=0;l<this.length;l++){var d=this[l][0];null!=d&&(a[d]=!0)}for(var s=0;s<e.length;s++){var c=[].concat(e[s]);o&&a[c[0]]||(void 0!==i&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=i),n&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=n):c[2]=n),r&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=r):c[4]="".concat(r)),t.push(c))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),i="/*# ".concat(r," */");return[t].concat([i]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,o=0;o<t.length;o++)if(t[o].identifier===e){n=o;break}return n}function o(e,o){for(var i={},a=[],l=0;l<e.length;l++){var d=e[l],s=o.base?d[0]+o.base:d[0],c=i[s]||0,p="".concat(s," ").concat(c);i[s]=c+1;var u=n(p),A={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==u)t[u].references++,t[u].updater(A);else{var m=r(A,o);o.byIndex=l,t.splice(l,0,{identifier:p,updater:m,references:1})}a.push(p)}return a}function r(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,r){var i=o(e=e||[],r=r||{});return function(e){e=e||[];for(var a=0;a<i.length;a++){var l=n(i[a]);t[l].references--}for(var d=o(e,r),s=0;s<i.length;s++){var c=n(i[s]);0===t[c].references&&(t[c].updater(),t.splice(c,1))}i=d}}},569:e=>{var t={};e.exports=function(e,n){var o=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var o="";n.supports&&(o+="@supports (".concat(n.supports,") {")),n.media&&(o+="@media ".concat(n.media," {"));var r=void 0!==n.layer;r&&(o+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),o+=n.css,r&&(o+="}"),n.media&&(o+="}"),n.supports&&(o+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(o,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(o){var r=t[o];if(void 0!==r)return r.exports;var i=t[o]={id:o,exports:{}};return e[o](i,i.exports,n),i.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nc=void 0,(()=>{class e{constructor(e,t,n,o,r){this._title=e,this._description=t,this._dueDate=n,this._priority=o,this.id=r}get title(){return this._title}get description(){return this._description}get dueDate(){return this._dueDate}get priority(){return this._priority}get id(){return this._id}set title(e){this._title=e}set description(e){this._description=e}set dueDate(e){this._dueDate=e}set priority(e){this._priority=e}set id(e){this._id=e}}class t{todos=[];constructor(e,t,n){this._title=e,this._id=t,this._div=n}get title(){return this._title}set title(e){this._title=e}get id(){return this._id}get div(){return this._div}set div(e){this._div=e}addTodo(e){this.todos.push(e)}getAll(){return this.todos}}const o=(e,t,n)=>{n.innerHTML="",t.getAll().forEach((o=>{((e,t,n,o)=>{let r=document.createElement("div");r.classList.add("todo"),r.id="todo-"+e.id,r.setAttribute("draggable","true");let i=document.createElement("input");i.setAttribute("type","checkbox"),i.classList.add("todo-checkbox");let a=document.createElement("p");a.classList.add("title"),a.textContent=e.title;let l=document.createElement("h4");l.classList.add("description"),l.textContent=e.description;let d=document.createElement("h4");d.classList.add("due-date"),d.textContent=e.dueDate;let s=document.createElement("button");s.classList.add("remove-todo"),s.textContent="Remove",r.appendChild(i),r.appendChild(a),r.appendChild(d),r.appendChild(s),t.appendChild(r),s.addEventListener("click",(()=>{((e,t)=>{let n=e.getAll();for(let e in n)n[e].id==t&&n.splice(e,1)})(n,e.id),r.remove(),console.log(e.id),console.log(o.getAll()),localStorage.setItem("packageManager",JSON.stringify(o))}));let c=document.createElement("input");c.classList.add("todo-new-title"),c.value=e.title,a.addEventListener("click",(()=>{a.appendChild(c),c.focus()})),c.onblur=()=>{e.title=c.value,a.textContent=e.title,c.remove(),localStorage.setItem("packageManager",JSON.stringify(o))},c.addEventListener("keyup",(({key:e})=>{"Enter"===e&&c.blur()}))})(o,n,t,e)}))},r=(t,n,r)=>{const i=document.querySelector(".main-panel");let a=document.createElement("button");a.classList.add("create-todo-form-button"),a.id="todo-create-new",a.textContent="Create new Todo",a.addEventListener("click",(()=>{((t,n,r)=>{let i=document.createElement("div");i.classList.add("create-todo-form");let a=document.createElement("form"),l=document.createElement("label");l.setAttribute("for","form-todo-title"),l.textContent="Title";let d=document.createElement("input");d.setAttribute("type","text"),d.id="form-Todo-title";let s=document.createElement("label");s.setAttribute("for","form-todo-dueDate"),s.textContent="Due Date";let c=document.createElement("input");c.setAttribute("type","text"),c.id="form-todo-dueDate";let p=document.createElement("label");p.setAttribute("for","form-todo-priority"),p.textContent="Priority";let u=document.createElement("input");u.setAttribute("type","text"),u.id="form-todo-priority";let A=document.createElement("button");A.textContent="Create",A.classList.add("form-button-todo"),a.appendChild(l),a.appendChild(d),a.appendChild(s),a.appendChild(c),i.appendChild(a),i.appendChild(A),document.body.appendChild(i),A.addEventListener("click",(()=>{let a=new e(d.value," ",c.value,u.value,n.getAll().length);n.addTodo(a),i.remove(),o(t,n,r),localStorage.setItem("packageManager",JSON.stringify(t))}))})(t,n,r)}));let l=document.getElementById("todo-create-new");return document.body.contains(l)&&l.remove(),i.appendChild(a),a},i=(e,t,n)=>{t.innerHTML="",console.log("hello from loadProjects",e.projects);const i=e.projects;console.log("copied array",i),i.forEach((i=>{const a=((e,t,n,i,a,l)=>{let d=document.createElement("div"),s=document.createElement("button");s.classList.add("edit-project"),s.textContent="rename",d.classList.add("project"),d.id="project-"+i;let c=document.createElement("h1");c.classList.add("project-name"),c.textContent=t.title;let p=document.createElement("input");return p.id="new-name-input",p.value=t.title,s.addEventListener("click",(()=>{c.remove(),d.appendChild(p)})),p.onblur=()=>{c.textContent=p.value,t.title=p.value,p.remove(),d.insertBefore(c,s),localStorage.setItem("packageManager",JSON.stringify(e))},p.addEventListener("keyup",(({key:e})=>{"Enter"===e&&p.blur()})),c.addEventListener("click",(function(){l.innerHTML="",o(e,t,l),r(e,t,l)})),d.appendChild(c),d.appendChild(s),a.appendChild(d),d})(e,i,i.title,i.id,t,n);console.log("Named",i.title),i.div=a,localStorage.setItem("packageManager",e)}))};var a=n(379),l=n.n(a),d=n(795),s=n.n(d),c=n(569),p=n.n(c),u=n(565),A=n.n(u),m=n(216),f=n.n(m),C=n(589),h=n.n(C),g=n(192),v={};v.styleTagTransform=h(),v.setAttributes=A(),v.insert=p().bind(null,"head"),v.domAPI=s(),v.insertStyleElement=f(),l()(g.Z,v),g.Z&&g.Z.locals&&g.Z.locals;let b,y=new class{projects=[];addProj(e){this.projects.push(e)}getAll(){return this.projects}};console.log(y.getAll()),null!=localStorage.getItem("packageManager")&&(b=JSON.parse(localStorage.getItem("packageManager")).projects,console.log("saved proj",b),b.forEach(((n,o)=>{let r=new t(n._title,n._id,n._div);y.addProj(r),n.todos.forEach((t=>{console.log(t);let n=new e(t._title,t._description,t._dueDate,"",t._id);r.addTodo(n)}))})));const x=(()=>{let e=document.createElement("div");e.classList.add("main-panel");let t=document.createElement("div");return t.classList.add("project-display-panel"),e.appendChild(t),document.body.appendChild(e),t})(),E=((e,n)=>{let o=document.createElement("div");o.classList.add("side-panel");let r=document.createElement("div");r.classList.add("project-manager");let a=document.createElement("button");a.classList.add("new-project-button"),a.textContent="Create A New Project";let l=document.querySelector(".main-panel");const d=document.body;return o.appendChild(r),o.appendChild(a),d.insertBefore(o,l),a.addEventListener("click",(()=>{((e,n,o)=>{let r=document.createElement("div");r.classList.add("create-project-form");let a=document.createElement("form"),l=document.createElement("label");l.setAttribute("for","form-project-name"),l.textContent="Project Name";let d=document.createElement("input");d.setAttribute("type","text"),d.id="form-project-name";let s=document.createElement("button");s.textContent="Create",s.classList.add("form-button"),a.appendChild(l),a.appendChild(d),r.appendChild(a),r.appendChild(s),document.body.appendChild(r),s.addEventListener("click",(()=>{r.remove();let a=new t(d.value,n.getAll().length);n.addProj(a),i(n,e,o),localStorage.setItem("packageManager",JSON.stringify(n))}))})(r,e,n),console.log("button")})),r})(y,x);i(y,E,x),localStorage.setItem("packageManager",JSON.stringify(y))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,