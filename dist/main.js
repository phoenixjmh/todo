(()=>{"use strict";var e={192:(e,t,n)=>{n.d(t,{Z:()=>d});var r=n(537),o=n.n(r),i=n(645),a=n.n(i)()(o());a.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Roboto:wght@700&display=swap);"]),a.push([e.id,'body{display:flex;height:100vh;width:100%;font-family:"Roboto",sans-serif;font-weight:700;font-size:16pt}.side-panel{background-color:#3737ef;flex:1 1 auto;height:100%}.project-manager{border:2px solid red}.main-panel{flex:3 3 auto;border:2px solid #639;height:100%}.project-display-panel{display:flex;flex-direction:column;justify-content:center;align-items:center}.project{justify-content:center;align-items:center;display:flex}.project button{height:1rem}.todo{width:80%;display:flex;border:2px solid #000;justify-content:space-between}.title{position:relative;z-index:0;font-size:1.5rem;font-weight:700}.todo-new-title{position:absolute;left:0;width:100%;font-size:1.5rem}.create-project-form{border:2px solid #000;height:20%;position:absolute;top:50%;left:50%;background-color:gray}.create-todo-form{border:2px solid #000;height:20%;position:absolute;top:50%;left:50%;background-color:gray}',"",{version:3,sources:["webpack://./src/style.scss"],names:[],mappings:"AAEA,KACI,YAAA,CACA,YAAA,CACA,UAAA,CACA,+BAAA,CACA,eAAA,CACA,cAAA,CAGJ,YACI,wBAAA,CACA,aAAA,CACA,WAAA,CAEJ,iBACI,oBAAA,CAEJ,YACI,aAAA,CACA,qBAAA,CACA,WAAA,CAGJ,uBACI,YAAA,CACA,qBAAA,CACA,sBAAA,CACA,kBAAA,CAEJ,SACI,sBAAA,CACA,kBAAA,CACA,YAAA,CACD,gBACC,WAAA,CAGJ,MACI,SAAA,CACA,YAAA,CACA,qBAAA,CACA,6BAAA,CAEJ,OACI,iBAAA,CACA,SAAA,CACA,gBAAA,CACA,eAAA,CAEJ,gBACI,iBAAA,CACA,MAAA,CACA,UAAA,CACA,gBAAA,CAEJ,qBACI,qBAAA,CACA,UAAA,CACA,iBAAA,CACA,OAAA,CACA,QAAA,CACA,qBAAA,CAGJ,kBACI,qBAAA,CACI,UAAA,CACA,iBAAA,CACA,OAAA,CACA,QAAA,CACA,qBAAA",sourcesContent:["@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@700&display=swap');\r\n\r\nbody{\r\n    display:flex;\r\n    height:100vh;\r\n    width:100%;\r\n    font-family:'Roboto',sans-serif;\r\n    font-weight:700;\r\n    font-size:16pt;\r\n}\r\n\r\n.side-panel{\r\n    background-color: rgb(55, 55, 239);\r\n    flex: 1 1 auto;\r\n    height:100%;\r\n}\r\n.project-manager{\r\n    border:2px solid red;\r\n}\r\n.main-panel{\r\n    flex :3 3 auto;\r\n    border:2px solid rebeccapurple;\r\n    height:100%;\r\n\r\n}\r\n.project-display-panel{\r\n    display:flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n}\r\n.project{\r\n    justify-content: center;\r\n    align-items: center;\r\n    display:flex;\r\n   button{\r\n    height:1rem;\r\n   }\r\n}\r\n.todo{\r\n    width:80%;\r\n    display:flex;\r\n    border:2px solid black;\r\n    justify-content: space-between;\r\n}\r\n.title{\r\n    position:relative;\r\n    z-index: 0;\r\n    font-size:1.5rem;\r\n    font-weight:700;\r\n}\r\n.todo-new-title{\r\n    position:absolute;\r\n    left:0;\r\n    width:100%;\r\n    font-size:1.5rem;\r\n}\r\n.create-project-form{\r\n    border:2px solid black;\r\n    height:20%;\r\n    position:absolute;\r\n    top:50%;\r\n    left:50%;\r\n    background-color: gray;\r\n}\r\n\r\n.create-todo-form{\r\n    border: 2px solid black;\r\n        height: 20%;\r\n        position: absolute;\r\n        top: 50%;\r\n        left: 50%;\r\n        background-color: gray;\r\n}\r\n\r\n"],sourceRoot:""}]);const d=a},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,o,i){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(r)for(var d=0;d<this.length;d++){var l=this[d][0];null!=l&&(a[l]=!0)}for(var s=0;s<e.length;s++){var c=[].concat(e[s]);r&&a[c[0]]||(void 0!==i&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=i),n&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=n):c[2]=n),o&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=o):c[4]="".concat(o)),t.push(c))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */");return[t].concat([i]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var i={},a=[],d=0;d<e.length;d++){var l=e[d],s=r.base?l[0]+r.base:l[0],c=i[s]||0,p="".concat(s," ").concat(c);i[s]=c+1;var A=n(p),u={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==A)t[A].references++,t[A].updater(u);else{var m=o(u,r);r.byIndex=d,t.splice(d,0,{identifier:p,updater:m,references:1})}a.push(p)}return a}function o(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var i=r(e=e||[],o=o||{});return function(e){e=e||[];for(var a=0;a<i.length;a++){var d=n(i[a]);t[d].references--}for(var l=r(e,o),s=0;s<i.length;s++){var c=n(i[s]);0===t[c].references&&(t[c].updater(),t.splice(c,1))}i=l}}},569:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var i=t[r]={id:r,exports:{}};return e[r](i,i.exports,n),i.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nc=void 0,(()=>{class e{constructor(e,t,n,r,o){this._title=e,this._description=t,this._dueDate=n,this._priority=r,this.id=o}get title(){return this._title}get description(){return this._description}get dueDate(){return this._dueDate}get priority(){return this._priority}get id(){return this._id}set title(e){this._title=e}set description(e){this._description=e}set dueDate(e){this._dueDate=e}set priority(e){this._priority=e}set id(e){this._id=e}}class t{todos=[];constructor(e,t,n){this._title=e,this._id=t,this._div=n}get title(){return this._title}set title(e){this._title=e}get id(){return this._id}get div(){return this._div}set div(e){this._div=e}addTodo(e){this.todos.push(e)}getAll(){return this.todos}}const r=(e,t,n)=>{n.innerHTML="",t.getAll().forEach((r=>{((e,t,n,r)=>{let o=document.createElement("div");o.classList.add("todo"),o.id="todo-"+e.id,o.setAttribute("draggable","true");let i=document.createElement("input");i.setAttribute("type","checkbox"),i.classList.add("todo-checkbox");let a=document.createElement("p");a.classList.add("title"),a.textContent=e.title;let d=document.createElement("h4");d.classList.add("description"),d.textContent=e.description;let l=document.createElement("h4");l.classList.add("due-date"),l.textContent=e.dueDate;let s=document.createElement("button");s.classList.add("remove-todo"),s.textContent="Remove",o.appendChild(i),o.appendChild(a),o.appendChild(l),o.appendChild(s),t.appendChild(o),s.addEventListener("click",(()=>{((e,t)=>{let n=e.getAll();for(let e in n)n[e].id==t&&n.splice(e,1)})(n,e.id),o.remove(),console.log(e.id),console.log(r.getAll())}));let c=document.createElement("input");c.classList.add("todo-new-title"),c.value=e.title,a.addEventListener("click",(()=>{a.appendChild(c),c.focus()})),c.onblur=()=>{e.title=c.value,a.textContent=e.title,c.remove()},c.addEventListener("keyup",(({key:e})=>{"Enter"===e&&c.blur()}))})(r,n,t,e)}))},o=(t,n)=>{const o=document.querySelector(".main-panel");let i=document.createElement("button");i.classList.add("create-todo-form-button"),i.id="todo-create-new",i.textContent="Create new Todo",i.addEventListener("click",(()=>{((t,n)=>{let o=document.createElement("div");o.classList.add("create-todo-form");let i=document.createElement("form"),a=document.createElement("label");a.setAttribute("for","form-todo-title"),a.textContent="Title";let d=document.createElement("input");d.setAttribute("type","text"),d.id="form-Todo-title";let l=document.createElement("label");l.setAttribute("for","form-todo-dueDate"),l.textContent="Due Date";let s=document.createElement("input");s.setAttribute("type","text"),s.id="form-todo-dueDate";let c=document.createElement("label");c.setAttribute("for","form-todo-priority"),c.textContent="Priority";let p=document.createElement("input");p.setAttribute("type","text"),p.id="form-todo-priority";let A=document.createElement("button");A.textContent="Create",A.classList.add("form-button-todo"),i.appendChild(a),i.appendChild(d),i.appendChild(l),i.appendChild(s),o.appendChild(i),o.appendChild(A),document.body.appendChild(o),A.addEventListener("click",(()=>{let i=new e(d.value," ",s.value,p.value,t.getAll().length);t.addTodo(i),o.remove(),r(t,n)}))})(t,n)}));let a=document.getElementById("todo-create-new");return document.body.contains(a)&&a.remove(),o.appendChild(i),i},i=(e,t,n)=>{t.innerHTML="",e.getAll().forEach((i=>{const a=((e,t,n,i,a,d)=>{let l=document.createElement("div"),s=document.createElement("button");s.classList.add("edit-project"),s.textContent="rename",l.classList.add("project"),l.id="project-"+i;let c=document.createElement("h1");c.classList.add("project-name"),c.textContent=n;let p=document.createElement("input");return p.id="new-name-input",p.value=n,s.addEventListener("click",(()=>{c.remove(),l.appendChild(p)})),p.onblur=()=>{c.textContent=p.value,t.title=p.value,p.remove(),l.insertBefore(c,s)},p.addEventListener("keyup",(({key:e})=>{"Enter"===e&&p.blur()})),c.addEventListener("click",(function(){d.innerHTML="",r(e,t,d),o(t,d)})),l.appendChild(c),l.appendChild(s),a.appendChild(l),l})(e,i,i.title,i.id,t,n);i.div=a}))};var a=n(379),d=n.n(a),l=n(795),s=n.n(l),c=n(569),p=n.n(c),A=n(565),u=n.n(A),m=n(216),f=n.n(m),C=n(589),h=n.n(C),v=n(192),b={};b.styleTagTransform=h(),b.setAttributes=u(),b.insert=p().bind(null,"head"),b.domAPI=s(),b.insertStyleElement=f(),d()(v.Z,b),v.Z&&v.Z.locals&&v.Z.locals;let g=new class{projects=[];addProj(e){this.projects.push(e)}getAll(){return this.projects}};const y=(()=>{let e=document.createElement("div");e.classList.add("main-panel");let t=document.createElement("div");return t.classList.add("project-display-panel"),e.appendChild(t),document.body.appendChild(e),t})(),x=((e,n)=>{let r=document.createElement("div");r.classList.add("side-panel");let o=document.createElement("div");o.classList.add("project-manager");let a=document.createElement("button");a.classList.add("new-project-button"),a.textContent="Create A New Project";let d=document.querySelector(".main-panel");const l=document.body;return r.appendChild(o),r.appendChild(a),l.insertBefore(r,d),a.addEventListener("click",(()=>{((e,n,r)=>{let o=document.createElement("div");o.classList.add("create-project-form");let a=document.createElement("form"),d=document.createElement("label");d.setAttribute("for","form-project-name"),d.textContent="Project Name";let l=document.createElement("input");l.setAttribute("type","text"),l.id="form-project-name";let s=document.createElement("button");s.textContent="Create",s.classList.add("form-button"),a.appendChild(d),a.appendChild(l),o.appendChild(a),o.appendChild(s),document.body.appendChild(o),s.addEventListener("click",(()=>{o.remove();let a=new t(l.value,n.getAll().length);n.addProj(a),i(n,e,r)}))})(o,e,n),console.log("button")})),o})(g,y);document.querySelector(".main-panel");let E=new t("Grocery",0),w=new e("Eggs",0,0,0,0),j=new e("bacon",0,0,0,1);E.addTodo(w),E.addTodo(j),g.addProj(E);let L=new t("Hardware",1),B=new e("Nails",0,0,0,0),k=new e("Screws",0,0,0,1);L.addTodo(B),L.addTodo(k),g.addProj(L),i(g,x,y)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,