(()=>{"use strict";var e={192:(e,t,n)=>{n.d(t,{Z:()=>a});var o=n(537),r=n.n(o),i=n(645),d=n.n(i)()(r());d.push([e.id,"body{display:flex;height:100vh;width:100%}.project-manager{background-color:#3737ef;flex:1 1 auto;height:100%}.project-display-panel{flex:3 3 auto;border:2px solid #639;height:100%;display:flex;flex-direction:column;justify-content:center;align-items:center}.todo{width:80%;display:flex;border:2px solid #000;justify-content:space-between}.create-project-form{border:2px solid #000;height:20%;position:absolute;top:50%;left:50%;background-color:gray}.create-todo-form{border:2px solid #000;height:20%;position:absolute;top:50%;left:50%;background-color:gray}","",{version:3,sources:["webpack://./src/style.scss"],names:[],mappings:"AAAA,KACI,YAAA,CACA,YAAA,CACA,UAAA,CAEJ,iBACI,wBAAA,CACA,aAAA,CACA,WAAA,CAEJ,uBACI,aAAA,CACA,qBAAA,CACA,WAAA,CACA,YAAA,CACA,qBAAA,CACA,sBAAA,CACA,kBAAA,CAKJ,MACI,SAAA,CACA,YAAA,CACA,qBAAA,CACA,6BAAA,CAEJ,qBACI,qBAAA,CACA,UAAA,CACA,iBAAA,CACA,OAAA,CACA,QAAA,CACA,qBAAA,CAGJ,kBACI,qBAAA,CACI,UAAA,CACA,iBAAA,CACA,OAAA,CACA,QAAA,CACA,qBAAA",sourcesContent:["body{\r\n    display:flex;\r\n    height:100vh;\r\n    width:100%;\r\n}\r\n.project-manager{\r\n    background-color: rgb(55, 55, 239);\r\n    flex: 1 1 auto;\r\n    height:100%;\r\n}\r\n.project-display-panel{\r\n    flex :3 3 auto;\r\n    border:2px solid rebeccapurple;\r\n    height:100%;\r\n    display:flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n}\r\n.project{\r\n    \r\n}\r\n.todo{\r\n    width:80%;\r\n    display:flex;\r\n    border:2px solid black;\r\n    justify-content: space-between;\r\n}\r\n.create-project-form{\r\n    border:2px solid black;\r\n    height:20%;\r\n    position:absolute;\r\n    top:50%;\r\n    left:50%;\r\n    background-color: gray;\r\n}\r\n\r\n.create-todo-form{\r\n    border: 2px solid black;\r\n        height: 20%;\r\n        position: absolute;\r\n        top: 50%;\r\n        left: 50%;\r\n        background-color: gray;\r\n}\r\n\r\n"],sourceRoot:""}]);const a=d},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",o=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),o&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),o&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,o,r,i){"string"==typeof e&&(e=[[null,e,void 0]]);var d={};if(o)for(var a=0;a<this.length;a++){var c=this[a][0];null!=c&&(d[c]=!0)}for(var l=0;l<e.length;l++){var s=[].concat(e[l]);o&&d[s[0]]||(void 0!==i&&(void 0===s[5]||(s[1]="@layer".concat(s[5].length>0?" ".concat(s[5]):""," {").concat(s[1],"}")),s[5]=i),n&&(s[2]?(s[1]="@media ".concat(s[2]," {").concat(s[1],"}"),s[2]=n):s[2]=n),r&&(s[4]?(s[1]="@supports (".concat(s[4],") {").concat(s[1],"}"),s[4]=r):s[4]="".concat(r)),t.push(s))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),i="/*# ".concat(r," */");return[t].concat([i]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,o=0;o<t.length;o++)if(t[o].identifier===e){n=o;break}return n}function o(e,o){for(var i={},d=[],a=0;a<e.length;a++){var c=e[a],l=o.base?c[0]+o.base:c[0],s=i[l]||0,p="".concat(l," ").concat(s);i[l]=s+1;var u=n(p),A={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==u)t[u].references++,t[u].updater(A);else{var m=r(A,o);o.byIndex=a,t.splice(a,0,{identifier:p,updater:m,references:1})}d.push(p)}return d}function r(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,r){var i=o(e=e||[],r=r||{});return function(e){e=e||[];for(var d=0;d<i.length;d++){var a=n(i[d]);t[a].references--}for(var c=o(e,r),l=0;l<i.length;l++){var s=n(i[l]);0===t[s].references&&(t[s].updater(),t.splice(s,1))}i=c}}},569:e=>{var t={};e.exports=function(e,n){var o=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var o="";n.supports&&(o+="@supports (".concat(n.supports,") {")),n.media&&(o+="@media ".concat(n.media," {"));var r=void 0!==n.layer;r&&(o+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),o+=n.css,r&&(o+="}"),n.media&&(o+="}"),n.supports&&(o+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(o,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(o){var r=t[o];if(void 0!==r)return r.exports;var i=t[o]={id:o,exports:{}};return e[o](i,i.exports,n),i.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nc=void 0,(()=>{class e{constructor(e,t,n,o,r){this._title=e,this._description=t,this._dueDate=n,this._priority=o,this.id=r}get title(){return this._title}get description(){return this._description}get dueDate(){return this._dueDate}get priority(){return this._priority}get id(){return this._id}set title(e){this._title=e}set description(e){this._description=e}set dueDate(e){this._dueDate=e}set priority(e){this._priority=e}set id(e){this._id=e}}class t{todos=[];constructor(e,t,n){this._title=e,this._id=t,this._div=n}get title(){return this._title}set title(e){this._title=e}get id(){return this._id}get div(){return this._div}set div(e){this._div=e}addTodo(e){this.todos.push(e)}getAll(){return this.todos}}const o=(e,t)=>{let n=e.getAll();for(let e in n)n[e].id==t&&(console.log("ID match, Time to add remove function","Object matched was named",n[e].title),n.splice(n[e],1))},r=(e,t)=>{e.getAll().forEach((n=>{((e,t,n,r,i,d,a)=>{let c=document.createElement("div");c.classList.add("todo"),c.id="todo-"+i;let l=document.createElement("h4");l.classList.add("title"),l.textContent=e;let s=document.createElement("h4");s.classList.add("description"),s.textContent=t;let p=document.createElement("h4");p.classList.add("due-date"),p.textContent=n;let u=document.createElement("button");u.classList.add("remove-todo"),u.textContent="Remove",c.appendChild(l),c.appendChild(s),c.appendChild(p),c.appendChild(u),d.appendChild(c),u.addEventListener("click",(()=>{o(a,i),c.remove()}))})(n.title,n.description,n.dueDate,n.priority,n.id,t,e)}))},i=(t,n)=>{let r=document.createElement("div");r.classList.add("create-todo-form");let i=document.createElement("form"),d=document.createElement("label");d.setAttribute("for","form-todo-title"),d.textContent="Title";let a=document.createElement("input");a.setAttribute("type","text"),a.id="form-Todo-title";let c=document.createElement("label");c.setAttribute("for","form-todo-description"),c.textContent="Description";let l=document.createElement("input");l.setAttribute("type","text"),l.id="form-todo-description";let s=document.createElement("label");s.setAttribute("for","form-todo-dueDate"),s.textContent="Due Date";let p=document.createElement("input");p.setAttribute("type","text"),p.id="form-todo-dueDate";let u=document.createElement("label");u.setAttribute("for","form-todo-priority"),u.textContent="Priority";let A=document.createElement("input");A.setAttribute("type","text"),A.id="form-todo-priority";let m=document.createElement("button");m.textContent="Create",m.classList.add("form-button-todo"),i.appendChild(d),i.appendChild(a),i.appendChild(c),i.appendChild(l),i.appendChild(s),i.appendChild(p),r.appendChild(i),r.appendChild(m),document.body.appendChild(r),m.addEventListener("click",(()=>{let i=new e(a.value,l.value,p.value,A.value,t.getAll().length);t.addTodo(i),r.remove(),((e,t,n)=>{let r=document.createElement("div");r.classList.add("todo"),r.id="todo-"+e.id;let i=document.createElement("h4");i.classList.add("title"),i.textContent=e.title;let d=document.createElement("h4");d.classList.add("description"),d.textContent=e.description;let a=document.createElement("h4");a.classList.add("due-date"),a.textContent=e.dueDate;let c=document.createElement("button");c.classList.add("remove-todo"),c.textContent="Remove",r.appendChild(i),r.appendChild(d),r.appendChild(a),r.appendChild(c),t.appendChild(r),c.addEventListener("click",(()=>{o(n,e.id),r.remove()}))})(i,n,t),console.log(i.id)}))},d=(e,t)=>{let n=document.createElement("button");return n.classList.add("create-todo-form-button"),n.textContent="Create new Todo",n.addEventListener("click",(()=>{i(e,t)})),t.appendChild(n),n},a=(e,n,o)=>{let i=document.createElement("div");i.classList.add("create-project-form");let a=document.createElement("form"),c=document.createElement("label");c.setAttribute("for","form-project-name"),c.textContent="Project Name";let l=document.createElement("input");l.setAttribute("type","text"),l.id="form-project-name";let s=document.createElement("button");s.textContent="Create",s.classList.add("form-button"),a.appendChild(c),a.appendChild(l),i.appendChild(a),i.appendChild(s),document.body.appendChild(i),s.addEventListener("click",(()=>{i.remove();let a=new t(l.value,n.getAll().length);n.addProj(a),((e,t,n)=>{let o=document.createElement("div");o.classList.add("project"),o.id=e.id;let i=document.createElement("h1");i.classList.add("project-name"),i.textContent=e.title,o.appendChild(i),t.appendChild(o),e.div=o,o.addEventListener("click",(function(){n.innerHTML="",r(e,n),d(e,n)}))})(a,e,o)}))};var c=n(379),l=n.n(c),s=n(795),p=n.n(s),u=n(569),A=n.n(u),m=n(565),h=n.n(m),f=n(216),C=n.n(f),v=n(589),b=n.n(v),g=n(192),y={};y.styleTagTransform=b(),y.setAttributes=h(),y.insert=A().bind(null,"head"),y.domAPI=p(),y.insertStyleElement=C(),l()(g.Z,y),g.Z&&g.Z.locals&&g.Z.locals;let x=new class{projects=[];addProj(e){this.projects.push(e)}getAll(){return this.projects}};const E=(()=>{let e=document.createElement("div");return e.classList.add("project-display-panel"),document.body.appendChild(e),e})(),j=((e,t)=>{let n=document.createElement("div");n.classList.add("project-manager");let o=document.createElement("button");o.classList.add("new-project-button"),o.textContent="Create A New Project",n.appendChild(o);const r=document.querySelector(".project-display-panel");return document.body.insertBefore(n,r),o.addEventListener("click",(()=>{a(n,e,t),console.log("button")})),n})(x,E);let L=new t("Grocery",0),w=new e("Eggs",0,0,0,0),_=new e("bacon",0,0,0,1);L.addTodo(w),L.addTodo(_),x.addProj(L);let k=new t("Hardware",1),T=new e("Nails",0,0,0,0),B=new e("Screws",0,0,0,1);k.addTodo(T),k.addTodo(B),x.addProj(k),console.log(x),((e,t,n)=>{console.log("Hello from drawProjectsOnLoad, its",n),e.getAll().forEach((e=>{const o=((e,t,n,o,i)=>{let a=document.createElement("div");a.classList.add("project"),a.id="project-"+n;let c=document.createElement("h1");return c.classList.add("project-name"),c.textContent=t,console.log("Hello from drawExistingProjects to list its",i),a.addEventListener("click",(function(){i.innerHTML="",d(e,i),r(e,i)})),a.appendChild(c),o.appendChild(a),a})(e,e.title,e.id,t,n);e.div=o}))})(x,j,E),console.log(E)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,