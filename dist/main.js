(()=>{"use strict";var e={169:(e,t,n)=>{n.d(t,{Z:()=>u});var r=n(537),o=n.n(r),a=n(645),i=n.n(a),A=n(667),s=n.n(A),d=new URL(n(498),n.b),l=i()(o());l.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Roboto:wght@700&display=swap);"]),l.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Gruppo&display=swap);"]),l.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Open+Sans:ital,wght@0,300;0,400;0,500;0,600;0,700;0,800;1,400;1,500;1,600;1,700;1,800&display=swap);"]),l.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Gruppo&display=swap);"]),l.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Roboto:wght@700&display=swap);"]);var c=s()(d);l.push([e.id,'*{margin:0;font-family:"Open Sans",sans-serif;box-sizing:border-box}body{display:flex;justify-content:center;align-items:center;height:100vh;width:100vw;font-weight:700;font-size:18pt;background-color:#222}@keyframes expand{from{width:0vw;left:100%}to{width:100%;left:0}}@keyframes close{from{width:100vw;left:0}to{width:0vw;left:100%}}@keyframes openDisplay{from{position:relative;width:100vw;height:100%;right:0%;z-index:2}to{position:relative;width:0vw;right:100%;visibility:hidden}}@keyframes closeDisplay{from{position:relative;width:0vw;right:100%}to{position:relative;width:100vw;height:100%;right:0;z-index:2}}@media(max-width: 500px){.side-panel{background-color:#fff;width:100%;height:100%;position:relative;z-index:2}.display-open{animation-duration:200ms}.display-closed{animation-duration:200ms}#panel-title{padding:2rem;color:rgba(166,69,0,.9843137255);font-size:3rem}}.side-panel{background-color:#222;height:100%;width:100%;position:relative;z-index:2;display:flex;gap:2rem;flex-direction:column;align-items:center;background:#222}#panel-title{padding:2rem;text-align:center;color:rgba(166,69,0,.9843137255);font-size:3rem;text-shadow:1px 3px 5px rgba(0,0,0,.6)}.projman-header{width:80%}#projman-label{font-size:1.5rem;position:relative;top:1rem;color:rgba(166,69,0,.9843137255);text-shadow:1px 3px 5px rgba(0,0,0,.6)}.display-open{animation-name:openDisplay;animation-delay:0ms;animation-duration:300ms;animation-fill-mode:forwards}.display-closed{animation-name:closeDisplay;animation-delay:0ms;animation-duration:300ms;animation-fill-mode:forwards}.project-manager{display:flex;width:100%;flex-direction:column;justify-content:flex-start;gap:1rem;align-items:center}.project{text-shadow:1px 3px 5px rgba(0,0,0,.6);box-shadow:1px 3px 5px #000;justify-content:flex-start;align-items:center;padding:.5rem 1rem .5rem 1rem;display:flex;width:80%;color:rgba(166,69,0,.9843137255);border:1px solid rgba(166,69,0,.9843137255);border-radius:.5rem;transition:ease-in-out 150ms}.project .project-name{left:1rem;position:relative;text-align:center;font-size:1.4rem}.project .button-panel{position:absolute;z-index:3;left:70%;display:flex;gap:1rem}.project:hover{width:90%;height:3.5rem;transition:ease-in-out 150ms}#new-name-input{font-family:"Open Sans",sans-serif;font-size:1.4rem;font-weight:700;width:72%;background:#222;color:rgba(166,69,0,.9843137255);border-radius:.6rem;border:none;box-shadow:1px 2px 3px #000}.edit-project{appearance:none;background:none;border:1px solid rgba(166,69,0,.9843137255);border-radius:.4rem;height:24px;width:24px;border:none;box-shadow:1px 2px 3px #000;padding:.2rem}.edit-icon{width:17.6px;height:17.6px;color:rgba(166,69,0,.9843137255);background-color:rgba(166,69,0,.9843137255);mask-image:url('+c+');mask-size:2.9rem;mask-clip:border-box}.new-project-button{height:2rem;width:10rem;font-size:1rem;border-radius:.5rem;color:rgba(166,69,0,.9843137255);background:#222;appearance:none;background:none;border-radius:.4rem;border:none;text-shadow:1px 3px 5px rgba(0,0,0,.6);box-shadow:1px 2px 3px #000;padding:.2rem;transition:ease-in-out 150ms}.new-project-button:hover{height:2.5rem;width:12rem;transition:ease-in-out 150ms}.project-remove-button{appearance:none;background:none;border:none;border-radius:.4rem;height:24px;width:24px;padding:.1rem;color:rgba(166,69,0,.9843137255);font-family:"Open Sans",sans-serif;font-weight:700;font-size:.8rem;box-shadow:1px 2px 3px #000}#input-placeholder{flex-shrink:0;display:flex;justify-content:space-around}#form-project-name{font-family:"Open Sans",sans-serif;font-size:1.4rem;font-weight:700;width:72%;background:none;color:rgba(166,69,0,.9843137255);border-radius:.6rem;border:none;box-shadow:1px 2px 3px #000}#create-button{appearance:none;background:none;border:none;border-radius:.4rem;padding:.3rem;color:rgba(166,69,0,.9843137255);font-family:"Open Sans",sans-serif;font-weight:700;font-size:.8rem;box-shadow:1px 2px 3px #000}@keyframes expand{from{width:0vw;left:100%}to{width:100%;left:0}}@keyframes close{from{width:100vw;left:0}to{width:0vw;left:100%}}@keyframes openDisplay{from{position:relative;width:100vw;height:100%;right:0%;z-index:2}to{position:relative;width:0vw;right:100%;visibility:hidden}}@keyframes closeDisplay{from{position:relative;width:0vw;right:100%}to{position:relative;width:100vw;height:100%;right:0;z-index:2}}.main-panel{display:flex;flex-direction:column;justify-content:flex-start;gap:5rem;align-items:center;background-color:#222;color:rgba(166,69,0,.9843137255);position:relative;height:100%;width:0;left:100%;z-index:0}.expand-panel{animation-name:expand;animation-duration:300ms;animation-fill-mode:forwards}.close-panel{animation-name:close;animation-duration:300ms;animation-fill-mode:forwards}.project-display-panel{padding-top:5rem;width:100%;display:flex;flex-direction:column;justify-content:flex-start;gap:5%;align-items:center}#nav-bar{position:absolute;display:flex;justify-content:center;align-items:center;top:0%;height:3rem;width:100%;padding:1rem;overflow:visible;text-shadow:1px 3px 5px rgba(0,0,0,.6);box-shadow:1px 3px 5px #000}#expand-arrow{font-size:2rem;flex:1 1 auto}#nav-title{flex:5 5 auto}.todo{text-shadow:1px 3px 5px rgba(0,0,0,.6);box-shadow:1px 2px 3px #000;width:90%;padding:1rem;display:flex;border:1px solid rgba(166,69,0,.9843137255);justify-content:space-between;align-items:center;border-radius:.5rem}.checkbox-container{flex:1 1 auto;height:100%;display:flex;justify-content:center;align-items:center}.todo-checkbox{width:20px;height:20px;border:1px solid rgba(166,69,0,.9843137255);background:#222;border-radius:50%;appearance:none}input[type=checkbox]:checked{width:20px;height:20px;border:1px solid rgba(166,69,0,.9843137255);background:#ffa72e;background:radial-gradient(circle, rgba(166, 69, 0, 0.9843137255) 0%, rgba(166, 69, 0, 0.9843137255) 32%, rgb(0, 0, 0) 69%);border-radius:50%}.title{position:relative;z-index:0;font-size:1rem;font-weight:700;flex:3 3 auto;max-width:40%}.todo-new-title{position:absolute;background:#222;color:rgba(166,69,0,.9843137255);border:1px solid rgba(166,69,0,.9843137255);box-shadow:1px 2px 3px #000;font-size:1rem;font-weight:700;font-family:"Open Sans",sans-serif;top:0;left:0;width:100%;height:100%}.due-date{text-align:center;position:relative;z-index:0;font-size:1rem;flex:1 1 auto}.todo-new-date{position:absolute;left:0;width:85%}.remove-button-container{display:flex;justify-content:center;align-items:center}.remove-button-container .remove-todo{appearance:none;background:none;border-radius:50%;border:none;height:1.2rem;width:1.2rem;padding:.1rem;color:rgba(166,69,0,.9843137255);font-family:"Open Sans",sans-serif;font-weight:700;font-size:.8rem;box-shadow:1px 2px 3px #000}.create-todo-form{border:2px solid #000;width:80%;position:absolute;top:25%;left:10%;background-color:#222;display:flex;flex-direction:column;justify-content:flex-start;align-items:center;text-shadow:1px 3px 5px rgba(0,0,0,.6);box-shadow:1px 2px 3px #000;border:1px solid rgba(166,69,0,.9843137255);border-radius:.5rem}.create-todo-form #todo-form{padding:1.2rem;display:flex;flex-direction:column;justify-content:space-around;align-items:center;height:50%}.create-todo-form #todo-form label{color:rgba(166,69,0,.9843137255);font-size:1.5rem;width:100%}.create-todo-form #todo-form input{background:none;border:1px solid rgba(166,69,0,.9843137255);color:rgba(166,69,0,.9843137255);font-size:1.4rem;border-radius:.4rem}.create-todo-form #form-buttons-td{padding:1.2rem;width:100%;display:flex;justify-content:space-evenly}.create-todo-form #form-buttons-td button{height:2rem;width:10rem;font-size:1rem;border-radius:.5rem;color:rgba(166,69,0,.9843137255);background:#222;border:none;padding:.3rem;font-family:"Open Sans",sans-serif;font-weight:700;font-size:.8rem;box-shadow:1px 2px 3px #000}#todo-create-new{height:2rem;width:10rem;font-size:1rem;border:1px solid rgba(166,69,0,.9843137255);border-radius:.5rem;color:rgba(166,69,0,.9843137255);text-shadow:1px 3px 5px rgba(0,0,0,.6);background:#222;box-shadow:1px 2px 3px #000;transition:ease-in-out 150ms}#todo-create-new:hover{height:3rem;width:12rem;box-shadow:1px 4px 5px #000;transition:ease-in-out 150ms}',"",{version:3,sources:["webpack://./src/main.scss","webpack://./src/styles/animations.scss","webpack://./src/styles/projectPanel.scss","webpack://./src/styles/mainPanel.scss","webpack://./src/styles/todos.scss"],names:[],mappings:"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",sourcesContent:["@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@700&display=swap');\n@import './styles/animations.scss';\n@import url('https://fonts.googleapis.com/css2?family=Gruppo&display=swap');\n*{\n    margin:0;\n    font-family:'Open Sans',sans-serif;\n    box-sizing: border-box;\n}\nbody{\n    display:flex;\n    justify-content: center;\n    align-items: center;\n    height:100vh;\n    width:100vw;\n    font-weight:700;\n    font-size:18pt;\n    background-color: $bgColor;\n}\n@import './styles/projectPanel.scss';\n@import './styles/mainPanel.scss';\n@import './styles/todos.scss';\n\n\n","$pink-ish:rgba(255, 192, 203, 0.505);\n$goldish:rgba(251,235,215,1);\n$theme-font:#a64500fb;\n$bgColor:  rgb(34, 34, 34);\n$border:1px solid $theme-font;\n\n    @import url('https://fonts.googleapis.com/css2?family=Gruppo&display=swap');\n    @import url('https://fonts.googleapis.com/css2?family=Open+Sans:ital,wght@0,300;0,400;0,500;0,600;0,700;0,800;1,400;1,500;1,600;1,700;1,800&display=swap');\n\n@mixin animations{\n\n    @keyframes expand{\n        from{\n            width:0vw;\n        left: 100%;\n        }\n        to{\n            width:100%;\n        left:0;}\n    }\n    @keyframes close {\n        from{\n            width:100vw;\n        left:0;}\n        to{\n            width:0vw;\n            left:100%;\n    }\n    }\n    @keyframes openDisplay{\n        from{\n            position:relative;\n            width:100vw;\n            height:100%;\n            right:0%;\n            z-index: 2;\n        }\n        to{\n            position:relative;\n            width:0vw;\n            right:100%;\n            visibility: hidden;\n    \n        }\n    }\n    @keyframes closeDisplay{\n        from{\n            position:relative;\n            width:0vw;\n            right:100%;\n        }\n        to{\n            \n            position:relative;\n            width:100vw;\n            height:100%;\n            right:0;\n            z-index: 2;\n        }\n    }\n\n   \n\n}\n","@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@700&display=swap');\n\n@include animations;\n@media (max-width:500px){\n    .side-panel{\n        background-color:rgb(255, 255, 255);\n        width:100%;\n        height:100%;\n        position:relative;\n        z-index: 2;\n    }\n    .display-open{\n        animation-duration: 200ms;\n    }\n    .display-closed{\n        animation-duration: 200ms;\n    }\n\n    #panel-title{\n        padding:2rem;\n        color:$theme-font;\n        font-size:3rem;\n        \n    }\n\n\n\n\n\n\n\n\n}\n\n\n\n\n\n.side-panel{\n    background-color:$bgColor;\n    height:100%;\n    width:100%;\n    position:relative;\n    z-index: 2;\n    display:flex;\n    gap:2rem;\n    flex-direction: column;\n    align-items: center;\n    background: rgb(34, 34, 34);\n    \n    \n}\n#panel-title{\n    padding:2rem;\n    text-align: center;\n    color:$theme-font;\n    font-size:3rem;\n    text-shadow: 1px 3px 5px rgba(0,0,0,0.6);\n}\n.projman-header{\n    width:80%;\n}\n#projman-label{\n    font-size:1.5rem;\n    position:relative;\n    top:1rem;\n    color:$theme-font;\n    text-shadow: 1px 3px 5px rgba(0,0,0,0.6);\n\n}\n.display-open{\n    animation-name:openDisplay;\n    animation-delay:0ms;\n    animation-duration:300ms;\n    animation-fill-mode: forwards;\n}\n.display-closed{\n    animation-name:closeDisplay;\n    animation-delay:0ms;\n    animation-duration:300ms;\n    animation-fill-mode: forwards;\n}\n\n.project-manager{\n    display:flex;\n    width:100%;\n    flex-direction:column;\n    justify-content: flex-start;\n    gap:1rem;\n    align-items: center;\n}\n.project{\n    text-shadow: 1px 3px 5px rgba(0,0,0,0.6);\n    box-shadow: 1px 3px 5px black;\n    $pink-ish:rgba(255, 192, 203, 0.505);\n    $goldish:rgba(251,235,215,1);\n    justify-content: flex-start;\n    align-items: center;\n    padding: .5rem 1rem .5rem 1rem;\n    display:flex;\n    width:80%;\n    color:$theme-font;\n     border:$border;\n     border-radius: .5rem;\n    transition:ease-in-out 150ms;\n    .project-name{\n        left:1rem;\n        position: relative;\n        text-align: center;\n        font-size:1.4rem;\n\n    }\n   .button-panel{\n        position:absolute;\n        z-index:3;\n        left:70%;\n        display:flex;\n        gap:1rem;\n    \n   }\n}\n.project:hover{\n    width:90%;\n    height:3.5rem;\n    transition:ease-in-out 150ms;\n\n}\n#new-name-input{\n    font-family:'Open Sans',sans-serif;\n    font-size:1.4rem;\n    font-weight:700;\n    width:72%;\n    background:$bgColor;\n    color:$theme-font;\n    border-radius:.6rem;\n    border:none;\n    box-shadow:1px 2px 3px black;\n\n}\n.edit-project{\n    appearance:none;\n    background:none;\n    border:$border;\n    border-radius: .4rem;\n   height:24px;\n   width:24px;\n   border:none;\n   box-shadow:1px 2px 3px black;\n   padding:.2rem;\n}\n.edit-icon{\n    width:17.6px;\n    height:17.6px;\n    color:$theme-font;\n    background-color: $theme-font;\n    mask-image: url(./img/pencil.svg) ;\n    mask-size:2.9rem;\n    \n    mask-clip:border-box;\n    \n    \n    // -webkit-mask-size: 1rem;\n    // mask-size: 1rem;\n\n}\n\n.new-project-button{\n    height:2rem;\n    width:10rem;\n    font-size:1rem;\n    border-radius:.5rem;\n    color:$theme-font;\n    background: $bgColor;\n    appearance:none;\n    background:none;\n    border-radius: .4rem;\n   \n   border:none;\n   text-shadow: 1px 3px 5px rgba(0,0,0,0.6);\n    box-shadow: 1px 2px 3px black;\n   padding:.2rem;\n   transition:ease-in-out 150ms;\n\n}\n.new-project-button:hover{\n    height:2.5rem;\n    width:12rem;\n    transition:ease-in-out 150ms;\n}\n.project-remove-button{\n    appearance:none;\n        background:none;\n        border:none;\n        border-radius:.4rem;\n        height:24px;\n        width:24px;\n        padding:.1rem;\n        color:$theme-font;\n        font-family:'Open Sans', sans-serif;\n        font-weight:700;\n        font-size:.8rem;\n        box-shadow:1px 2px 3px black;\n}\n#input-placeholder{\n   flex-shrink:0;\n   display:flex;\n   justify-content: space-around;\n}\n#form-project-name{\n    font-family:'Open Sans',sans-serif;\n    font-size:1.4rem;\n    font-weight:700;\n    width:72%;\n    background:none;\n    color:$theme-font;\n    border-radius:.6rem;\n    border:none;\n    box-shadow:1px 2px 3px black;\n}\n#create-button{\n    appearance:none;\n        background:none;\n        border:none;\n        border-radius:.4rem;\n        padding:.3rem;\n        color:$theme-font;\n        font-family:'Open Sans', sans-serif;\n        font-weight:700;\n        font-size:.8rem;\n        box-shadow:1px 2px 3px black;\n}\n\n\n","@include animations;\n.main-panel{\n    display:flex;\n    flex-direction: column;\n    justify-content: flex-start;\n    gap:5rem;\n    align-items: center;\n    background-color: $bgColor;\n    color:$theme-font;\n    position:relative;\n    height:100%;\n    width:0;\n    left:100%;\n    z-index:0;\n\n}\n.expand-panel{\n    animation-name:expand;\n    animation-duration: 300ms;\n    animation-fill-mode: forwards;\n}\n.close-panel{\n    animation-name:close;\n    animation-duration: 300ms;\n    animation-fill-mode: forwards;\n}\n.project-display-panel{\n    \n    padding-top:5rem;\n    width:100%;\n    display:flex;\n    flex-direction: column;\n    justify-content: flex-start;\n    gap:5%;\n    align-items: center;\n}\n\n#nav-bar{\n    position:absolute;\n    display:flex;\n    justify-content: center;\n    align-items: center;\n    top:0%;\n    height:3rem;\n    width:100%;\n    padding:1rem;\n   \n    overflow: visible;\n    \n    text-shadow: 1px 3px 5px rgba(0,0,0,0.6);\n    box-shadow: 1px 3px 5px black;\n}\n\n#expand-arrow{\n    font-size:2rem;\n    flex:1 1 auto;\n}\n#nav-title{\n    flex :5 5 auto;\n}\n",".todo{\n    text-shadow: 1px 3px 5px rgba(0,0,0,0.6);\n    box-shadow: 1px 2px 3px black;\n    width:90%;\n    padding:1rem;\n    display:flex;\n    border:$border;\n    justify-content: space-between;\n    align-items: center;\n    border-radius:.5rem;\n}\n.checkbox-container{\n    flex:1 1 auto;\nheight:100%;\ndisplay:flex;\njustify-content: center;\nalign-items: center;\n}\n.todo-checkbox{\n    \n    width:20px;\n    height:20px;\n    border:$border;\n    background:$bgColor;\n    border-radius:50%;\n    appearance: none;\n  \n}\ninput[type='checkbox']:checked{\n    width:20px;\n    height:20px;\n    border:$border;\n    background: rgb(255,167,46);\n    background: radial-gradient(circle, $theme-font 0%,$theme-font 32%, rgba(0,0,0,1) 69%); \n    border-radius:50%;\n  \n}\n.title{\n    position:relative;\n    z-index: 0;\n    font-size:1rem;\n    font-weight:700;\n    flex: 3 3 auto;\n    max-width: 40%;\n}\n.todo-new-title{\n    position:absolute;\n    background:$bgColor;\n    color:$theme-font;\n    border:$border;\n    box-shadow: 1px 2px 3px black;\n    font-size:1rem;\n    font-weight:700;\n    font-family:'Open Sans',sans-serif;\n    top:0;\n    left:0;\n    width:100%;\n    height:100%;\n}\n.due-date{\n    text-align: center;\n    position: relative;\n        z-index: 0;\n        font-size:1rem;\n        flex: 1 1 auto;\n}\n.todo-new-date{\n    position: absolute;\n        left: 0;\n        width: 85%;\n}\n.remove-button-container{\n    display:flex;\n    justify-content: center;\n    align-items: center;\n    .remove-todo{\n        appearance:none;\n        background:none;\n        border-radius: 50%;\n        border:none;\n        height:1.2rem;\n        width:1.2rem;\n        padding:.1rem;\n        color:$theme-font;\n        font-family:'Open Sans', sans-serif;\n        font-weight:700;\n        font-size:.8rem;\n        box-shadow:1px 2px 3px black;\n        \n\n    }\n}\n\n.create-todo-form{\n    border: 2px solid black;\n        width:80%;\n        position: absolute;\n        top: 25%;\n        left: 10%;\n        background-color:$bgColor;\n        display:flex;\n        flex-direction:column;\n        justify-content: flex-start;\n        align-items: center;\n\n\n        text-shadow: 1px 3px 5px rgba(0,0,0,0.6);\n        box-shadow: 1px 2px 3px black;\n        border:$border;\n        border-radius:.5rem;\n\n\n        #todo-form{\n            padding:1.2rem;\n            display:flex;\n            flex-direction: column;\n            justify-content: space-around;\n            align-items: center;\n            height:50%;\n          \n            label{ \n                color:$theme-font;\n                font-size:1.5rem;\n                width:100%;\n            }\n\n            input{\n                background:none;\n                border:$border;\n                color:$theme-font;\n                font-size:1.4rem;\n                border-radius:.4rem;\n            }\n        }\n        #form-buttons-td{\n            padding:1.2rem;\n            width:100%;\n            display:flex;\n            justify-content: space-evenly;\n            button{\n                height:2rem;\n                width:10rem;\n                font-size:1rem;\n                border-radius:.5rem;\n                color:$theme-font;\n                background: $bgColor;\n                border:none;\n                \n                \n                padding:.3rem;\n                font-family:'Open Sans', sans-serif;\n                font-weight:700;\n                font-size:.8rem;\n                box-shadow:1px 2px 3px black;\n\n            }\n        }\n}\n\n#todo-create-new{\n    height:2rem;\n    width:10rem;\n    font-size:1rem;\n    border:$border;\n    border-radius:.5rem;\n    color:$theme-font;\n    text-shadow: 1px 3px 5px rgba(0,0,0,0.6);\n    background: $bgColor;\n    box-shadow: 1px 2px 3px black;\n\n    transition:ease-in-out 150ms;\n}\n#todo-create-new:hover{\n    height:3rem;\n    width:12rem;\n    box-shadow: 1px 4px 5px black;\n    transition:ease-in-out 150ms;\n\n\n}"],sourceRoot:""}]);const u=l},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var A=0;A<this.length;A++){var s=this[A][0];null!=s&&(i[s]=!0)}for(var d=0;d<e.length;d++){var l=[].concat(e[d]);r&&i[l[0]]||(void 0!==a&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=a),n&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=n):l[2]=n),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),t.push(l))}},t}},667:e=>{e.exports=function(e,t){return t||(t={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),/["'() \t\n]|(%20)/.test(e)||t.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */");return[t].concat([a]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var a={},i=[],A=0;A<e.length;A++){var s=e[A],d=r.base?s[0]+r.base:s[0],l=a[d]||0,c="".concat(d," ").concat(l);a[d]=l+1;var u=n(c),m={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==u)t[u].references++,t[u].updater(m);else{var C=o(m,r);r.byIndex=A,t.splice(A,0,{identifier:c,updater:C,references:1})}i.push(c)}return i}function o(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var a=r(e=e||[],o=o||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var A=n(a[i]);t[A].references--}for(var s=r(e,o),d=0;d<a.length;d++){var l=n(a[d]);0===t[l].references&&(t[l].updater(),t.splice(l,1))}a=s}}},569:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},498:(e,t,n)=>{e.exports=n.p+"e685ee29648b8ac619c0.svg"}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var a=t[r]={id:r,exports:{}};return e[r](a,a.exports,n),a.exports}n.m=e,n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");r.length&&(e=r[r.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),n.b=document.baseURI||self.location.href,n.nc=void 0,(()=>{class e{constructor(e,t,n,r,o){this._title=e,this._description=t,this._dueDate=n,this._priority=r,this.id=o}get title(){return this._title}get description(){return this._description}get dueDate(){return this._dueDate}get priority(){return this._priority}get id(){return this._id}set title(e){this._title=e}set description(e){this._description=e}set dueDate(e){this._dueDate=e}set priority(e){this._priority=e}set id(e){this._id=e}}class t{todos=[];constructor(e,t,n){this._title=e,this._id=t,this._div=n}get title(){return this._title}set title(e){this._title=e}get id(){return this._id}get div(){return this._div}set div(e){this._div=e}addTodo(e){this.todos.push(e)}getAll(){return this.todos}}const r=(e,t)=>{let n=e.getAll();for(let e in n)n[e].id==t&&n.splice(e,1)};function o(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function a(e){return a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a(e)}function i(e){return i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i(e)}function A(e){o(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"===i(e)&&"[object Date]"===t?new Date(e.getTime()):"number"==typeof e||"[object Number]"===t?new Date(e):("string"!=typeof e&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function s(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function d(e){o(1,arguments);var t=A(e),n=t.getUTCDay(),r=(n<1?7:0)+n-1;return t.setUTCDate(t.getUTCDate()-r),t.setUTCHours(0,0,0,0),t}function l(e){o(1,arguments);var t=A(e),n=t.getUTCFullYear(),r=new Date(0);r.setUTCFullYear(n+1,0,4),r.setUTCHours(0,0,0,0);var a=d(r),i=new Date(0);i.setUTCFullYear(n,0,4),i.setUTCHours(0,0,0,0);var s=d(i);return t.getTime()>=a.getTime()?n+1:t.getTime()>=s.getTime()?n:n-1}var c=6048e5;var u={};function m(){return u}function C(e,t){var n,r,a,i,d,l,c,u;o(1,arguments);var C=m(),p=s(null!==(n=null!==(r=null!==(a=null!==(i=null==t?void 0:t.weekStartsOn)&&void 0!==i?i:null==t||null===(d=t.locale)||void 0===d||null===(l=d.options)||void 0===l?void 0:l.weekStartsOn)&&void 0!==a?a:C.weekStartsOn)&&void 0!==r?r:null===(c=C.locale)||void 0===c||null===(u=c.options)||void 0===u?void 0:u.weekStartsOn)&&void 0!==n?n:0);if(!(p>=0&&p<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var f=A(e),h=f.getUTCDay(),g=(h<p?7:0)+h-p;return f.setUTCDate(f.getUTCDate()-g),f.setUTCHours(0,0,0,0),f}function p(e,t){var n,r,a,i,d,l,c,u;o(1,arguments);var p=A(e),f=p.getUTCFullYear(),h=m(),g=s(null!==(n=null!==(r=null!==(a=null!==(i=null==t?void 0:t.firstWeekContainsDate)&&void 0!==i?i:null==t||null===(d=t.locale)||void 0===d||null===(l=d.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==a?a:h.firstWeekContainsDate)&&void 0!==r?r:null===(c=h.locale)||void 0===c||null===(u=c.options)||void 0===u?void 0:u.firstWeekContainsDate)&&void 0!==n?n:1);if(!(g>=1&&g<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var b=new Date(0);b.setUTCFullYear(f+1,0,g),b.setUTCHours(0,0,0,0);var w=C(b,t),v=new Date(0);v.setUTCFullYear(f,0,g),v.setUTCHours(0,0,0,0);var x=C(v,t);return p.getTime()>=w.getTime()?f+1:p.getTime()>=x.getTime()?f:f-1}var f=6048e5;function h(e,t){for(var n=e<0?"-":"",r=Math.abs(e).toString();r.length<t;)r="0"+r;return n+r}const g=function(e,t){var n=e.getUTCFullYear(),r=n>0?n:1-n;return h("yy"===t?r%100:r,t.length)},b=function(e,t){var n=e.getUTCMonth();return"M"===t?String(n+1):h(n+1,2)},w=function(e,t){return h(e.getUTCDate(),t.length)},v=function(e,t){return h(e.getUTCHours()%12||12,t.length)},x=function(e,t){return h(e.getUTCHours(),t.length)},y=function(e,t){return h(e.getUTCMinutes(),t.length)},k=function(e,t){return h(e.getUTCSeconds(),t.length)},B=function(e,t){var n=t.length,r=e.getUTCMilliseconds();return h(Math.floor(r*Math.pow(10,n-3)),t.length)};var E={G:function(e,t,n){var r=e.getUTCFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return n.era(r,{width:"abbreviated"});case"GGGGG":return n.era(r,{width:"narrow"});default:return n.era(r,{width:"wide"})}},y:function(e,t,n){if("yo"===t){var r=e.getUTCFullYear(),o=r>0?r:1-r;return n.ordinalNumber(o,{unit:"year"})}return g(e,t)},Y:function(e,t,n,r){var o=p(e,r),a=o>0?o:1-o;return"YY"===t?h(a%100,2):"Yo"===t?n.ordinalNumber(a,{unit:"year"}):h(a,t.length)},R:function(e,t){return h(l(e),t.length)},u:function(e,t){return h(e.getUTCFullYear(),t.length)},Q:function(e,t,n){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"Q":return String(r);case"QQ":return h(r,2);case"Qo":return n.ordinalNumber(r,{unit:"quarter"});case"QQQ":return n.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(r,{width:"narrow",context:"formatting"});default:return n.quarter(r,{width:"wide",context:"formatting"})}},q:function(e,t,n){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"q":return String(r);case"qq":return h(r,2);case"qo":return n.ordinalNumber(r,{unit:"quarter"});case"qqq":return n.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(r,{width:"narrow",context:"standalone"});default:return n.quarter(r,{width:"wide",context:"standalone"})}},M:function(e,t,n){var r=e.getUTCMonth();switch(t){case"M":case"MM":return b(e,t);case"Mo":return n.ordinalNumber(r+1,{unit:"month"});case"MMM":return n.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(r,{width:"narrow",context:"formatting"});default:return n.month(r,{width:"wide",context:"formatting"})}},L:function(e,t,n){var r=e.getUTCMonth();switch(t){case"L":return String(r+1);case"LL":return h(r+1,2);case"Lo":return n.ordinalNumber(r+1,{unit:"month"});case"LLL":return n.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(r,{width:"narrow",context:"standalone"});default:return n.month(r,{width:"wide",context:"standalone"})}},w:function(e,t,n,r){var a=function(e,t){o(1,arguments);var n=A(e),r=C(n,t).getTime()-function(e,t){var n,r,a,i,A,d,l,c;o(1,arguments);var u=m(),f=s(null!==(n=null!==(r=null!==(a=null!==(i=null==t?void 0:t.firstWeekContainsDate)&&void 0!==i?i:null==t||null===(A=t.locale)||void 0===A||null===(d=A.options)||void 0===d?void 0:d.firstWeekContainsDate)&&void 0!==a?a:u.firstWeekContainsDate)&&void 0!==r?r:null===(l=u.locale)||void 0===l||null===(c=l.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==n?n:1),h=p(e,t),g=new Date(0);return g.setUTCFullYear(h,0,f),g.setUTCHours(0,0,0,0),C(g,t)}(n,t).getTime();return Math.round(r/f)+1}(e,r);return"wo"===t?n.ordinalNumber(a,{unit:"week"}):h(a,t.length)},I:function(e,t,n){var r=function(e){o(1,arguments);var t=A(e),n=d(t).getTime()-function(e){o(1,arguments);var t=l(e),n=new Date(0);return n.setUTCFullYear(t,0,4),n.setUTCHours(0,0,0,0),d(n)}(t).getTime();return Math.round(n/c)+1}(e);return"Io"===t?n.ordinalNumber(r,{unit:"week"}):h(r,t.length)},d:function(e,t,n){return"do"===t?n.ordinalNumber(e.getUTCDate(),{unit:"date"}):w(e,t)},D:function(e,t,n){var r=function(e){o(1,arguments);var t=A(e),n=t.getTime();t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0);var r=n-t.getTime();return Math.floor(r/864e5)+1}(e);return"Do"===t?n.ordinalNumber(r,{unit:"dayOfYear"}):h(r,t.length)},E:function(e,t,n){var r=e.getUTCDay();switch(t){case"E":case"EE":case"EEE":return n.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},e:function(e,t,n,r){var o=e.getUTCDay(),a=(o-r.weekStartsOn+8)%7||7;switch(t){case"e":return String(a);case"ee":return h(a,2);case"eo":return n.ordinalNumber(a,{unit:"day"});case"eee":return n.day(o,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(o,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(o,{width:"short",context:"formatting"});default:return n.day(o,{width:"wide",context:"formatting"})}},c:function(e,t,n,r){var o=e.getUTCDay(),a=(o-r.weekStartsOn+8)%7||7;switch(t){case"c":return String(a);case"cc":return h(a,t.length);case"co":return n.ordinalNumber(a,{unit:"day"});case"ccc":return n.day(o,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(o,{width:"narrow",context:"standalone"});case"cccccc":return n.day(o,{width:"short",context:"standalone"});default:return n.day(o,{width:"wide",context:"standalone"})}},i:function(e,t,n){var r=e.getUTCDay(),o=0===r?7:r;switch(t){case"i":return String(o);case"ii":return h(o,t.length);case"io":return n.ordinalNumber(o,{unit:"day"});case"iii":return n.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},a:function(e,t,n){var r=e.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(e,t,n){var r,o=e.getUTCHours();switch(r=12===o?"noon":0===o?"midnight":o/12>=1?"pm":"am",t){case"b":case"bb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(e,t,n){var r,o=e.getUTCHours();switch(r=o>=17?"evening":o>=12?"afternoon":o>=4?"morning":"night",t){case"B":case"BB":case"BBB":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(e,t,n){if("ho"===t){var r=e.getUTCHours()%12;return 0===r&&(r=12),n.ordinalNumber(r,{unit:"hour"})}return v(e,t)},H:function(e,t,n){return"Ho"===t?n.ordinalNumber(e.getUTCHours(),{unit:"hour"}):x(e,t)},K:function(e,t,n){var r=e.getUTCHours()%12;return"Ko"===t?n.ordinalNumber(r,{unit:"hour"}):h(r,t.length)},k:function(e,t,n){var r=e.getUTCHours();return 0===r&&(r=24),"ko"===t?n.ordinalNumber(r,{unit:"hour"}):h(r,t.length)},m:function(e,t,n){return"mo"===t?n.ordinalNumber(e.getUTCMinutes(),{unit:"minute"}):y(e,t)},s:function(e,t,n){return"so"===t?n.ordinalNumber(e.getUTCSeconds(),{unit:"second"}):k(e,t)},S:function(e,t){return B(e,t)},X:function(e,t,n,r){var o=(r._originalDate||e).getTimezoneOffset();if(0===o)return"Z";switch(t){case"X":return D(o);case"XXXX":case"XX":return T(o);default:return T(o,":")}},x:function(e,t,n,r){var o=(r._originalDate||e).getTimezoneOffset();switch(t){case"x":return D(o);case"xxxx":case"xx":return T(o);default:return T(o,":")}},O:function(e,t,n,r){var o=(r._originalDate||e).getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+S(o,":");default:return"GMT"+T(o,":")}},z:function(e,t,n,r){var o=(r._originalDate||e).getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+S(o,":");default:return"GMT"+T(o,":")}},t:function(e,t,n,r){var o=r._originalDate||e;return h(Math.floor(o.getTime()/1e3),t.length)},T:function(e,t,n,r){return h((r._originalDate||e).getTime(),t.length)}};function S(e,t){var n=e>0?"-":"+",r=Math.abs(e),o=Math.floor(r/60),a=r%60;if(0===a)return n+String(o);var i=t||"";return n+String(o)+i+h(a,2)}function D(e,t){return e%60==0?(e>0?"-":"+")+h(Math.abs(e)/60,2):T(e,t)}function T(e,t){var n=t||"",r=e>0?"-":"+",o=Math.abs(e);return r+h(Math.floor(o/60),2)+n+h(o%60,2)}const I=E;var M=function(e,t){switch(e){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});default:return t.date({width:"full"})}},j=function(e,t){switch(e){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});default:return t.time({width:"full"})}};const L={p:j,P:function(e,t){var n,r=e.match(/(P+)(p+)?/)||[],o=r[1],a=r[2];if(!a)return M(e,t);switch(o){case"P":n=t.dateTime({width:"short"});break;case"PP":n=t.dateTime({width:"medium"});break;case"PPP":n=t.dateTime({width:"long"});break;default:n=t.dateTime({width:"full"})}return n.replace("{{date}}",M(o,t)).replace("{{time}}",j(a,t))}};var O=["D","DD"],W=["YY","YYYY"];function J(e,t,n){if("YYYY"===e)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===e)throw new RangeError("Use `yy` instead of `YY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===e)throw new RangeError("Use `d` instead of `D` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===e)throw new RangeError("Use `dd` instead of `DD` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var z={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function P(e){return function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=t.width?String(t.width):e.defaultWidth;return e.formats[n]||e.formats[e.defaultWidth]}}const U={date:P({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:P({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:P({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var G={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function Y(e){return function(t,n){var r;if("formatting"===(null!=n&&n.context?String(n.context):"standalone")&&e.formattingValues){var o=e.defaultFormattingWidth||e.defaultWidth,a=null!=n&&n.width?String(n.width):o;r=e.formattingValues[a]||e.formattingValues[o]}else{var i=e.defaultWidth,A=null!=n&&n.width?String(n.width):e.defaultWidth;r=e.values[A]||e.values[i]}return r[e.argumentCallback?e.argumentCallback(t):t]}}const N={ordinalNumber:function(e,t){var n=Number(e),r=n%100;if(r>20||r<10)switch(r%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:Y({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:Y({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return e-1}}),month:Y({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:Y({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:Y({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function H(e){return function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=n.width,o=r&&e.matchPatterns[r]||e.matchPatterns[e.defaultMatchWidth],a=t.match(o);if(!a)return null;var i,A=a[0],s=r&&e.parsePatterns[r]||e.parsePatterns[e.defaultParseWidth],d=Array.isArray(s)?function(e,t){for(var n=0;n<e.length;n++)if(e[n].test(A))return n}(s):function(e,t){for(var n in e)if(e.hasOwnProperty(n)&&e[n].test(A))return n}(s);return i=e.valueCallback?e.valueCallback(d):d,{value:i=n.valueCallback?n.valueCallback(i):i,rest:t.slice(A.length)}}}var q,$={ordinalNumber:(q={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.match(q.matchPattern);if(!n)return null;var r=n[0],o=e.match(q.parsePattern);if(!o)return null;var a=q.valueCallback?q.valueCallback(o[0]):o[0];return{value:a=t.valueCallback?t.valueCallback(a):a,rest:e.slice(r.length)}}),era:H({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:H({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:H({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:H({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:H({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const R={code:"en-US",formatDistance:function(e,t,n){var r,o=z[e];return r="string"==typeof o?o:1===t?o.one:o.other.replace("{{count}}",t.toString()),null!=n&&n.addSuffix?n.comparison&&n.comparison>0?"in "+r:r+" ago":r},formatLong:U,formatRelative:function(e,t,n,r){return G[e]},localize:N,match:$,options:{weekStartsOn:0,firstWeekContainsDate:1}};var _=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,Q=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,F=/^'([^]*?)'?$/,K=/''/g,X=/[a-zA-Z]/;function Z(e,t,n){var r,i,d,l,c,u,C,p,f,h,g,b,w,v,x,y,k,B;o(2,arguments);var E=String(t),S=m(),D=null!==(r=null!==(i=null==n?void 0:n.locale)&&void 0!==i?i:S.locale)&&void 0!==r?r:R,T=s(null!==(d=null!==(l=null!==(c=null!==(u=null==n?void 0:n.firstWeekContainsDate)&&void 0!==u?u:null==n||null===(C=n.locale)||void 0===C||null===(p=C.options)||void 0===p?void 0:p.firstWeekContainsDate)&&void 0!==c?c:S.firstWeekContainsDate)&&void 0!==l?l:null===(f=S.locale)||void 0===f||null===(h=f.options)||void 0===h?void 0:h.firstWeekContainsDate)&&void 0!==d?d:1);if(!(T>=1&&T<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var M=s(null!==(g=null!==(b=null!==(w=null!==(v=null==n?void 0:n.weekStartsOn)&&void 0!==v?v:null==n||null===(x=n.locale)||void 0===x||null===(y=x.options)||void 0===y?void 0:y.weekStartsOn)&&void 0!==w?w:S.weekStartsOn)&&void 0!==b?b:null===(k=S.locale)||void 0===k||null===(B=k.options)||void 0===B?void 0:B.weekStartsOn)&&void 0!==g?g:0);if(!(M>=0&&M<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!D.localize)throw new RangeError("locale must contain localize property");if(!D.formatLong)throw new RangeError("locale must contain formatLong property");var j=A(e);if(!function(e){if(o(1,arguments),!function(e){return o(1,arguments),e instanceof Date||"object"===a(e)&&"[object Date]"===Object.prototype.toString.call(e)}(e)&&"number"!=typeof e)return!1;var t=A(e);return!isNaN(Number(t))}(j))throw new RangeError("Invalid time value");var z=function(e){var t=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return t.setUTCFullYear(e.getFullYear()),e.getTime()-t.getTime()}(j),P=function(e,t){return o(2,arguments),function(e,t){o(2,arguments);var n=A(e).getTime(),r=s(t);return new Date(n+r)}(e,-s(t))}(j,z),U={firstWeekContainsDate:T,weekStartsOn:M,locale:D,_originalDate:j};return E.match(Q).map((function(e){var t=e[0];return"p"===t||"P"===t?(0,L[t])(e,D.formatLong):e})).join("").match(_).map((function(r){if("''"===r)return"'";var o,a,i=r[0];if("'"===i)return(a=(o=r).match(F))?a[1].replace(K,"'"):o;var A,s=I[i];if(s)return null!=n&&n.useAdditionalWeekYearTokens||(A=r,-1===W.indexOf(A))||J(r,t,String(e)),null!=n&&n.useAdditionalDayOfYearTokens||!function(e){return-1!==O.indexOf(e)}(r)||J(r,t,String(e)),s(P,r,D.localize,U);if(i.match(X))throw new RangeError("Format string contains an unescaped latin alphabet character `"+i+"`");return r})).join("")}const V=(e,t,n,o)=>{const a=document.querySelector("#expand-arrow"),i=document.querySelector(".side-panel");a.ondragover=()=>{t.parentElement.classList.remove("expand-panel"),i.classList.remove("display-open"),t.parentElement.classList.add("close-panel"),i.classList.add("display-closed")};let A=document.createElement("div");A.classList.add("todo"),A.id="todo-"+e.id,A.setAttribute("draggable","true");let s=document.createElement("input");s.setAttribute("type","checkbox"),s.classList.add("todo-checkbox");let d=document.createElement("p");d.classList.add("title"),d.textContent=e.title;let l=document.createElement("p");l.classList.add("due-date"),l.textContent=e.dueDate;let c=document.createElement("input");c.setAttribute("type","date"),c.classList.add("todo-new-date"),c.value=e.dueDate;let u=document.createElement("button");u.classList.add("remove-todo"),u.textContent="X";let m=document.createElement("div");m.classList.add("remove-button-container"),m.appendChild(u);let C=document.createElement("div");C.classList.add("checkbox-container"),C.appendChild(s),A.appendChild(C),A.appendChild(d),A.appendChild(l),A.appendChild(m),t.appendChild(A);let p=document.createElement("input");return p.classList.add("todo-new-title"),p.value=e.title,u.addEventListener("click",(()=>{r(n,e.id),A.remove(),localStorage.setItem("packageManager",JSON.stringify(o))})),d.addEventListener("click",(()=>{d.appendChild(p),p.focus()})),p.onblur=()=>{e.title=p.value,d.textContent=e.title,p.remove(),localStorage.setItem("packageManager",JSON.stringify(o))},p.addEventListener("keyup",(({key:e})=>{"Enter"===e&&p.blur()})),A.ondragstart=t=>{const r={todoObj:e,projectObj:n};t.dataTransfer.setData("text",JSON.stringify(r))},A.ondragend=e=>{e.preventDefault(),te(o,n,t)},l.addEventListener("click",(()=>{l.appendChild(c),c.focus()})),c.onblur=()=>{if(""!==c.value){let t=Z(new Date(`${c.value}T00:00`),"MM/dd/yyyy");e.dueDate=t,l.valueAsDate=t,l.textContent=e.dueDate,localStorage.setItem("packageManager",JSON.stringify(o))}c.remove()},c.addEventListener("keyup",(({key:e})=>{"Enter"===e&&c.blur()})),A},ee=(e,t)=>{e.getAll().forEach((n=>{n.getAll().forEach((r=>{V(r,t,n,e)}))}));let n=t.children;n=Array.prototype.slice.call(n),n.sort(((e,t)=>new Date(e.childNodes[2].innerHTML)-new Date(t.childNodes[2].innerHTML)));let r=t;r.innerHTML="";for(let e=0;e<n.length;e++)"Set Date"!==n[e].childNodes[2]?r.appendChild(n[e]):r.insertBefore(n[e],r.firstChild)},te=(e,t,n)=>{n.innerHTML="","All"===t.title?ee(e,n):t.getAll().forEach((r=>{V(r,n,t,e)}))},ne=(t,n,r)=>{const o=document.querySelector(".main-panel");let a=document.createElement("button");a.classList.add("create-todo-form-button"),a.id="todo-create-new",a.textContent="Create new Todo",a.addEventListener("click",(()=>{((t,n,r)=>{let o=document.createElement("div");o.classList.add("create-todo-form");let a=document.createElement("form");a.id="todo-form";let i=document.createElement("label");i.setAttribute("for","form-todo-title"),i.textContent="todo:";let A=document.createElement("input");A.setAttribute("type","text"),A.id="form-Todo-title";let s=document.createElement("label");s.setAttribute("for","form-todo-dueDate"),s.textContent="Due Date";let d=document.createElement("input");d.setAttribute("type","date"),d.id="form-todo-dueDate";let l=document.createElement("label");l.setAttribute("for","form-todo-priority"),l.textContent="Priority";let c=document.createElement("input");c.setAttribute("type","text"),c.id="form-todo-priority";let u=document.createElement("button");u.textContent="+Add",u.classList.add("form-create-td");let m=document.createElement("button");m.textContent="Cancel",m.classList.add("form-remove-td");let C=document.createElement("div");C.id="form-buttons-td",C.appendChild(u),C.appendChild(m),a.appendChild(i),a.appendChild(A),o.appendChild(a),o.appendChild(C),document.body.appendChild(o),A.focus(),A.onblur=()=>{},a.addEventListener("submit",(e=>{e.preventDefault(),p()})),u.addEventListener("click",(()=>{p()}));const p=()=>{let a;if(a=""!==d.value?Z(new Date(`${d.value}T00:00`),"MM/dd/yyyy"):"Set Date",""!==A.value){let i=new e(A.value," ",a,c.value,(()=>{let e=0;return t.getAll().forEach((t=>{t.getAll().forEach((t=>e+=1))})),e})());n.addTodo(i),o.remove(),te(t,n,r),localStorage.setItem("packageManager",JSON.stringify(t))}}})(t,n,r)}));let i=document.getElementById("todo-create-new");return document.body.contains(i)&&i.remove(),o.appendChild(a),a},re=(t,n,o,a,i,A)=>{const s=document.querySelector("#nav-title"),d=i.parentElement;if(document.querySelector("#expand-arrow").onclick=()=>{A.parentElement.classList.remove("expand-panel"),d.classList.remove("display-open"),A.parentElement.classList.add("close-panel"),d.classList.add("display-closed")},"All"!==n.title){let e=document.createElement("div"),o=document.createElement("button");o.classList.add("edit-project");let c=document.createElement("img");c.classList.add("edit-icon"),o.appendChild(c),e.classList.add("project"),e.id="project-"+a;let u=document.createElement("p");u.classList.add("project-name"),u.textContent=n.title;let m=document.createElement("input");m.id="new-name-input",m.value=n.title;let C=document.createElement("button");C.classList.add("project-remove-button"),C.textContent="X",e.appendChild(u);let p=document.createElement("div");p.classList.add("button-panel"),p.appendChild(o),p.appendChild(C),e.appendChild(p),i.appendChild(e),e.addEventListener("drop",(e=>l(e,n,t))),C.addEventListener("click",(()=>{r(t,n.id),localStorage.setItem("packageManager",JSON.stringify(t)),e.remove()})),o.addEventListener("click",(()=>{u.remove(),e.appendChild(m),m.focus()})),m.onblur=()=>{u.textContent=m.value,n.title=m.value,m.remove(),e.insertBefore(u,p),localStorage.setItem("packageManager",JSON.stringify(t))},m.addEventListener("keyup",(({key:e})=>{"Enter"===e&&m.blur()})),e.addEventListener("click",(function(e){e.target!==this&&e.target!==u||(A.parentElement.classList.contains("close-panel")&&(A.parentElement.classList.remove("close-panel"),d.classList.remove("display-closed")),A.parentElement.classList.add("expand-panel"),d.classList.add("display-open"),A.innerHTML="",s.textContent=n.title,te(t,n,A),ne(t,n,A))})),e.addEventListener("dragover",(e=>{e.preventDefault()}))}else{let e=document.createElement("div");e.classList.add("project"),e.id="all-projects-container";let r=document.createElement("p");r.classList.add("project-name"),r.textContent=n.title,e.appendChild(r),i.appendChild(e),e.addEventListener("click",(function(){A.parentElement.classList.contains("close-panel")&&(A.parentElement.classList.remove("close-panel"),d.classList.remove("display-closed")),A.parentElement.classList.add("expand-panel"),d.classList.add("display-open"),A.innerHTML="",s.textContent=n.title,ee(t,A),ne(t,n,A)}))}const l=(t,n,o)=>{t.preventDefault();const a=JSON.parse(t.dataTransfer.getData("text")).todoObj,i=JSON.parse(t.dataTransfer.getData("text")).projectObj,A=new e(a._title,a._description,a._dueDate," ",a._id);n.addTodo(A);let s=o.getAll();for(let e in s)if(s[e].id==i._id){let t=s[e];r(t,A.id)}localStorage.setItem("packageManager",JSON.stringify(o))}},oe=(e,t,n)=>{t.innerHTML="",e.projects.forEach((r=>{const o=re(e,r,r.title,r.id,t,n);r.div=o,localStorage.setItem("packageManager",JSON.stringify(e))}))};var ae=n(379),ie=n.n(ae),Ae=n(795),se=n.n(Ae),de=n(569),le=n.n(de),ce=n(565),ue=n.n(ce),me=n(216),Ce=n.n(me),pe=n(589),fe=n.n(pe),he=n(169),ge={};ge.styleTagTransform=fe(),ge.setAttributes=ue(),ge.insert=le().bind(null,"head"),ge.domAPI=se(),ge.insertStyleElement=Ce(),ie()(he.Z,ge),he.Z&&he.Z.locals&&he.Z.locals;let be,we=new class{projects=[];addProj(e){this.projects.push(e)}getAll(){return this.projects}};if(null!=localStorage.getItem("packageManager")){if(be=JSON.parse(localStorage.getItem("packageManager")).projects,be.forEach(((n,r)=>{let o=new t(n._title,n._id,n._div);we.addProj(o),n.todos.forEach((t=>{let n=new e(t._title,t._description,t._dueDate,"",t._id);o.addTodo(n)}))})),we.getAll().length<1){let e=new t("All",0);we.addProj(e)}}else{let e=new t("Project",0);we.addProj(e)}const ve=(()=>{let e=document.createElement("div");e.classList.add("main-panel");let t=document.createElement("div");t.id="nav-bar";let n=document.createElement("div");n.id="expand-arrow",n.textContent="<";let r=document.createElement("div");r.classList.add("project-display-panel");let o=document.createElement("p");return o.textContent="Project Title",o.id="nav-title",t.appendChild(n),t.appendChild(o),e.appendChild(t),e.appendChild(r),document.body.appendChild(e),r})(),xe=((e,n)=>{let r=document.createElement("div");r.classList.add("side-panel");let o=document.createElement("div");o.classList.add("projman-header"),o.innerHTML="<h2 id = panel-title>Todo-App</h2> <p id ='projman-label'>Projects</p>";let a=document.createElement("div");a.classList.add("project-manager");let i=document.createElement("button");i.classList.add("new-project-button"),i.textContent="+ Add Project";let A=document.querySelector(".main-panel");const s=document.body;return r.appendChild(o),r.appendChild(a),r.appendChild(i),s.insertBefore(r,A),i.addEventListener("click",(()=>{((e,n,r)=>{let o=document.createElement("input");o.setAttribute("type","text"),o.id="form-project-name";let a=document.createElement("button");a.textContent="+ Add",a.id="create-button";let i=document.createElement("div");i.id="input-placeholder",i.classList.add("project"),i.appendChild(o),i.appendChild(a),e.appendChild(i),o.focus(),o.addEventListener("keyup",(({key:e})=>{"Enter"===e&&o.blur()})),a.addEventListener("click",(()=>{""!==o.value?A():i.remove()})),o.onblur=()=>{""!==o.value&&A()};const A=()=>{let a=new t(o.value,n.getAll().length);n.addProj(a),oe(n,e,r),localStorage.setItem("packageManager",JSON.stringify(n))}})(a,e,n)})),a})(we,ve);oe(we,xe,ve),localStorage.setItem("packageManager",JSON.stringify(we))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,