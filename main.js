(()=>{"use strict";var e={192:(e,t,n)=>{n.d(t,{Z:()=>d});var o=n(537),r=n.n(o),a=n(645),i=n.n(a)()(r());i.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Roboto:wght@700&display=swap);"]),i.push([e.id,'body{display:flex;height:100vh;width:100%;font-family:"Roboto",sans-serif;font-weight:700;font-size:16pt}.side-panel{background-color:#3737ef;flex:1 1 auto;height:100%}.main-panel{flex:3 3 auto;border:2px solid #639;height:100%}.project-display-panel{display:flex;flex-direction:column;justify-content:center;align-items:center}.project{justify-content:center;align-items:center;display:flex}.project button{height:1rem}.todo{width:80%;display:flex;border:2px solid #000;justify-content:space-between}.title{position:relative;z-index:0;font-size:1.5rem;font-weight:700}.todo-new-title{position:absolute;left:0;width:100%;font-size:1.5rem}.due-date{position:relative;z-index:0;font-size:1.5rem;font-weight:700}.todo-new-date{position:absolute;left:0;width:100%;font-size:1.5rem}.create-project-form{border:2px solid #000;height:20%;position:absolute;top:50%;left:50%;background-color:gray}.create-todo-form{border:2px solid #000;height:20%;position:absolute;top:50%;left:50%;background-color:gray}',"",{version:3,sources:["webpack://./src/style.scss"],names:[],mappings:"AAEA,KACI,YAAA,CACA,YAAA,CACA,UAAA,CACA,+BAAA,CACA,eAAA,CACA,cAAA,CAGJ,YACI,wBAAA,CACA,aAAA,CACA,WAAA,CAIJ,YACI,aAAA,CACA,qBAAA,CACA,WAAA,CAGJ,uBACI,YAAA,CACA,qBAAA,CACA,sBAAA,CACA,kBAAA,CAEJ,SACI,sBAAA,CACA,kBAAA,CACA,YAAA,CACD,gBACC,WAAA,CAGJ,MACI,SAAA,CACA,YAAA,CACA,qBAAA,CACA,6BAAA,CAEJ,OACI,iBAAA,CACA,SAAA,CACA,gBAAA,CACA,eAAA,CAEJ,gBACI,iBAAA,CACA,MAAA,CACA,UAAA,CACA,gBAAA,CAEJ,UACI,iBAAA,CACI,SAAA,CACA,gBAAA,CACA,eAAA,CAER,eACI,iBAAA,CACI,MAAA,CACA,UAAA,CACA,gBAAA,CAER,qBACI,qBAAA,CACA,UAAA,CACA,iBAAA,CACA,OAAA,CACA,QAAA,CACA,qBAAA,CAGJ,kBACI,qBAAA,CACI,UAAA,CACA,iBAAA,CACA,OAAA,CACA,QAAA,CACA,qBAAA",sourcesContent:["@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@700&display=swap');\r\n\r\nbody{\r\n    display:flex;\r\n    height:100vh;\r\n    width:100%;\r\n    font-family:'Roboto',sans-serif;\r\n    font-weight:700;\r\n    font-size:16pt;\r\n}\r\n\r\n.side-panel{\r\n    background-color: rgb(55, 55, 239);\r\n    flex: 1 1 auto;\r\n    height:100%;\r\n}\r\n.project-manager{\r\n}\r\n.main-panel{\r\n    flex :3 3 auto;\r\n    border:2px solid rebeccapurple;\r\n    height:100%;\r\n\r\n}\r\n.project-display-panel{\r\n    display:flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n}\r\n.project{\r\n    justify-content: center;\r\n    align-items: center;\r\n    display:flex;\r\n   button{\r\n    height:1rem;\r\n   }\r\n}\r\n.todo{\r\n    width:80%;\r\n    display:flex;\r\n    border:2px solid black;\r\n    justify-content: space-between;\r\n}\r\n.title{\r\n    position:relative;\r\n    z-index: 0;\r\n    font-size:1.5rem;\r\n    font-weight:700;\r\n}\r\n.todo-new-title{\r\n    position:absolute;\r\n    left:0;\r\n    width:100%;\r\n    font-size:1.5rem;\r\n}\r\n.due-date{\r\n    position: relative;\r\n        z-index: 0;\r\n        font-size: 1.5rem;\r\n        font-weight: 700;\r\n}\r\n.todo-new-date{\r\n    position: absolute;\r\n        left: 0;\r\n        width: 100%;\r\n        font-size: 1.5rem;\r\n}\r\n.create-project-form{\r\n    border:2px solid black;\r\n    height:20%;\r\n    position:absolute;\r\n    top:50%;\r\n    left:50%;\r\n    background-color: gray;\r\n}\r\n\r\n.create-todo-form{\r\n    border: 2px solid black;\r\n        height: 20%;\r\n        position: absolute;\r\n        top: 50%;\r\n        left: 50%;\r\n        background-color: gray;\r\n}\r\n\r\n"],sourceRoot:""}]);const d=i},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",o=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),o&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),o&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,o,r,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(o)for(var d=0;d<this.length;d++){var l=this[d][0];null!=l&&(i[l]=!0)}for(var s=0;s<e.length;s++){var c=[].concat(e[s]);o&&i[c[0]]||(void 0!==a&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=a),n&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=n):c[2]=n),r&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=r):c[4]="".concat(r)),t.push(c))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),a="/*# ".concat(r," */");return[t].concat([a]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,o=0;o<t.length;o++)if(t[o].identifier===e){n=o;break}return n}function o(e,o){for(var a={},i=[],d=0;d<e.length;d++){var l=e[d],s=o.base?l[0]+o.base:l[0],c=a[s]||0,p="".concat(s," ").concat(c);a[s]=c+1;var A=n(p),u={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==A)t[A].references++,t[A].updater(u);else{var m=r(u,o);o.byIndex=d,t.splice(d,0,{identifier:p,updater:m,references:1})}i.push(p)}return i}function r(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,r){var a=o(e=e||[],r=r||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var d=n(a[i]);t[d].references--}for(var l=o(e,r),s=0;s<a.length;s++){var c=n(a[s]);0===t[c].references&&(t[c].updater(),t.splice(c,1))}a=l}}},569:e=>{var t={};e.exports=function(e,n){var o=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var o="";n.supports&&(o+="@supports (".concat(n.supports,") {")),n.media&&(o+="@media ".concat(n.media," {"));var r=void 0!==n.layer;r&&(o+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),o+=n.css,r&&(o+="}"),n.media&&(o+="}"),n.supports&&(o+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(o,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(o){var r=t[o];if(void 0!==r)return r.exports;var a=t[o]={id:o,exports:{}};return e[o](a,a.exports,n),a.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nc=void 0,(()=>{class e{constructor(e,t,n,o,r){this._title=e,this._description=t,this._dueDate=n,this._priority=o,this.id=r}get title(){return this._title}get description(){return this._description}get dueDate(){return this._dueDate}get priority(){return this._priority}get id(){return this._id}set title(e){this._title=e}set description(e){this._description=e}set dueDate(e){this._dueDate=e}set priority(e){this._priority=e}set id(e){this._id=e}}class t{todos=[];constructor(e,t,n){this._title=e,this._id=t,this._div=n}get title(){return this._title}set title(e){this._title=e}get id(){return this._id}get div(){return this._div}set div(e){this._div=e}addTodo(e){this.todos.push(e)}getAll(){return this.todos}}const o=(e,t)=>{let n=e.getAll();for(let e in n)n[e].id==t&&n.splice(e,1)},r=(e,t,n)=>{n.innerHTML="",t.getAll().forEach((a=>{((e,t,n,a)=>{let i=document.createElement("div");i.classList.add("todo"),i.id="todo-"+e.id,i.setAttribute("draggable","true"),i.ondragstart=t=>{const o={todoObj:e,projectObj:n};console.log("Hello from drag",o),t.dataTransfer.setData("text",JSON.stringify(o))},i.ondragend=e=>{console.log("Drag ended"),e.preventDefault(),r(a,n,t)};let d=document.createElement("input");d.setAttribute("type","checkbox"),d.classList.add("todo-checkbox");let l=document.createElement("p");l.classList.add("title"),l.textContent=e.title;let s=document.createElement("h4");s.classList.add("due-date"),s.textContent=e.dueDate;let c=document.createElement("input");c.setAttribute("type","date"),c.classList.add("todo-new-date"),c.value=e.dueDate,s.addEventListener("click",(()=>{s.appendChild(c),c.focus()})),c.onblur=()=>{""!==c.value&&(e.dueDate=c.value,s.value=e.dueDate,s.textContent=e.dueDate,localStorage.setItem("packageManager",JSON.stringify(a))),c.remove()},c.addEventListener("keyup",(({key:e})=>{"Enter"===e&&c.blur()}));let p=document.createElement("button");p.classList.add("remove-todo"),p.textContent="Remove",i.appendChild(d),i.appendChild(l),i.appendChild(s),i.appendChild(p),t.appendChild(i),p.addEventListener("click",(()=>{o(n,e.id),i.remove(),console.log(e.id),console.log(a.getAll()),localStorage.setItem("packageManager",JSON.stringify(a))}));let A=document.createElement("input");A.classList.add("todo-new-title"),A.value=e.title,l.addEventListener("click",(()=>{l.appendChild(A),A.focus()})),A.onblur=()=>{e.title=A.value,l.textContent=e.title,A.remove(),localStorage.setItem("packageManager",JSON.stringify(a))},A.addEventListener("keyup",(({key:e})=>{"Enter"===e&&A.blur()}))})(a,n,t,e)}))},a=(t,n,o)=>{const a=document.querySelector(".main-panel");let i=document.createElement("button");i.classList.add("create-todo-form-button"),i.id="todo-create-new",i.textContent="Create new Todo",i.addEventListener("click",(()=>{((t,n,o)=>{let a=document.createElement("div");a.classList.add("create-todo-form");let i=document.createElement("form"),d=document.createElement("label");d.setAttribute("for","form-todo-title"),d.textContent="Title";let l=document.createElement("input");l.setAttribute("type","text"),l.id="form-Todo-title";let s=document.createElement("label");s.setAttribute("for","form-todo-dueDate"),s.textContent="Due Date";let c=document.createElement("input");c.setAttribute("type","date"),c.id="form-todo-dueDate";let p=document.createElement("label");p.setAttribute("for","form-todo-priority"),p.textContent="Priority";let A=document.createElement("input");A.setAttribute("type","text"),A.id="form-todo-priority";let u=document.createElement("button");u.textContent="Create",u.classList.add("form-button-todo"),i.appendChild(d),i.appendChild(l),i.appendChild(s),i.appendChild(c),a.appendChild(i),a.appendChild(u),document.body.appendChild(a),u.addEventListener("click",(()=>{let i=new e(l.value," ",c.value,A.value,n.getAll().length);""===i._dueDate&&(i._dueDate="Set Date"),n.addTodo(i),a.remove(),r(t,n,o),localStorage.setItem("packageManager",JSON.stringify(t))}))})(t,n,o)}));let d=document.getElementById("todo-create-new");return document.body.contains(d)&&d.remove(),a.appendChild(i),i},i=(t,n,i)=>{n.innerHTML="",console.log("hello from loadProjects",t.projects);const d=t.projects;console.log("copied array",d),d.forEach((d=>{const l=((t,n,i,d,l,s)=>{let c=document.createElement("div"),p=document.createElement("button");p.classList.add("edit-project"),p.textContent="rename",c.classList.add("project"),c.id="project-"+d;let A=document.createElement("h1");A.classList.add("project-name"),A.textContent=n.title;let u=document.createElement("input");u.id="new-name-input",u.value=n.title;let m=document.createElement("button");return m.classList.add(".project-remove-button"),m.textContent="X",m.addEventListener("click",(()=>{o(t,n.id),localStorage.setItem("packageManager",JSON.stringify(t)),console.log("after remove",t),c.remove()})),p.addEventListener("click",(()=>{A.remove(),c.appendChild(u)})),u.onblur=()=>{A.textContent=u.value,n.title=u.value,u.remove(),c.insertBefore(A,p),localStorage.setItem("packageManager",JSON.stringify(t))},u.addEventListener("keyup",(({key:e})=>{"Enter"===e&&u.blur()})),A.addEventListener("click",(function(){s.innerHTML="",r(t,n,s),a(t,n,s)})),c.addEventListener("dragover",(e=>{e.preventDefault()})),c.addEventListener("drop",(r=>{r.preventDefault(),console.log("Drop on",n.title);const a=JSON.parse(r.dataTransfer.getData("text")).todoObj,i=JSON.parse(r.dataTransfer.getData("text")).projectObj;console.log("Adding",a,"to",n.title,"from",i);const d=new e(a._title,a._description,a._dueDate," ",a._id);n.addTodo(d),console.log(a._id,"unparsed id"),console.log("referenced todo",d);let l=t.getAll();for(let e in l)if(l[e].id==i._id){let t=l[e];o(t,d.id),console.log("removeElement args",t,d.id)}localStorage.setItem("packageManager",JSON.stringify(t))})),c.appendChild(A),c.appendChild(p),c.appendChild(m),l.appendChild(c),c})(t,d,d.title,d.id,n,i);d.div=l,localStorage.setItem("packageManager",JSON.stringify(t))}))};var d=n(379),l=n.n(d),s=n(795),c=n.n(s),p=n(569),A=n.n(p),u=n(565),m=n.n(u),f=n(216),g=n.n(f),C=n(589),h=n.n(C),v=n(192),b={};b.styleTagTransform=h(),b.setAttributes=m(),b.insert=A().bind(null,"head"),b.domAPI=c(),b.insertStyleElement=g(),l()(v.Z,b),v.Z&&v.Z.locals&&v.Z.locals;let y,E=new class{projects=[];addProj(e){this.projects.push(e)}getAll(){return this.projects}};if(console.log(E.getAll()),null!=localStorage.getItem("packageManager")){if(y=JSON.parse(localStorage.getItem("packageManager")).projects,console.log("saved proj",y),y.forEach(((n,o)=>{let r=new t(n._title,n._id,n._div);E.addProj(r),n.todos.forEach((t=>{console.log(t);let n=new e(t._title,t._description,t._dueDate,"",t._id);r.addTodo(n)}))})),E.getAll().length<1){let e=new t("Project",0);E.addProj(e)}}else{let e=new t("Project",0);E.addProj(e)}const x=(()=>{let e=document.createElement("div");e.classList.add("main-panel");let t=document.createElement("div");return t.classList.add("project-display-panel"),e.appendChild(t),document.body.appendChild(e),t})(),j=((e,n)=>{let o=document.createElement("div");o.classList.add("side-panel");let r=document.createElement("div");r.classList.add("project-manager");let a=document.createElement("button");a.classList.add("new-project-button"),a.textContent="Create A New Project";let d=document.querySelector(".main-panel");const l=document.body;return o.appendChild(r),o.appendChild(a),l.insertBefore(o,d),a.addEventListener("click",(()=>{((e,n,o)=>{let r=document.createElement("div");r.classList.add("create-project-form");let a=document.createElement("form"),d=document.createElement("label");d.setAttribute("for","form-project-name"),d.textContent="Project Name";let l=document.createElement("input");l.setAttribute("type","text"),l.id="form-project-name";let s=document.createElement("button");s.textContent="Create",s.classList.add("form-button"),a.appendChild(d),a.appendChild(l),r.appendChild(a),r.appendChild(s),document.body.appendChild(r),s.addEventListener("click",(()=>{r.remove();let a=new t(l.value,n.getAll().length);n.addProj(a),i(n,e,o),localStorage.setItem("packageManager",JSON.stringify(n))}))})(r,e,n),console.log("button")})),r})(E,x);i(E,j,x),localStorage.setItem("packageManager",JSON.stringify(E))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,