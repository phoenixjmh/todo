(()=>{"use strict";var e={169:(e,t,n)=>{n.d(t,{Z:()=>m});var r=n(537),o=n.n(r),a=n(645),i=n.n(a),A=n(667),s=n.n(A),d=new URL(n(498),n.b),l=new URL(n(794),n.b),c=i()(o());c.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Roboto:wght@700&display=swap);"]),c.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Gruppo&display=swap);"]),c.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Open+Sans:ital,wght@0,300;0,400;0,500;0,600;0,700;0,800;1,400;1,500;1,600;1,700;1,800&display=swap);"]),c.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Gruppo&display=swap);"]),c.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Roboto:wght@700&display=swap);"]);var u=s()(d),C=s()(l);c.push([e.id,'*{margin:0;font-family:"Open Sans",sans-serif;box-sizing:border-box}body{display:flex;justify-content:center;align-items:center;height:100vh;width:100vw;font-weight:700;font-size:18pt;background-color:#222}@keyframes expand{from{width:0vw;left:100%}to{width:100vw;left:0}}@keyframes close{from{width:100vw;left:0}to{width:0vw;left:100%}}@keyframes openDisplay{from{position:relative;width:100vw;height:100%;right:0%;z-index:2}to{position:relative;right:100%;width:0;visibility:hidden}}@keyframes closeDisplay{from{position:relative;width:0;right:100%}to{position:relative;width:100vw;height:100%;right:0;z-index:2}}@media(min-width: 500px){@keyframes expand{from{width:0vw;left:100%}to{width:clamp(500px,70%,800px);left:0}}@keyframes close{from{width:clamp(500px,70%,800px);left:0}to{width:0vw;left:100%}}@keyframes openDisplay{from{position:relative;width:clamp(500px,70%,800px);height:100%;right:0%;z-index:2}to{position:relative;right:100%;width:0;visibility:hidden}}@keyframes closeDisplay{from{position:relative;width:0;right:100%}to{position:relative;width:clamp(500px,70%,800px);height:100%;right:0;z-index:2}}}@media(max-width: 500px){.side-panel{background-color:#fff;width:100%;height:100%;position:relative;z-index:2}.display-open{animation-duration:200ms}.display-closed{animation-duration:200ms}#panel-title{padding:2rem;color:rgba(166,69,0,.9843137255);font-size:3rem}}.side-panel{background-color:#222;height:100%;width:100%;position:relative;z-index:2;display:flex;gap:2rem;flex-direction:column;align-items:center;background:#222}#panel-title{padding:2rem;text-align:center;color:rgba(166,69,0,.9843137255);font-size:3rem;text-shadow:1px 3px 5px rgba(0,0,0,.6)}.projman-header{width:80%}#projman-label{font-size:1.5rem;position:relative;top:1rem;color:rgba(166,69,0,.9843137255);text-shadow:1px 3px 5px rgba(0,0,0,.6)}.display-open{animation-name:openDisplay;animation-delay:0ms;animation-duration:300ms;animation-fill-mode:forwards}.display-closed{animation-name:closeDisplay;animation-delay:0ms;animation-duration:300ms;animation-fill-mode:forwards}.project-manager{display:flex;width:100%;flex-direction:column;justify-content:flex-start;gap:1rem;align-items:center}.project{text-shadow:1px 3px 5px rgba(0,0,0,.6);box-shadow:1px 3px 5px #000;justify-content:flex-start;align-items:center;padding:.5rem 1rem .5rem 1rem;display:flex;width:80%;color:rgba(166,69,0,.9843137255);border:1px solid rgba(166,69,0,.9843137255);border-radius:.5rem;transition:ease-in-out 150ms}.project .project-name{left:1rem;position:relative;text-align:center;font-size:1.4rem}.project .button-panel{position:absolute;z-index:3;left:70%;display:flex;gap:1rem}.project:hover{width:90%;height:3.5rem;transition:ease-in-out 150ms}#new-name-input{font-family:"Open Sans",sans-serif;font-size:1.4rem;font-weight:700;width:72%;background:#222;color:rgba(166,69,0,.9843137255);border-radius:.6rem;border:none;box-shadow:1px 2px 3px #000}.edit-project{appearance:none;background:none;border:1px solid rgba(166,69,0,.9843137255);border-radius:.4rem;height:24px;width:24px;border:none;box-shadow:1px 2px 3px #000;padding:.2rem}.edit-icon{width:17.6px;height:17.6px;color:rgba(166,69,0,.9843137255);background-color:rgba(166,69,0,.9843137255);mask-image:url('+u+');mask-size:2.9rem;mask-clip:border-box}.new-project-button{height:2rem;width:10rem;font-size:1rem;border-radius:.5rem;color:rgba(166,69,0,.9843137255);background:#222;appearance:none;background:none;border-radius:.4rem;border:none;text-shadow:1px 3px 5px rgba(0,0,0,.6);box-shadow:1px 2px 3px #000;padding:.2rem;transition:ease-in-out 150ms}.new-project-button:hover{height:2.5rem;width:12rem;transition:ease-in-out 150ms}.project-remove-button{appearance:none;background:none;border:none;border-radius:.4rem;height:24px;width:24px;padding:.1rem;color:rgba(166,69,0,.9843137255);font-family:"Open Sans",sans-serif;font-weight:700;font-size:.8rem;box-shadow:1px 2px 3px #000}#input-placeholder{flex-shrink:0;display:flex;justify-content:space-around}#form-project-name{font-family:"Open Sans",sans-serif;font-size:1.4rem;font-weight:700;width:72%;background:none;color:rgba(166,69,0,.9843137255);border-radius:.6rem;border:none;box-shadow:1px 2px 3px #000}#create-button{appearance:none;background:none;border:none;border-radius:.4rem;padding:.3rem;color:rgba(166,69,0,.9843137255);font-family:"Open Sans",sans-serif;font-weight:700;font-size:.8rem;box-shadow:1px 2px 3px #000}@media(min-width: 500px){.side-panel{width:clamp(500px,70%,800px);border-radius:2rem}body{background-color:#fff}}@keyframes expand{from{width:0vw;left:100%}to{width:100vw;left:0}}@keyframes close{from{width:100vw;left:0}to{width:0vw;left:100%}}@keyframes openDisplay{from{position:relative;width:100vw;height:100%;right:0%;z-index:2}to{position:relative;right:100%;width:0;visibility:hidden}}@keyframes closeDisplay{from{position:relative;width:0;right:100%}to{position:relative;width:100vw;height:100%;right:0;z-index:2}}@media(min-width: 500px){@keyframes expand{from{width:0vw;left:100%}to{width:clamp(500px,70%,800px);left:0}}@keyframes close{from{width:clamp(500px,70%,800px);left:0}to{width:0vw;left:100%}}@keyframes openDisplay{from{position:relative;width:clamp(500px,70%,800px);height:100%;right:0%;z-index:2}to{position:relative;right:100%;width:0;visibility:hidden}}@keyframes closeDisplay{from{position:relative;width:0;right:100%}to{position:relative;width:clamp(500px,70%,800px);height:100%;right:0;z-index:2}}}.main-panel{display:flex;flex-direction:column;justify-content:flex-start;gap:5rem;align-items:center;background-color:#222;color:rgba(166,69,0,.9843137255);position:relative;height:100%;width:0;left:100%;z-index:0;overflow:hidden}.expand-panel{animation-name:expand;animation-duration:300ms;animation-fill-mode:forwards}.close-panel{animation-name:close;animation-duration:300ms;animation-fill-mode:forwards}.project-display-panel{padding-top:5rem;width:100%;display:flex;flex-direction:column;justify-content:flex-start;gap:5%;align-items:center}#nav-bar{position:absolute;display:flex;justify-content:center;align-items:center;top:0%;height:3rem;width:100%;padding:1rem;overflow:visible;text-shadow:1px 3px 5px rgba(0,0,0,.6);box-shadow:1px 3px 5px #000}#expand-arrow{flex:1 1 auto;background:rgba(166,69,0,.9843137255);mask-image:url('+C+');mask-repeat:no-repeat;mask-size:6rem;width:3rem;height:1.8rem}#nav-title{flex:5 5 auto}@media(min-width: 500px){.main-panel{border-radius:2rem}#nav-bar{height:4rem}}#tool-tip{font-size:.8rem}.todo{text-shadow:1px 3px 5px rgba(0,0,0,.6);box-shadow:1px 2px 3px #000;width:90%;padding:1rem;display:flex;border:1px solid rgba(166,69,0,.9843137255);justify-content:space-between;align-items:center;border-radius:.5rem}.checkbox-container{flex:1 1 auto;height:100%;display:flex;justify-content:center;align-items:center}.todo-checkbox{width:20px;height:20px;border:1px solid rgba(166,69,0,.9843137255);background:#222;border-radius:50%;appearance:none}input[type=checkbox]:checked{width:20px;height:20px;border:1px solid rgba(166,69,0,.9843137255);background:#ffa72e;background:radial-gradient(circle, rgba(166, 69, 0, 0.9843137255) 0%, rgba(166, 69, 0, 0.9843137255) 32%, rgb(0, 0, 0) 69%);border-radius:50%}.title{position:relative;z-index:0;font-size:1rem;font-weight:700;flex:3 3 auto;max-width:40%}.todo-new-title{position:absolute;background:#222;color:rgba(166,69,0,.9843137255);border:1px solid rgba(166,69,0,.9843137255);box-shadow:1px 2px 3px #000;font-size:1rem;font-weight:700;font-family:"Open Sans",sans-serif;top:0;left:0;width:100%;height:100%}.due-date{text-align:center;position:relative;z-index:0;font-size:1rem;flex:1 1 auto}.todo-new-date{position:absolute;left:0;width:85%}.remove-button-container{display:flex;justify-content:center;align-items:center}.remove-button-container .remove-todo{appearance:none;background:none;border-radius:50%;border:none;height:1.2rem;width:1.2rem;padding:.1rem;color:rgba(166,69,0,.9843137255);font-family:"Open Sans",sans-serif;font-weight:700;font-size:.8rem;box-shadow:1px 2px 3px #000}.create-todo-form{border:2px solid #000;width:80%;position:absolute;top:25%;left:10%;background-color:#222;display:flex;flex-direction:column;justify-content:flex-start;align-items:center;text-shadow:1px 3px 5px rgba(0,0,0,.6);box-shadow:1px 2px 3px #000;border:1px solid rgba(166,69,0,.9843137255);border-radius:.5rem}.create-todo-form #todo-form{padding:1.2rem;display:flex;flex-direction:column;justify-content:space-around;align-items:center;height:50%}.create-todo-form #todo-form label{color:rgba(166,69,0,.9843137255);font-size:1.5rem;width:100%}.create-todo-form #todo-form input{background:none;border:1px solid rgba(166,69,0,.9843137255);color:rgba(166,69,0,.9843137255);font-size:1.4rem;border-radius:.4rem}.create-todo-form #form-buttons-td{padding:1.2rem;width:100%;display:flex;justify-content:space-evenly}.create-todo-form #form-buttons-td button{height:2rem;width:10rem;font-size:1rem;border-radius:.5rem;color:rgba(166,69,0,.9843137255);background:#222;border:none;padding:.3rem;font-family:"Open Sans",sans-serif;font-weight:700;font-size:.8rem;box-shadow:1px 2px 3px #000}#todo-create-new{height:2rem;width:10rem;font-size:1rem;border:1px solid rgba(166,69,0,.9843137255);border-radius:.5rem;color:rgba(166,69,0,.9843137255);text-shadow:1px 3px 5px rgba(0,0,0,.6);background:#222;box-shadow:1px 2px 3px #000;transition:ease-in-out 150ms}#todo-create-new:hover{height:3rem;width:12rem;box-shadow:1px 4px 5px #000;transition:ease-in-out 150ms}',"",{version:3,sources:["webpack://./src/main.scss","webpack://./src/styles/animations.scss","webpack://./src/styles/projectPanel.scss","webpack://./src/styles/mainPanel.scss","webpack://./src/styles/todos.scss"],names:[],mappings:"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",sourcesContent:["@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@700&display=swap');\r\n@import './styles/animations.scss';\r\n@import url('https://fonts.googleapis.com/css2?family=Gruppo&display=swap');\r\n*{\r\n    margin:0;\r\n    font-family:'Open Sans',sans-serif;\r\n    box-sizing: border-box;\r\n}\r\nbody{\r\n    display:flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    height:100vh;\r\n    width:100vw;\r\n    font-weight:700;\r\n    font-size:18pt;\r\n    background-color: $bgColor;\r\n}\r\n@import './styles/projectPanel.scss';\r\n@import './styles/mainPanel.scss';\r\n@import './styles/todos.scss';\r\n\r\n\r\n","$pink-ish:rgba(255, 192, 203, 0.505);\r\n$goldish:rgba(251,235,215,1);\r\n$theme-font:#a64500fb;\r\n$bgColor:  rgb(34, 34, 34);\r\n$border:1px solid $theme-font;\r\n\r\n    @import url('https://fonts.googleapis.com/css2?family=Gruppo&display=swap');\r\n    @import url('https://fonts.googleapis.com/css2?family=Open+Sans:ital,wght@0,300;0,400;0,500;0,600;0,700;0,800;1,400;1,500;1,600;1,700;1,800&display=swap');\r\n\r\n@mixin animations{\r\n    \r\n\r\n    @keyframes expand{\r\n        from{\r\n            width:0vw;\r\n        left: 100%;\r\n        }\r\n        to{\r\n            width:100vw;\r\n        left:0;}\r\n    }\r\n    @keyframes close {\r\n        from{\r\n            width:100vw;\r\n        left:0;}\r\n        to{\r\n            width:0vw;\r\n            left:100%;\r\n    }\r\n    }\r\n    @keyframes openDisplay{\r\n        from{\r\n            position:relative;\r\n            width:100vw;\r\n            height:100%;\r\n            right:0%;\r\n            z-index: 2;\r\n        }\r\n        to{\r\n            position:relative;\r\n            right:100%;\r\n            width:0;\r\n            visibility: hidden;\r\n    \r\n        }\r\n    }\r\n    @keyframes closeDisplay{\r\n        from{\r\n            position:relative;\r\n            width:0;\r\n            right:100%;\r\n        }\r\n        to{\r\n            \r\n            position:relative;\r\n            width:100vw;\r\n            height:100%;\r\n            right:0;\r\n            z-index: 2;\r\n            \r\n        }\r\n    }\r\n    @media (min-width:500px){\r\n        @keyframes expand{\r\n            from{\r\n                width:0vw;\r\n            left: 100%;\r\n            }\r\n            to{\r\n                width:clamp(500px,70%,800px);\r\n            left:0;}\r\n        }\r\n        @keyframes close {\r\n            from{\r\n                width:clamp(500px,70%,800px);\r\n                \r\n            left:0;}\r\n            to{\r\n                width:0vw;\r\n                left:100%;\r\n        }\r\n        }\r\n        @keyframes openDisplay{\r\n            from{\r\n                position:relative;\r\n                width:clamp(500px,70%,800px);\r\n                height:100%;\r\n                right:0%;\r\n                z-index: 2;\r\n            }\r\n            to{\r\n                position:relative;\r\n                right:100%;\r\n                width:0;\r\n                visibility: hidden;\r\n        \r\n            }\r\n        }\r\n        @keyframes closeDisplay{\r\n            from{\r\n                position:relative;\r\n                width:0;\r\n                right:100%;\r\n            }\r\n            to{\r\n                \r\n                position:relative;\r\n                width:clamp(500px,70%,800px);\r\n                height:100%;\r\n                right:0;\r\n                z-index: 2;\r\n                \r\n            }\r\n        }\r\n    }   \r\n\r\n}\r\n","@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@700&display=swap');\r\n\r\n@include animations;\r\n@media (max-width:500px){\r\n    .side-panel{\r\n        background-color:rgb(255, 255, 255);\r\n        width:100%;\r\n        height:100%;\r\n        position:relative;\r\n        z-index: 2;\r\n    }\r\n    .display-open{\r\n        animation-duration: 200ms;\r\n    }\r\n    .display-closed{\r\n        animation-duration: 200ms;\r\n    }\r\n\r\n    #panel-title{\r\n        padding:2rem;\r\n        color:$theme-font;\r\n        font-size:3rem;\r\n        \r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n.side-panel{\r\n    background-color:$bgColor;\r\n    height:100%;\r\n    width:100%;\r\n    position:relative;\r\n    z-index: 2;\r\n    display:flex;\r\n    gap:2rem;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    background: rgb(34, 34, 34);\r\n    \r\n    \r\n}\r\n#panel-title{\r\n    padding:2rem;\r\n    text-align: center;\r\n    color:$theme-font;\r\n    font-size:3rem;\r\n    text-shadow: 1px 3px 5px rgba(0,0,0,0.6);\r\n}\r\n.projman-header{\r\n    width:80%;\r\n}\r\n#projman-label{\r\n    font-size:1.5rem;\r\n    position:relative;\r\n    top:1rem;\r\n    color:$theme-font;\r\n    text-shadow: 1px 3px 5px rgba(0,0,0,0.6);\r\n\r\n}\r\n.display-open{\r\n    animation-name:openDisplay;\r\n    animation-delay:0ms;\r\n    animation-duration:300ms;\r\n    animation-fill-mode: forwards;\r\n}\r\n.display-closed{\r\n    animation-name:closeDisplay;\r\n    animation-delay:0ms;\r\n    animation-duration:300ms;\r\n    animation-fill-mode: forwards;\r\n}\r\n\r\n.project-manager{\r\n    display:flex;\r\n    width:100%;\r\n    flex-direction:column;\r\n    justify-content: flex-start;\r\n    gap:1rem;\r\n    align-items: center;\r\n}\r\n.project{\r\n    text-shadow: 1px 3px 5px rgba(0,0,0,0.6);\r\n    box-shadow: 1px 3px 5px black;\r\n    $pink-ish:rgba(255, 192, 203, 0.505);\r\n    $goldish:rgba(251,235,215,1);\r\n    justify-content: flex-start;\r\n    align-items: center;\r\n    padding: .5rem 1rem .5rem 1rem;\r\n    display:flex;\r\n    width:80%;\r\n    color:$theme-font;\r\n     border:$border;\r\n     border-radius: .5rem;\r\n    transition:ease-in-out 150ms;\r\n    .project-name{\r\n        left:1rem;\r\n        position: relative;\r\n        text-align: center;\r\n        font-size:1.4rem;\r\n\r\n    }\r\n   .button-panel{\r\n        position:absolute;\r\n        z-index:3;\r\n        left:70%;\r\n        display:flex;\r\n        gap:1rem;\r\n    \r\n   }\r\n}\r\n.project:hover{\r\n    width:90%;\r\n    height:3.5rem;\r\n    transition:ease-in-out 150ms;\r\n\r\n}\r\n#new-name-input{\r\n    font-family:'Open Sans',sans-serif;\r\n    font-size:1.4rem;\r\n    font-weight:700;\r\n    width:72%;\r\n    background:$bgColor;\r\n    color:$theme-font;\r\n    border-radius:.6rem;\r\n    border:none;\r\n    box-shadow:1px 2px 3px black;\r\n\r\n}\r\n.edit-project{\r\n    appearance:none;\r\n    background:none;\r\n    border:$border;\r\n    border-radius: .4rem;\r\n   height:24px;\r\n   width:24px;\r\n   border:none;\r\n   box-shadow:1px 2px 3px black;\r\n   padding:.2rem;\r\n}\r\n.edit-icon{\r\n    width:17.6px;\r\n    height:17.6px;\r\n    color:$theme-font;\r\n    background-color: $theme-font;\r\n    mask-image: url(./img/pencil.svg) ;\r\n    mask-size:2.9rem;\r\n    \r\n    mask-clip:border-box;\r\n    \r\n    \r\n    // -webkit-mask-size: 1rem;\r\n    // mask-size: 1rem;\r\n\r\n}\r\n\r\n.new-project-button{\r\n    height:2rem;\r\n    width:10rem;\r\n    font-size:1rem;\r\n    border-radius:.5rem;\r\n    color:$theme-font;\r\n    background: $bgColor;\r\n    appearance:none;\r\n    background:none;\r\n    border-radius: .4rem;\r\n   \r\n   border:none;\r\n   text-shadow: 1px 3px 5px rgba(0,0,0,0.6);\r\n    box-shadow: 1px 2px 3px black;\r\n   padding:.2rem;\r\n   transition:ease-in-out 150ms;\r\n\r\n}\r\n.new-project-button:hover{\r\n    height:2.5rem;\r\n    width:12rem;\r\n    transition:ease-in-out 150ms;\r\n}\r\n.project-remove-button{\r\n    appearance:none;\r\n        background:none;\r\n        border:none;\r\n        border-radius:.4rem;\r\n        height:24px;\r\n        width:24px;\r\n        padding:.1rem;\r\n        color:$theme-font;\r\n        font-family:'Open Sans', sans-serif;\r\n        font-weight:700;\r\n        font-size:.8rem;\r\n        box-shadow:1px 2px 3px black;\r\n}\r\n#input-placeholder{\r\n   flex-shrink:0;\r\n   display:flex;\r\n   justify-content: space-around;\r\n}\r\n#form-project-name{\r\n    font-family:'Open Sans',sans-serif;\r\n    font-size:1.4rem;\r\n    font-weight:700;\r\n    width:72%;\r\n    background:none;\r\n    color:$theme-font;\r\n    border-radius:.6rem;\r\n    border:none;\r\n    box-shadow:1px 2px 3px black;\r\n}\r\n#create-button{\r\n    appearance:none;\r\n        background:none;\r\n        border:none;\r\n        border-radius:.4rem;\r\n        padding:.3rem;\r\n        color:$theme-font;\r\n        font-family:'Open Sans', sans-serif;\r\n        font-weight:700;\r\n        font-size:.8rem;\r\n        box-shadow:1px 2px 3px black;\r\n}\r\n\r\n@media (min-width:500px){\r\n    .side-panel{\r\n        width:clamp(500px,70%,800px);\r\n        border-radius: 2rem;\r\n    }\r\n    body{\r\n        background-color: white;\r\n    }\r\n    }\r\n","@include animations;\r\n.main-panel{\r\n    display:flex;\r\n    flex-direction: column;\r\n    justify-content: flex-start;\r\n    gap:5rem;\r\n    align-items: center;\r\n    background-color: $bgColor;\r\n    color:$theme-font;\r\n    position:relative;\r\n    height:100%;\r\n    width:0;\r\n    left:100%;\r\n    z-index:0;\r\n    overflow:hidden;\r\n\r\n}\r\n.expand-panel{\r\n    animation-name:expand;\r\n    animation-duration: 300ms;\r\n    animation-fill-mode: forwards;\r\n}\r\n.close-panel{\r\n    animation-name:close;\r\n    animation-duration: 300ms;\r\n    animation-fill-mode: forwards;\r\n}\r\n.project-display-panel{\r\n    \r\n    padding-top:5rem;\r\n    width:100%;\r\n    display:flex;\r\n    flex-direction: column;\r\n    justify-content: flex-start;\r\n    gap:5%;\r\n    align-items: center;\r\n}\r\n\r\n#nav-bar{\r\n    position:absolute;\r\n    display:flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    top:0%;\r\n    height:3rem;\r\n    width:100%;\r\n    padding:1rem;\r\n   \r\n    overflow: visible;\r\n    \r\n    text-shadow: 1px 3px 5px rgba(0,0,0,0.6);\r\n    box-shadow: 1px 3px 5px black;\r\n}\r\n\r\n#expand-arrow{\r\n    flex:1 1 auto;\r\n    background:$theme-font;\r\n    mask-image:url('./img/projects.svg');\r\n    mask-repeat: no-repeat;\r\n    mask-size:6rem;\r\n    width:3rem;\r\n    height:1.8rem;\r\n}\r\n#nav-title{\r\n    flex :5 5 auto;\r\n}\r\n@media(min-width:500px){\r\n    .main-panel{\r\n        border-radius: 2rem;\r\n    }\r\n    #nav-bar{\r\n        height:4rem;\r\n    }\r\n}\r\n\r\n#tool-tip{\r\n    font-size:.8rem;\r\n    \r\n}",".todo{\r\n    text-shadow: 1px 3px 5px rgba(0,0,0,0.6);\r\n    box-shadow: 1px 2px 3px black;\r\n    width:90%;\r\n    padding:1rem;\r\n    display:flex;\r\n    border:$border;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    border-radius:.5rem;\r\n}\r\n.checkbox-container{\r\n    flex:1 1 auto;\r\nheight:100%;\r\ndisplay:flex;\r\njustify-content: center;\r\nalign-items: center;\r\n}\r\n.todo-checkbox{\r\n    \r\n    width:20px;\r\n    height:20px;\r\n    border:$border;\r\n    background:$bgColor;\r\n    border-radius:50%;\r\n    appearance: none;\r\n  \r\n}\r\ninput[type='checkbox']:checked{\r\n    width:20px;\r\n    height:20px;\r\n    border:$border;\r\n    background: rgb(255,167,46);\r\n    background: radial-gradient(circle, $theme-font 0%,$theme-font 32%, rgba(0,0,0,1) 69%); \r\n    border-radius:50%;\r\n  \r\n}\r\n.title{\r\n    position:relative;\r\n    z-index: 0;\r\n    font-size:1rem;\r\n    font-weight:700;\r\n    flex: 3 3 auto;\r\n    max-width: 40%;\r\n}\r\n.todo-new-title{\r\n    position:absolute;\r\n    background:$bgColor;\r\n    color:$theme-font;\r\n    border:$border;\r\n    box-shadow: 1px 2px 3px black;\r\n    font-size:1rem;\r\n    font-weight:700;\r\n    font-family:'Open Sans',sans-serif;\r\n    top:0;\r\n    left:0;\r\n    width:100%;\r\n    height:100%;\r\n}\r\n.due-date{\r\n    text-align: center;\r\n    position: relative;\r\n        z-index: 0;\r\n        font-size:1rem;\r\n        flex: 1 1 auto;\r\n}\r\n.todo-new-date{\r\n    position: absolute;\r\n        left: 0;\r\n        width: 85%;\r\n}\r\n.remove-button-container{\r\n    display:flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    .remove-todo{\r\n        appearance:none;\r\n        background:none;\r\n        border-radius: 50%;\r\n        border:none;\r\n        height:1.2rem;\r\n        width:1.2rem;\r\n        padding:.1rem;\r\n        color:$theme-font;\r\n        font-family:'Open Sans', sans-serif;\r\n        font-weight:700;\r\n        font-size:.8rem;\r\n        box-shadow:1px 2px 3px black;\r\n        \r\n\r\n    }\r\n}\r\n\r\n.create-todo-form{\r\n    border: 2px solid black;\r\n        width:80%;\r\n        position: absolute;\r\n        top: 25%;\r\n        left: 10%;\r\n        background-color:$bgColor;\r\n        display:flex;\r\n        flex-direction:column;\r\n        justify-content: flex-start;\r\n        align-items: center;\r\n\r\n\r\n        text-shadow: 1px 3px 5px rgba(0,0,0,0.6);\r\n        box-shadow: 1px 2px 3px black;\r\n        border:$border;\r\n        border-radius:.5rem;\r\n\r\n\r\n        #todo-form{\r\n            padding:1.2rem;\r\n            display:flex;\r\n            flex-direction: column;\r\n            justify-content: space-around;\r\n            align-items: center;\r\n            height:50%;\r\n          \r\n            label{ \r\n                color:$theme-font;\r\n                font-size:1.5rem;\r\n                width:100%;\r\n            }\r\n\r\n            input{\r\n                background:none;\r\n                border:$border;\r\n                color:$theme-font;\r\n                font-size:1.4rem;\r\n                border-radius:.4rem;\r\n            }\r\n        }\r\n        #form-buttons-td{\r\n            padding:1.2rem;\r\n            width:100%;\r\n            display:flex;\r\n            justify-content: space-evenly;\r\n            button{\r\n                height:2rem;\r\n                width:10rem;\r\n                font-size:1rem;\r\n                border-radius:.5rem;\r\n                color:$theme-font;\r\n                background: $bgColor;\r\n                border:none;\r\n                \r\n                \r\n                padding:.3rem;\r\n                font-family:'Open Sans', sans-serif;\r\n                font-weight:700;\r\n                font-size:.8rem;\r\n                box-shadow:1px 2px 3px black;\r\n\r\n            }\r\n        }\r\n}\r\n\r\n#todo-create-new{\r\n    height:2rem;\r\n    width:10rem;\r\n    font-size:1rem;\r\n    border:$border;\r\n    border-radius:.5rem;\r\n    color:$theme-font;\r\n    text-shadow: 1px 3px 5px rgba(0,0,0,0.6);\r\n    background: $bgColor;\r\n    box-shadow: 1px 2px 3px black;\r\n\r\n    transition:ease-in-out 150ms;\r\n}\r\n#todo-create-new:hover{\r\n    height:3rem;\r\n    width:12rem;\r\n    box-shadow: 1px 4px 5px black;\r\n    transition:ease-in-out 150ms;\r\n\r\n\r\n}"],sourceRoot:""}]);const m=c},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var A=0;A<this.length;A++){var s=this[A][0];null!=s&&(i[s]=!0)}for(var d=0;d<e.length;d++){var l=[].concat(e[d]);r&&i[l[0]]||(void 0!==a&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=a),n&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=n):l[2]=n),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),t.push(l))}},t}},667:e=>{e.exports=function(e,t){return t||(t={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),/["'() \t\n]|(%20)/.test(e)||t.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */");return[t].concat([a]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var a={},i=[],A=0;A<e.length;A++){var s=e[A],d=r.base?s[0]+r.base:s[0],l=a[d]||0,c="".concat(d," ").concat(l);a[d]=l+1;var u=n(c),C={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==u)t[u].references++,t[u].updater(C);else{var m=o(C,r);r.byIndex=A,t.splice(A,0,{identifier:c,updater:m,references:1})}i.push(c)}return i}function o(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var a=r(e=e||[],o=o||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var A=n(a[i]);t[A].references--}for(var s=r(e,o),d=0;d<a.length;d++){var l=n(a[d]);0===t[l].references&&(t[l].updater(),t.splice(l,1))}a=s}}},569:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},498:(e,t,n)=>{e.exports=n.p+"b89791f2239f6e86de64.svg"},794:(e,t,n)=>{e.exports=n.p+"c2b09013f238c8f640ed.svg"}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var a=t[r]={id:r,exports:{}};return e[r](a,a.exports,n),a.exports}n.m=e,n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");r.length&&(e=r[r.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),n.b=document.baseURI||self.location.href,n.nc=void 0,(()=>{class e{constructor(e,t,n){this._title=e,this._dueDate=t,this.id=n}get title(){return this._title}set title(e){this._title=e}get dueDate(){return this._dueDate}set dueDate(e){this._dueDate=e}get id(){return this._id}set id(e){this._id=e}}class t{todos=[];constructor(e,t){this._title=e,this._id=t}get title(){return this._title}set title(e){this._title=e}get id(){return this._id}addTodo(e){this.todos.push(e)}getAll(){return this.todos}}function r(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function o(e){return o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o(e)}function a(e){return a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a(e)}function i(e){r(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"===a(e)&&"[object Date]"===t?new Date(e.getTime()):"number"==typeof e||"[object Number]"===t?new Date(e):("string"!=typeof e&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function A(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function s(e){r(1,arguments);var t=i(e),n=t.getUTCDay(),o=(n<1?7:0)+n-1;return t.setUTCDate(t.getUTCDate()-o),t.setUTCHours(0,0,0,0),t}function d(e){r(1,arguments);var t=i(e),n=t.getUTCFullYear(),o=new Date(0);o.setUTCFullYear(n+1,0,4),o.setUTCHours(0,0,0,0);var a=s(o),A=new Date(0);A.setUTCFullYear(n,0,4),A.setUTCHours(0,0,0,0);var d=s(A);return t.getTime()>=a.getTime()?n+1:t.getTime()>=d.getTime()?n:n-1}var l=6048e5;var c={};function u(){return c}function C(e,t){var n,o,a,s,d,l,c,C;r(1,arguments);var m=u(),p=A(null!==(n=null!==(o=null!==(a=null!==(s=null==t?void 0:t.weekStartsOn)&&void 0!==s?s:null==t||null===(d=t.locale)||void 0===d||null===(l=d.options)||void 0===l?void 0:l.weekStartsOn)&&void 0!==a?a:m.weekStartsOn)&&void 0!==o?o:null===(c=m.locale)||void 0===c||null===(C=c.options)||void 0===C?void 0:C.weekStartsOn)&&void 0!==n?n:0);if(!(p>=0&&p<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var h=i(e),f=h.getUTCDay(),g=(f<p?7:0)+f-p;return h.setUTCDate(h.getUTCDate()-g),h.setUTCHours(0,0,0,0),h}function m(e,t){var n,o,a,s,d,l,c,m;r(1,arguments);var p=i(e),h=p.getUTCFullYear(),f=u(),g=A(null!==(n=null!==(o=null!==(a=null!==(s=null==t?void 0:t.firstWeekContainsDate)&&void 0!==s?s:null==t||null===(d=t.locale)||void 0===d||null===(l=d.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==a?a:f.firstWeekContainsDate)&&void 0!==o?o:null===(c=f.locale)||void 0===c||null===(m=c.options)||void 0===m?void 0:m.firstWeekContainsDate)&&void 0!==n?n:1);if(!(g>=1&&g<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var b=new Date(0);b.setUTCFullYear(h+1,0,g),b.setUTCHours(0,0,0,0);var w=C(b,t),x=new Date(0);x.setUTCFullYear(h,0,g),x.setUTCHours(0,0,0,0);var v=C(x,t);return p.getTime()>=w.getTime()?h+1:p.getTime()>=v.getTime()?h:h-1}var p=6048e5;function h(e,t){for(var n=e<0?"-":"",r=Math.abs(e).toString();r.length<t;)r="0"+r;return n+r}const f=function(e,t){var n=e.getUTCFullYear(),r=n>0?n:1-n;return h("yy"===t?r%100:r,t.length)},g=function(e,t){var n=e.getUTCMonth();return"M"===t?String(n+1):h(n+1,2)},b=function(e,t){return h(e.getUTCDate(),t.length)},w=function(e,t){return h(e.getUTCHours()%12||12,t.length)},x=function(e,t){return h(e.getUTCHours(),t.length)},v=function(e,t){return h(e.getUTCMinutes(),t.length)},y=function(e,t){return h(e.getUTCSeconds(),t.length)},k=function(e,t){var n=t.length,r=e.getUTCMilliseconds();return h(Math.floor(r*Math.pow(10,n-3)),t.length)};var B={G:function(e,t,n){var r=e.getUTCFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return n.era(r,{width:"abbreviated"});case"GGGGG":return n.era(r,{width:"narrow"});default:return n.era(r,{width:"wide"})}},y:function(e,t,n){if("yo"===t){var r=e.getUTCFullYear(),o=r>0?r:1-r;return n.ordinalNumber(o,{unit:"year"})}return f(e,t)},Y:function(e,t,n,r){var o=m(e,r),a=o>0?o:1-o;return"YY"===t?h(a%100,2):"Yo"===t?n.ordinalNumber(a,{unit:"year"}):h(a,t.length)},R:function(e,t){return h(d(e),t.length)},u:function(e,t){return h(e.getUTCFullYear(),t.length)},Q:function(e,t,n){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"Q":return String(r);case"QQ":return h(r,2);case"Qo":return n.ordinalNumber(r,{unit:"quarter"});case"QQQ":return n.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(r,{width:"narrow",context:"formatting"});default:return n.quarter(r,{width:"wide",context:"formatting"})}},q:function(e,t,n){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"q":return String(r);case"qq":return h(r,2);case"qo":return n.ordinalNumber(r,{unit:"quarter"});case"qqq":return n.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(r,{width:"narrow",context:"standalone"});default:return n.quarter(r,{width:"wide",context:"standalone"})}},M:function(e,t,n){var r=e.getUTCMonth();switch(t){case"M":case"MM":return g(e,t);case"Mo":return n.ordinalNumber(r+1,{unit:"month"});case"MMM":return n.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(r,{width:"narrow",context:"formatting"});default:return n.month(r,{width:"wide",context:"formatting"})}},L:function(e,t,n){var r=e.getUTCMonth();switch(t){case"L":return String(r+1);case"LL":return h(r+1,2);case"Lo":return n.ordinalNumber(r+1,{unit:"month"});case"LLL":return n.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(r,{width:"narrow",context:"standalone"});default:return n.month(r,{width:"wide",context:"standalone"})}},w:function(e,t,n,o){var a=function(e,t){r(1,arguments);var n=i(e),o=C(n,t).getTime()-function(e,t){var n,o,a,i,s,d,l,c;r(1,arguments);var p=u(),h=A(null!==(n=null!==(o=null!==(a=null!==(i=null==t?void 0:t.firstWeekContainsDate)&&void 0!==i?i:null==t||null===(s=t.locale)||void 0===s||null===(d=s.options)||void 0===d?void 0:d.firstWeekContainsDate)&&void 0!==a?a:p.firstWeekContainsDate)&&void 0!==o?o:null===(l=p.locale)||void 0===l||null===(c=l.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==n?n:1),f=m(e,t),g=new Date(0);return g.setUTCFullYear(f,0,h),g.setUTCHours(0,0,0,0),C(g,t)}(n,t).getTime();return Math.round(o/p)+1}(e,o);return"wo"===t?n.ordinalNumber(a,{unit:"week"}):h(a,t.length)},I:function(e,t,n){var o=function(e){r(1,arguments);var t=i(e),n=s(t).getTime()-function(e){r(1,arguments);var t=d(e),n=new Date(0);return n.setUTCFullYear(t,0,4),n.setUTCHours(0,0,0,0),s(n)}(t).getTime();return Math.round(n/l)+1}(e);return"Io"===t?n.ordinalNumber(o,{unit:"week"}):h(o,t.length)},d:function(e,t,n){return"do"===t?n.ordinalNumber(e.getUTCDate(),{unit:"date"}):b(e,t)},D:function(e,t,n){var o=function(e){r(1,arguments);var t=i(e),n=t.getTime();t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0);var o=n-t.getTime();return Math.floor(o/864e5)+1}(e);return"Do"===t?n.ordinalNumber(o,{unit:"dayOfYear"}):h(o,t.length)},E:function(e,t,n){var r=e.getUTCDay();switch(t){case"E":case"EE":case"EEE":return n.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},e:function(e,t,n,r){var o=e.getUTCDay(),a=(o-r.weekStartsOn+8)%7||7;switch(t){case"e":return String(a);case"ee":return h(a,2);case"eo":return n.ordinalNumber(a,{unit:"day"});case"eee":return n.day(o,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(o,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(o,{width:"short",context:"formatting"});default:return n.day(o,{width:"wide",context:"formatting"})}},c:function(e,t,n,r){var o=e.getUTCDay(),a=(o-r.weekStartsOn+8)%7||7;switch(t){case"c":return String(a);case"cc":return h(a,t.length);case"co":return n.ordinalNumber(a,{unit:"day"});case"ccc":return n.day(o,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(o,{width:"narrow",context:"standalone"});case"cccccc":return n.day(o,{width:"short",context:"standalone"});default:return n.day(o,{width:"wide",context:"standalone"})}},i:function(e,t,n){var r=e.getUTCDay(),o=0===r?7:r;switch(t){case"i":return String(o);case"ii":return h(o,t.length);case"io":return n.ordinalNumber(o,{unit:"day"});case"iii":return n.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},a:function(e,t,n){var r=e.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(e,t,n){var r,o=e.getUTCHours();switch(r=12===o?"noon":0===o?"midnight":o/12>=1?"pm":"am",t){case"b":case"bb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(e,t,n){var r,o=e.getUTCHours();switch(r=o>=17?"evening":o>=12?"afternoon":o>=4?"morning":"night",t){case"B":case"BB":case"BBB":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(e,t,n){if("ho"===t){var r=e.getUTCHours()%12;return 0===r&&(r=12),n.ordinalNumber(r,{unit:"hour"})}return w(e,t)},H:function(e,t,n){return"Ho"===t?n.ordinalNumber(e.getUTCHours(),{unit:"hour"}):x(e,t)},K:function(e,t,n){var r=e.getUTCHours()%12;return"Ko"===t?n.ordinalNumber(r,{unit:"hour"}):h(r,t.length)},k:function(e,t,n){var r=e.getUTCHours();return 0===r&&(r=24),"ko"===t?n.ordinalNumber(r,{unit:"hour"}):h(r,t.length)},m:function(e,t,n){return"mo"===t?n.ordinalNumber(e.getUTCMinutes(),{unit:"minute"}):v(e,t)},s:function(e,t,n){return"so"===t?n.ordinalNumber(e.getUTCSeconds(),{unit:"second"}):y(e,t)},S:function(e,t){return k(e,t)},X:function(e,t,n,r){var o=(r._originalDate||e).getTimezoneOffset();if(0===o)return"Z";switch(t){case"X":return I(o);case"XXXX":case"XX":return S(o);default:return S(o,":")}},x:function(e,t,n,r){var o=(r._originalDate||e).getTimezoneOffset();switch(t){case"x":return I(o);case"xxxx":case"xx":return S(o);default:return S(o,":")}},O:function(e,t,n,r){var o=(r._originalDate||e).getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+E(o,":");default:return"GMT"+S(o,":")}},z:function(e,t,n,r){var o=(r._originalDate||e).getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+E(o,":");default:return"GMT"+S(o,":")}},t:function(e,t,n,r){var o=r._originalDate||e;return h(Math.floor(o.getTime()/1e3),t.length)},T:function(e,t,n,r){return h((r._originalDate||e).getTime(),t.length)}};function E(e,t){var n=e>0?"-":"+",r=Math.abs(e),o=Math.floor(r/60),a=r%60;if(0===a)return n+String(o);var i=t||"";return n+String(o)+i+h(a,2)}function I(e,t){return e%60==0?(e>0?"-":"+")+h(Math.abs(e)/60,2):S(e,t)}function S(e,t){var n=t||"",r=e>0?"-":"+",o=Math.abs(e);return r+h(Math.floor(o/60),2)+n+h(o%60,2)}const D=B;var T=function(e,t){switch(e){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});default:return t.date({width:"full"})}},j=function(e,t){switch(e){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});default:return t.time({width:"full"})}};const M={p:j,P:function(e,t){var n,r=e.match(/(P+)(p+)?/)||[],o=r[1],a=r[2];if(!a)return T(e,t);switch(o){case"P":n=t.dateTime({width:"short"});break;case"PP":n=t.dateTime({width:"medium"});break;case"PPP":n=t.dateTime({width:"long"});break;default:n=t.dateTime({width:"full"})}return n.replace("{{date}}",T(o,t)).replace("{{time}}",j(a,t))}};var W=["D","DD"],J=["YY","YYYY"];function z(e,t,n){if("YYYY"===e)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===e)throw new RangeError("Use `yy` instead of `YY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===e)throw new RangeError("Use `d` instead of `D` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===e)throw new RangeError("Use `dd` instead of `DD` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var G={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function O(e){return function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=t.width?String(t.width):e.defaultWidth;return e.formats[n]||e.formats[e.defaultWidth]}}const U={date:O({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:O({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:O({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var L={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function P(e){return function(t,n){var r;if("formatting"===(null!=n&&n.context?String(n.context):"standalone")&&e.formattingValues){var o=e.defaultFormattingWidth||e.defaultWidth,a=null!=n&&n.width?String(n.width):o;r=e.formattingValues[a]||e.formattingValues[o]}else{var i=e.defaultWidth,A=null!=n&&n.width?String(n.width):e.defaultWidth;r=e.values[A]||e.values[i]}return r[e.argumentCallback?e.argumentCallback(t):t]}}const Y={ordinalNumber:function(e,t){var n=Number(e),r=n%100;if(r>20||r<10)switch(r%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:P({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:P({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return e-1}}),month:P({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:P({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:P({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function H(e){return function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=n.width,o=r&&e.matchPatterns[r]||e.matchPatterns[e.defaultMatchWidth],a=t.match(o);if(!a)return null;var i,A=a[0],s=r&&e.parsePatterns[r]||e.parsePatterns[e.defaultParseWidth],d=Array.isArray(s)?function(e,t){for(var n=0;n<e.length;n++)if(e[n].test(A))return n}(s):function(e,t){for(var n in e)if(e.hasOwnProperty(n)&&e[n].test(A))return n}(s);return i=e.valueCallback?e.valueCallback(d):d,{value:i=n.valueCallback?n.valueCallback(i):i,rest:t.slice(A.length)}}}var $,q={ordinalNumber:($={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.match($.matchPattern);if(!n)return null;var r=n[0],o=e.match($.parsePattern);if(!o)return null;var a=$.valueCallback?$.valueCallback(o[0]):o[0];return{value:a=t.valueCallback?t.valueCallback(a):a,rest:e.slice(r.length)}}),era:H({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:H({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:H({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:H({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:H({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const R={code:"en-US",formatDistance:function(e,t,n){var r,o=G[e];return r="string"==typeof o?o:1===t?o.one:o.other.replace("{{count}}",t.toString()),null!=n&&n.addSuffix?n.comparison&&n.comparison>0?"in "+r:r+" ago":r},formatLong:U,formatRelative:function(e,t,n,r){return L[e]},localize:Y,match:q,options:{weekStartsOn:0,firstWeekContainsDate:1}};var N=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,Q=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,F=/^'([^]*?)'?$/,K=/''/g,_=/[a-zA-Z]/;function X(e,t,n){var a,s,d,l,c,C,m,p,h,f,g,b,w,x,v,y,k,B;r(2,arguments);var E=String(t),I=u(),S=null!==(a=null!==(s=null==n?void 0:n.locale)&&void 0!==s?s:I.locale)&&void 0!==a?a:R,T=A(null!==(d=null!==(l=null!==(c=null!==(C=null==n?void 0:n.firstWeekContainsDate)&&void 0!==C?C:null==n||null===(m=n.locale)||void 0===m||null===(p=m.options)||void 0===p?void 0:p.firstWeekContainsDate)&&void 0!==c?c:I.firstWeekContainsDate)&&void 0!==l?l:null===(h=I.locale)||void 0===h||null===(f=h.options)||void 0===f?void 0:f.firstWeekContainsDate)&&void 0!==d?d:1);if(!(T>=1&&T<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var j=A(null!==(g=null!==(b=null!==(w=null!==(x=null==n?void 0:n.weekStartsOn)&&void 0!==x?x:null==n||null===(v=n.locale)||void 0===v||null===(y=v.options)||void 0===y?void 0:y.weekStartsOn)&&void 0!==w?w:I.weekStartsOn)&&void 0!==b?b:null===(k=I.locale)||void 0===k||null===(B=k.options)||void 0===B?void 0:B.weekStartsOn)&&void 0!==g?g:0);if(!(j>=0&&j<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!S.localize)throw new RangeError("locale must contain localize property");if(!S.formatLong)throw new RangeError("locale must contain formatLong property");var G=i(e);if(!function(e){if(r(1,arguments),!function(e){return r(1,arguments),e instanceof Date||"object"===o(e)&&"[object Date]"===Object.prototype.toString.call(e)}(e)&&"number"!=typeof e)return!1;var t=i(e);return!isNaN(Number(t))}(G))throw new RangeError("Invalid time value");var O=function(e){var t=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return t.setUTCFullYear(e.getFullYear()),e.getTime()-t.getTime()}(G),U=function(e,t){return r(2,arguments),function(e,t){r(2,arguments);var n=i(e).getTime(),o=A(t);return new Date(n+o)}(e,-A(t))}(G,O),L={firstWeekContainsDate:T,weekStartsOn:j,locale:S,_originalDate:G};return E.match(Q).map((function(e){var t=e[0];return"p"===t||"P"===t?(0,M[t])(e,S.formatLong):e})).join("").match(N).map((function(r){if("''"===r)return"'";var o,a,i=r[0];if("'"===i)return(a=(o=r).match(F))?a[1].replace(K,"'"):o;var A,s=D[i];if(s)return null!=n&&n.useAdditionalWeekYearTokens||(A=r,-1===J.indexOf(A))||z(r,t,String(e)),null!=n&&n.useAdditionalDayOfYearTokens||!function(e){return-1!==W.indexOf(e)}(r)||z(r,t,String(e)),s(U,r,S.localize,L);if(i.match(_))throw new RangeError("Format string contains an unescaped latin alphabet character `"+i+"`");return r})).join("")}const Z=(e,t)=>{const n=e.getAll();for(const e in n)n[e].id===t&&n.splice(e,1)},V=e=>{localStorage.setItem("packageManager",JSON.stringify(e))},ee=(e,t,n,r)=>{const o=document.querySelector("#expand-arrow"),a=document.querySelector(".side-panel");o.ondragover=()=>{t.parentElement.classList.remove("expand-panel"),a.classList.remove("display-open"),t.parentElement.classList.add("close-panel"),a.classList.add("display-closed")};const i=document.createElement("div");i.classList.add("todo"),i.id=`todo-${e.id}`,i.setAttribute("draggable","true");const A=document.createElement("input");A.setAttribute("type","checkbox"),A.classList.add("todo-checkbox");const s=document.createElement("p");s.classList.add("title"),s.textContent=e.title;const d=document.createElement("p");d.classList.add("due-date"),d.textContent=e.dueDate;const l=document.createElement("input");l.setAttribute("type","date"),l.classList.add("todo-new-date"),l.value=e.dueDate;const c=document.createElement("button");c.classList.add("remove-todo"),c.textContent="X";const u=document.createElement("div");u.classList.add("remove-button-container"),u.appendChild(c);const C=document.createElement("div");C.classList.add("checkbox-container"),C.appendChild(A),i.appendChild(C),i.appendChild(s),i.appendChild(d),i.appendChild(u),t.appendChild(i);const m=document.createElement("input");return m.classList.add("todo-new-title"),m.value=e.title,c.onclick=()=>{Z(n,e.id),i.remove(),V(r)},s.onclick=()=>{s.appendChild(m),m.focus()},d.onclick=()=>{d.appendChild(l),l.focus()},m.onblur=()=>{e.title=m.value,s.textContent=e.title,m.remove(),V(r)},m.onkeyup=({key:e})=>{"Enter"===e&&m.blur()},l.onkeyup=({key:e})=>{"Enter"===e&&l.blur()},i.ondragstart=t=>{const r={todoObj:e,projectObj:n};t.dataTransfer.setData("text",JSON.stringify(r))},i.ondragend=e=>{e.preventDefault(),te(r,n,t)},l.onblur=()=>{if(""!==l.value){const t=X(new Date(`${l.value}T00:00`),"MM/dd/yyyy");e.dueDate=t,d.valueAsDate=t,d.textContent=e.dueDate,V(r)}l.remove()},i},te=(e,t,n)=>{n.innerHTML="","All"===t.title?((e,t)=>{e.getAll().forEach((n=>{n.getAll().forEach((r=>{ee(r,t,n,e)}))}));let n=t.children;n=Array.prototype.slice.call(n),n.sort(((e,t)=>new Date(e.childNodes[2].innerHTML)-new Date(t.childNodes[2].innerHTML)));const r=t;for(let e=0;e<n.length;e++)r.appendChild(n[e])})(e,n):t.getAll().forEach((r=>{ee(r,n,t,e)}))},ne=(t,n,r)=>{const o=document.querySelector(".main-panel"),a=document.createElement("button");a.classList.add("create-todo-form-button"),a.id="todo-create-new",a.textContent="Create new Todo";const i=document.createElement("div");i.id="tool-tip",i.innerHTML='<p id="tip-paragraph">Try dragging and dropping a Task into a project!</p>',a.onclick=()=>{((t,n,r)=>{const o=document.createElement("div");o.classList.add("create-todo-form");const a=document.createElement("form");a.id="todo-form";const i=document.createElement("label");i.setAttribute("for","form-todo-title"),i.textContent="todo:";const A=document.createElement("input");A.setAttribute("type","text"),A.id="form-Todo-title";const s=document.createElement("button");s.textContent="+Add",s.classList.add("form-create-td");const d=document.createElement("button");d.textContent="Cancel",d.classList.add("form-remove-td");const l=document.createElement("div");l.id="form-buttons-td",l.appendChild(s),l.appendChild(d),a.appendChild(i),a.appendChild(A),o.appendChild(a),o.appendChild(l),document.body.appendChild(o),A.focus(),A.onblur=()=>{""!==A.value?c():o.remove()},d.onclick=()=>{o.remove()},a.addEventListener("submit",(e=>{e.preventDefault(),c()})),s.addEventListener("click",(()=>{c()}));const c=()=>{if(""!==A.value){const a=new e(A.value,"Set Date",(()=>{let e=0;return t.getAll().forEach((t=>{t.getAll().forEach((()=>{e+=1}))})),e})());n.addTodo(a),o.remove(),te(t,n,r),V(t)}}})(t,n,r)};const A=document.getElementById("todo-create-new"),s=document.getElementById("tool-tip");return document.body.contains(s)&&s.remove(),document.body.contains(A)&&A.remove(),o.appendChild(a),o.appendChild(i),a},re=(t,n,r,o)=>{const a=document.querySelector("#nav-title"),i=r.parentElement;if(document.querySelector("#expand-arrow").onclick=()=>{o.parentElement.classList.remove("expand-panel"),i.classList.remove("display-open"),o.parentElement.classList.add("close-panel"),i.classList.add("display-closed")},"All"!==n.title){const e=document.createElement("div"),s=document.createElement("button");s.classList.add("edit-project");const d=document.createElement("img");d.classList.add("edit-icon"),s.appendChild(d),e.classList.add("project"),e.id=`project-${n.id}`;const l=document.createElement("p");l.classList.add("project-name"),l.textContent=n.title;const c=document.createElement("input");c.id="new-name-input",c.value=n.title;const u=document.createElement("button");u.classList.add("project-remove-button"),u.textContent="X",e.appendChild(l);const C=document.createElement("div");C.classList.add("button-panel"),C.appendChild(s),C.appendChild(u),e.appendChild(C),r.appendChild(e),e.addEventListener("drop",(e=>A(e,n,t))),u.onclick=()=>{Z(t,n.id),V(t),e.remove()},s.onclick=()=>{l.remove(),e.appendChild(c),c.focus()},c.onblur=()=>{l.textContent=c.value,n.title=c.value,c.remove(),e.insertBefore(l,C),V(t)},c.onkeyup=({key:e})=>{"Enter"===e&&c.blur()},e.addEventListener("click",(function(e){e.target!==this&&e.target!==l||(o.parentElement.classList.contains("close-panel")&&(o.parentElement.classList.remove("close-panel"),i.classList.remove("display-closed")),o.parentElement.classList.add("expand-panel"),i.classList.add("display-open"),o.innerHTML="",a.textContent=n.title,te(t,n,o),ne(t,n,o))})),e.addEventListener("dragover",(e=>{e.preventDefault()}))}else{const e=document.createElement("div");e.classList.add("project"),e.id="all-projects-container";const A=document.createElement("p");A.classList.add("project-name"),A.textContent=n.title,e.appendChild(A),r.appendChild(e),e.onclick=()=>{o.parentElement.classList.contains("close-panel")&&(o.parentElement.classList.remove("close-panel"),i.classList.remove("display-closed")),o.parentElement.classList.add("expand-panel"),i.classList.add("display-open"),o.innerHTML="",a.textContent=n.title,te(t,n,o),ne(t,n,o)}}const A=(t,n,r)=>{t.preventDefault();const o=JSON.parse(t.dataTransfer.getData("text")).todoObj,a=JSON.parse(t.dataTransfer.getData("text")).projectObj,i=new e(o._title,o._dueDate,o._id);n.addTodo(i);const A=r.getAll();for(const e in A)if(A[e].id===a._id){const t=A[e];Z(t,i.id)}V(r)}},oe=(e,t,n)=>{t.innerHTML="",e.projects.forEach((r=>{const o=re(e,r,t,n);r.div=o,V(e)}))};var ae=n(379),ie=n.n(ae),Ae=n(795),se=n.n(Ae),de=n(569),le=n.n(de),ce=n(565),ue=n.n(ce),Ce=n(216),me=n.n(Ce),pe=n(589),he=n.n(pe),fe=n(169),ge={};let be;ge.styleTagTransform=he(),ge.setAttributes=ue(),ge.insert=le().bind(null,"head"),ge.domAPI=se(),ge.insertStyleElement=me(),ie()(fe.Z,ge),fe.Z&&fe.Z.locals&&fe.Z.locals;const we=new class{projects=[];addProj(e){this.projects.push(e)}getAll(){return this.projects}};if(null!=localStorage.getItem("packageManager")&&(be=JSON.parse(localStorage.getItem("packageManager")).projects,be.forEach((n=>{const r=new t(n._title,n._id,n._div);we.addProj(r);const{todos:o}=n;o.forEach((t=>{console.log(t);const n=new e(t._title,t._dueDate,t._id);r.addTodo(n)}))}))),we.getAll().length<1){const e=new t("All",0);we.addProj(e)}const xe=(()=>{const e=document.createElement("div");e.classList.add("main-panel");const t=document.createElement("div");t.id="nav-bar";const n=document.createElement("div");n.id="expand-arrow";const r=document.createElement("div");r.classList.add("project-display-panel");const o=document.createElement("p");return o.textContent="Project Title",o.id="nav-title",t.appendChild(n),t.appendChild(o),e.appendChild(t),e.appendChild(r),document.body.appendChild(e),r})(),ve=((e,n)=>{const r=document.createElement("div");r.classList.add("side-panel");const o=document.createElement("div");o.classList.add("projman-header"),o.innerHTML="<h2 id = panel-title>Todo-App</h2> <p id ='projman-label'>Projects</p>";const a=document.createElement("div");a.classList.add("project-manager");const i=document.createElement("button");i.classList.add("new-project-button"),i.textContent="+ Add Project";const A=document.querySelector(".main-panel"),s=document.body;return r.appendChild(o),r.appendChild(a),r.appendChild(i),s.insertBefore(r,A),i.addEventListener("click",(()=>{((e,n,r)=>{const o=document.createElement("input");o.setAttribute("type","text"),o.id="form-project-name";const a=document.createElement("button");a.textContent="+ Add",a.id="create-button";const i=document.createElement("div");i.id="input-placeholder",i.classList.add("project"),i.appendChild(o),i.appendChild(a),e.appendChild(i),o.focus(),o.onkeyup=({key:e})=>{"Enter"===e&&o.blur()},a.onclick=()=>{""!==o.value?A():i.remove()},o.onblur=()=>{""!==o.value?A():i.remove()};const A=()=>{const a=new t(o.value,n.getAll().length);n.addProj(a),oe(n,e,r),V(n)}})(a,e,n)})),a})(we,xe);oe(we,ve,xe),V(we)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,