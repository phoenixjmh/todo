(()=>{"use strict";var e={192:(e,t,n)=>{n.d(t,{Z:()=>d});var r=n(537),o=n.n(r),i=n(645),a=n.n(i)()(o());a.push([e.id,"body{display:flex;height:100vh;width:100%}.side-panel{background-color:#3737ef;flex:1 1 auto;height:100%}.project-manager{border:2px solid red}.main-panel{flex:3 3 auto;border:2px solid #639;height:100%}.project-display-panel{display:flex;flex-direction:column;justify-content:center;align-items:center}.todo{width:80%;display:flex;border:2px solid #000;justify-content:space-between}.create-project-form{border:2px solid #000;height:20%;position:absolute;top:50%;left:50%;background-color:gray}.create-todo-form{border:2px solid #000;height:20%;position:absolute;top:50%;left:50%;background-color:gray}","",{version:3,sources:["webpack://./src/style.scss"],names:[],mappings:"AAAA,KACI,YAAA,CACA,YAAA,CACA,UAAA,CAGJ,YACI,wBAAA,CACA,aAAA,CACA,WAAA,CAEJ,iBACI,oBAAA,CAEJ,YACI,aAAA,CACA,qBAAA,CACA,WAAA,CAGJ,uBACI,YAAA,CACA,qBAAA,CACA,sBAAA,CACA,kBAAA,CAKJ,MACI,SAAA,CACA,YAAA,CACA,qBAAA,CACA,6BAAA,CAEJ,qBACI,qBAAA,CACA,UAAA,CACA,iBAAA,CACA,OAAA,CACA,QAAA,CACA,qBAAA,CAGJ,kBACI,qBAAA,CACI,UAAA,CACA,iBAAA,CACA,OAAA,CACA,QAAA,CACA,qBAAA",sourcesContent:["body{\r\n    display:flex;\r\n    height:100vh;\r\n    width:100%;\r\n}\r\n\r\n.side-panel{\r\n    background-color: rgb(55, 55, 239);\r\n    flex: 1 1 auto;\r\n    height:100%;\r\n}\r\n.project-manager{\r\n    border:2px solid red;\r\n}\r\n.main-panel{\r\n    flex :3 3 auto;\r\n    border:2px solid rebeccapurple;\r\n    height:100%;\r\n\r\n}\r\n.project-display-panel{\r\n    display:flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n}\r\n.project{\r\n    \r\n}\r\n.todo{\r\n    width:80%;\r\n    display:flex;\r\n    border:2px solid black;\r\n    justify-content: space-between;\r\n}\r\n.create-project-form{\r\n    border:2px solid black;\r\n    height:20%;\r\n    position:absolute;\r\n    top:50%;\r\n    left:50%;\r\n    background-color: gray;\r\n}\r\n\r\n.create-todo-form{\r\n    border: 2px solid black;\r\n        height: 20%;\r\n        position: absolute;\r\n        top: 50%;\r\n        left: 50%;\r\n        background-color: gray;\r\n}\r\n\r\n"],sourceRoot:""}]);const d=a},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,o,i){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(r)for(var d=0;d<this.length;d++){var c=this[d][0];null!=c&&(a[c]=!0)}for(var l=0;l<e.length;l++){var s=[].concat(e[l]);r&&a[s[0]]||(void 0!==i&&(void 0===s[5]||(s[1]="@layer".concat(s[5].length>0?" ".concat(s[5]):""," {").concat(s[1],"}")),s[5]=i),n&&(s[2]?(s[1]="@media ".concat(s[2]," {").concat(s[1],"}"),s[2]=n):s[2]=n),o&&(s[4]?(s[1]="@supports (".concat(s[4],") {").concat(s[1],"}"),s[4]=o):s[4]="".concat(o)),t.push(s))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */");return[t].concat([i]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var i={},a=[],d=0;d<e.length;d++){var c=e[d],l=r.base?c[0]+r.base:c[0],s=i[l]||0,p="".concat(l," ").concat(s);i[l]=s+1;var u=n(p),A={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==u)t[u].references++,t[u].updater(A);else{var m=o(A,r);r.byIndex=d,t.splice(d,0,{identifier:p,updater:m,references:1})}a.push(p)}return a}function o(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var i=r(e=e||[],o=o||{});return function(e){e=e||[];for(var a=0;a<i.length;a++){var d=n(i[a]);t[d].references--}for(var c=r(e,o),l=0;l<i.length;l++){var s=n(i[l]);0===t[s].references&&(t[s].updater(),t.splice(s,1))}i=c}}},569:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var i=t[r]={id:r,exports:{}};return e[r](i,i.exports,n),i.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nc=void 0,(()=>{class e{constructor(e,t,n,r,o){this._title=e,this._description=t,this._dueDate=n,this._priority=r,this.id=o}get title(){return this._title}get description(){return this._description}get dueDate(){return this._dueDate}get priority(){return this._priority}get id(){return this._id}set title(e){this._title=e}set description(e){this._description=e}set dueDate(e){this._dueDate=e}set priority(e){this._priority=e}set id(e){this._id=e}}class t{todos=[];constructor(e,t,n){this._title=e,this._id=t,this._div=n}get title(){return this._title}set title(e){this._title=e}get id(){return this._id}get div(){return this._div}set div(e){this._div=e}addTodo(e){this.todos.push(e)}getAll(){return this.todos}}const r=(e,t,n,r,o,i,a)=>{let d=document.createElement("div");d.classList.add("todo"),d.id="todo-"+o;let c=document.createElement("h4");c.classList.add("title"),c.textContent=e;let l=document.createElement("h4");l.classList.add("description"),l.textContent=t;let s=document.createElement("h4");s.classList.add("due-date"),s.textContent=n;let p=document.createElement("button");return p.classList.add("remove-todo"),p.textContent="Remove",d.appendChild(c),d.appendChild(l),d.appendChild(s),d.appendChild(p),i.appendChild(d),p.addEventListener("click",(()=>{((e,t)=>{let n=e.getAll();for(let e in n)n[e].id==t&&(console.log("ID match, Time to add remove function","Object matched was named",n[e].title),n.splice(n[e],1))})(a,o),d.remove()})),d},o=(e,t)=>{t.innerHTML="",e.getAll().forEach((n=>{r(n.title,n.description,n.dueDate,n.priority,n.id,t,e)}))},i=(t,n)=>{const r=document.querySelector(".main-panel");let i=document.createElement("button");i.classList.add("create-todo-form-button"),i.id="todo-create-new",i.textContent="Create new Todo",i.addEventListener("click",(()=>{((t,n)=>{let r=document.createElement("div");r.classList.add("create-todo-form");let i=document.createElement("form"),a=document.createElement("label");a.setAttribute("for","form-todo-title"),a.textContent="Title";let d=document.createElement("input");d.setAttribute("type","text"),d.id="form-Todo-title";let c=document.createElement("label");c.setAttribute("for","form-todo-description"),c.textContent="Description";let l=document.createElement("input");l.setAttribute("type","text"),l.id="form-todo-description";let s=document.createElement("label");s.setAttribute("for","form-todo-dueDate"),s.textContent="Due Date";let p=document.createElement("input");p.setAttribute("type","text"),p.id="form-todo-dueDate";let u=document.createElement("label");u.setAttribute("for","form-todo-priority"),u.textContent="Priority";let A=document.createElement("input");A.setAttribute("type","text"),A.id="form-todo-priority";let m=document.createElement("button");m.textContent="Create",m.classList.add("form-button-todo"),i.appendChild(a),i.appendChild(d),i.appendChild(c),i.appendChild(l),i.appendChild(s),i.appendChild(p),r.appendChild(i),r.appendChild(m),document.body.appendChild(r),m.addEventListener("click",(()=>{let i=new e(d.value,l.value,p.value,A.value,t.getAll().length);t.addTodo(i),r.remove(),o(t,n)}))})(t,n)}));let a=document.getElementById("todo-create-new");return document.body.contains(a)&&a.remove(),r.appendChild(i),i},a=(e,t,n)=>{console.log("Hello from loadProjects, its",n),t.innerHTML="",e.getAll().forEach((e=>{const r=((e,t,n,r,a)=>{let d=document.createElement("div");d.classList.add("project"),d.id="project-"+n;let c=document.createElement("h1");return c.classList.add("project-name"),c.textContent=t,console.log("Hello from drawExistingProjects to list its",a),d.addEventListener("click",(function(){a.innerHTML="",o(e,a),i(e,a)})),d.appendChild(c),r.appendChild(d),d})(e,e.title,e.id,t,n);e.div=r}))};var d=n(379),c=n.n(d),l=n(795),s=n.n(l),p=n(569),u=n.n(p),A=n(565),m=n.n(A),f=n(216),h=n.n(f),C=n(589),v=n.n(C),b=n(192),y={};y.styleTagTransform=v(),y.setAttributes=m(),y.insert=u().bind(null,"head"),y.domAPI=s(),y.insertStyleElement=h(),c()(b.Z,y),b.Z&&b.Z.locals&&b.Z.locals;let g=new class{projects=[];addProj(e){this.projects.push(e)}getAll(){return this.projects}};const x=(()=>{let e=document.createElement("div");e.classList.add("main-panel");let t=document.createElement("div");return t.classList.add("project-display-panel"),e.appendChild(t),document.body.appendChild(e),t})(),E=((e,n)=>{let r=document.createElement("div");r.classList.add("side-panel");let o=document.createElement("div");o.classList.add("project-manager");let i=document.createElement("button");i.classList.add("new-project-button"),i.textContent="Create A New Project";let d=document.querySelector(".main-panel");const c=document.body;return r.appendChild(o),r.appendChild(i),c.insertBefore(r,d),i.addEventListener("click",(()=>{((e,n,r)=>{let o=document.createElement("div");o.classList.add("create-project-form");let i=document.createElement("form"),d=document.createElement("label");d.setAttribute("for","form-project-name"),d.textContent="Project Name";let c=document.createElement("input");c.setAttribute("type","text"),c.id="form-project-name";let l=document.createElement("button");l.textContent="Create",l.classList.add("form-button"),i.appendChild(d),i.appendChild(c),o.appendChild(i),o.appendChild(l),document.body.appendChild(o),l.addEventListener("click",(()=>{o.remove();let i=new t(c.value,n.getAll().length);n.addProj(i),a(n,e,r)}))})(o,e,n),console.log("button")})),o})(g,x);document.querySelector(".main-panel");let j=new t("Grocery",0),w=new e("Eggs",0,0,0,0),L=new e("bacon",0,0,0,1);j.addTodo(w),j.addTodo(L),g.addProj(j);let _=new t("Hardware",1),T=new e("Nails",0,0,0,0),B=new e("Screws",0,0,0,1);_.addTodo(T),_.addTodo(B),g.addProj(_),console.log(g),a(g,E,x),console.log(x)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,